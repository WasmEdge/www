"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[4845],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(a),c=r,k=d["".concat(o,".").concat(c)]||d[c]||u[c]||i;return a?n.createElement(k,l(l({ref:t},m),{},{components:a})):n.createElement(k,l({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2256:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},l="5.1 WasmEdge Rust SDK Introduction",s={unversionedId:"embed/rust/intro",id:"embed/rust/intro",title:"5.1 WasmEdge Rust SDK Introduction",description:"- WasmEdge Rust SDK",source:"@site/docs/embed/rust/intro.md",sourceDirName:"embed/rust",slug:"/embed/rust/intro",permalink:"/book/zh-TW/embed/rust/intro",draft:!1,editUrl:"https://github.com/alabulei1/book/docs/embed/rust/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"embedSidebar",previous:{title:"Rust SDK for Embedding Wasm Functions",permalink:"/book/zh-TW/category/rust-sdk-for-embedding-wasm-functions"},next:{title:"5.2 Embed Wasm Apps",permalink:"/book/zh-TW/embed/rust/app"}},o={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Versioning Table",id:"versioning-table",level:2},{value:"Build",id:"build",level:2},{value:"<code>wasmedge-sys</code> crate",id:"wasmedge-sys-crate",level:2},{value:"Enable WasmEdge Plugins",id:"enable-wasmedge-plugins",level:2},{value:"Docker image",id:"docker-image",level:2},{value:"Examples",id:"examples",level:2}],m={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"51-wasmedge-rust-sdk-introduction"},"5.1 WasmEdge Rust SDK Introduction"),(0,r.kt)("h1",{id:"wasmedge-rust-sdk"},"WasmEdge Rust SDK"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#wasmedge-rust-sdk"},"WasmEdge Rust SDK"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#versioning-table"},"Versioning Table")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build"},"Build")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#wasmedge-sys-crate"},(0,r.kt)("inlineCode",{parentName:"a"},"wasmedge-sys")," crate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#enable-wasmedge-plugins"},"Enable WasmEdge Plugins")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#docker-image"},"Docker image")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#examples"},"Examples"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#wasmedge-sdk-examples"},(0,r.kt)("inlineCode",{parentName:"a"},"wasmedge-sdk")," Examples")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#wasmedge-sys-examples"},(0,r.kt)("inlineCode",{parentName:"a"},"wasmedge-sys")," Examples"))))))),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," supports embedding into Rust applications via WasmEdge Rust SDK. WasmEdge Rust SDK consists of three crates:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/wasmedge-sdk"},"wasmedge-sdk")," crate. It defines a group of safe, ergonomic high-level APIs, which are used to build up business applications."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://wasmedge.github.io/WasmEdge/wasmedge_sdk/"},"API documentation")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/wasmedge-sys"},"wasmedge-sys")," crate. It defines a group of low-level Rust APIs, which simply wrap WasmEdge C-API and provide the safe counterparts. It is not recommended to use it directly to build up application."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://wasmedge.github.io/WasmEdge/wasmedge_sys/"},"API documentation")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/wasmedge-types"},"wasmedge-types")," crate. The data structures that are commonly used in ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge-sdk")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge-sys")," are defined in this crate."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://wasmedge.github.io/WasmEdge/wasmedge_types/"},"API documentation"))))),(0,r.kt)("h2",{id:"versioning-table"},"Versioning Table"),(0,r.kt)("p",null,"  The following table provides the versioning information about each release of ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge-sdk")," crate and its dependencies."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"wasmedge-sdk"),(0,r.kt)("th",{parentName:"tr",align:"center"},"WasmEdge lib"),(0,r.kt)("th",{parentName:"tr",align:"center"},"wasmedge-sys"),(0,r.kt)("th",{parentName:"tr",align:"center"},"wasmedge-types"),(0,r.kt)("th",{parentName:"tr",align:"center"},"wasmedge-macro"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"0.5.0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.11.1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.10"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.3.0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.1.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"0.4.0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.11.0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.9"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.2.1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"0.3.0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.10.1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.8"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.2"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"0.1.0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.10.0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.7"),(0,r.kt)("td",{parentName:"tr",align:"center"},"0.1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")))),(0,r.kt)("h2",{id:"build"},"Build"),(0,r.kt)("p",null,"To use ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge-sdk")," in your project, you should finish the following two steps before building your project:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"First, deploy ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," library on your local system."),(0,r.kt)("p",{parentName:"li"},"You can reference the versioning table and download ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," library from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/releases"},"WasmEdge Releases Page"),". After download the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," library, you can choose one of the following three ways to specify the locations of the required files:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By default location"),(0,r.kt)("p",{parentName:"li"},"For those who do not want to define environment variables, you can put the downloaded ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," binary package in the default location ",(0,r.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge/"),". The directory structure of the default location should looks like below:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"// $HOME/.wasmedge/ on Ubuntu-20.04\n.\n\u251c\u2500\u2500 bin\n\u2502\xa0\xa0 \u251c\u2500\u2500 wasmedge\n\u2502\xa0\xa0 \u2514\u2500\u2500 wasmedgec\n\u251c\u2500\u2500 include\n\u2502\xa0\xa0 \u2514\u2500\u2500 wasmedge\n\u2502\xa0\xa0     \u251c\u2500\u2500 enum.inc\n\u2502\xa0\xa0     \u251c\u2500\u2500 enum_configure.h\n\u2502\xa0\xa0     \u251c\u2500\u2500 enum_errcode.h\n\u2502\xa0\xa0     \u251c\u2500\u2500 enum_types.h\n\u2502\xa0\xa0     \u251c\u2500\u2500 int128.h\n\u2502\xa0\xa0     \u251c\u2500\u2500 version.h\n\u2502\xa0\xa0     \u2514\u2500\u2500 wasmedge.h\n\u2514\u2500\u2500 lib64\n    \u251c\u2500\u2500 libwasmedge.so\n    \u2514\u2500\u2500 wasmedge\n        \u2514\u2500\u2500 libwasmedgePluginWasmEdgeProcess.so\n\n5 directories, 11 files\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"// $HOME/.wasmedge/ on macOS-12\n.\n\u251c\u2500\u2500 bin\n\u2502\xa0\xa0 \u251c\u2500\u2500 wasmedge\n\u2502\xa0\xa0 \u2514\u2500\u2500 wasmedgec\n\u251c\u2500\u2500 include\n\u2502\xa0\xa0 \u2514\u2500\u2500 wasmedge\n\u2502\xa0\xa0     \u251c\u2500\u2500 enum.inc\n\u2502\xa0\xa0     \u251c\u2500\u2500 enum_configure.h\n\u2502\xa0\xa0     \u251c\u2500\u2500 enum_errcode.h\n\u2502\xa0\xa0     \u251c\u2500\u2500 enum_types.h\n\u2502\xa0\xa0     \u251c\u2500\u2500 int128.h\n\u2502\xa0\xa0     \u251c\u2500\u2500 version.h\n\u2502\xa0\xa0     \u2514\u2500\u2500 wasmedge.h\n\u2514\u2500\u2500 lib\n    \u2514\u2500\u2500 libwasmedge.dylib\n\n4 directories, 10 files\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By specifying ",(0,r.kt)("inlineCode",{parentName:"p"},"WASMEDGE_INCLUDE_DIR")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"WASMEDGE_LIB_DIR"),"."),(0,r.kt)("p",{parentName:"li"},"If you choose to use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/blob/master/utils/install.sh"},"install.sh")," to install WasmEdge Runtime on your local system, please use ",(0,r.kt)("inlineCode",{parentName:"p"},"WASMEDGE_INCLUDE_DIR")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"WASMEDGE_LIB_DIR")," to specify the paths to the ",(0,r.kt)("inlineCode",{parentName:"p"},"include")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lib")," directories respectively.\nFor example, use the following commands to specify the paths after using ",(0,r.kt)("inlineCode",{parentName:"p"},"bash install.sh --path=$HOME/wasmedge-install")," to install WasmEdge Runtime on Ubuntu 20.04:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export WASMEDGE_INCLUDE_DIR=$HOME/wasmedge-install/include \nexport WASMEDGE_LIB_DIR=$HOME/wasmedge-install/lib\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By specifying ",(0,r.kt)("inlineCode",{parentName:"p"},"WASMEDGE_BUILD_DIR")),(0,r.kt)("p",{parentName:"li"},"You can choose this way if you'd like to use the latest code in the ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," branch of the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," github repo. For example,"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Suppose that you ",(0,r.kt)("inlineCode",{parentName:"p"},"git clone")," WasmEdge repo in your local directory, for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"~/workspace/me/WasmEdge"),", and follow the ",(0,r.kt)("a",{parentName:"p",href:"/book/zh-TW/contribute/source/build_from_src"},"instructions to build")," WasmEdge native library. After that, you should find the generated ",(0,r.kt)("inlineCode",{parentName:"p"},"include")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lib")," directories in ",(0,r.kt)("inlineCode",{parentName:"p"},"~/workspace/me/WasmEdge/build"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Then, set ",(0,r.kt)("inlineCode",{parentName:"p"},"WASMEDGE_BUILD_DIR")," environment variable to specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," directory."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"root@0a877562f39e:~/workspace/me/WasmEdge# export WASMEDGE_BUILD_DIR=/root/workspace/me/WasmEdge/build\n"))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Second, after deploy the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," library on your local system, copy/paste the following code into the ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file of your project. Now, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo build")," command to build your project."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nwasmedge-sdk = "0.4"\n')),(0,r.kt)("h2",{id:"wasmedge-sys-crate"},(0,r.kt)("inlineCode",{parentName:"h2"},"wasmedge-sys")," crate"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge-sys")," serves as a wrapper layer of ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," C-API, and provides a group of safe low-level Rust interfaces.\nFor those who are interested in using ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge-sys")," in their projects, you should also deploy the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," library on your local system as described in the ",(0,r.kt)("a",{parentName:"p",href:"#build"},"wasmedge-sdk crate")," section.\nThen, copy/paste the following code in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file of your project.\nFor details, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/blob/master/bindings/rust/wasmedge-sys/README.md"},"README"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nwasmedge-sys = "0.9"\n')),(0,r.kt)("h2",{id:"enable-wasmedge-plugins"},"Enable WasmEdge Plugins"),(0,r.kt)("p",null,"If you'd like to enable WasmEdge Plugins (currently, only available on Linux platform), please use ",(0,r.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_PATH")," environment variable to specify the path to the directory containing the plugins. For example, use the following commands to specify the path on Ubuntu 20.04:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export WASMEDGE_PLUGIN_PATH=$HOME/.wasmedge/lib/wasmedge\n")),(0,r.kt)("h2",{id:"docker-image"},"Docker image"),(0,r.kt)("p",null,"For those who would like to dev in Docker environment, you can reference the ","[Use Docker]"," section of this book, which details how to use Docker for ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge")," application development."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"For helping you get familiar with WasmEdge Rust bindings, this chapter will cover the following quick examples demonstrate how to use the APIs defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge-sdk"),", respectively. In addition, we'll add more examples continuously. Please file issues ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/issues"},"here")," and let us know if you have any problems with the API usage."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/book/zh-TW/embed/rust/app"},"Embed Wasm apps")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/book/zh-TW/embed/rust/function"},"Embed Wasm functions and async functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/book/zh-TW/embed/rust/complex_data"},"Pass complex dats")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/book/zh-TW/embed/rust/ai"},"AI inference with Pytorch")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/book/zh-TW/embed/rust/asyncify"},"Asycify")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://crates.io/crates/wasmedge-sdk"},"API Reference")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/second-state/wasmedge-rustsdk-examples"},"More examples"))))}d.isMDXComponent=!0}}]);