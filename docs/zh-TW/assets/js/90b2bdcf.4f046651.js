"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[3067],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),m=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=m(n),c=a,g=p["".concat(l,".").concat(c)]||p[c]||u[c]||r;return n?o.createElement(g,i(i({ref:t},d),{},{components:n})):o.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var m=2;m<r;m++)i[m]=n[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},54652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var o=n(87462),a=(n(67294),n(3905));const r={sidebar_position:5},i="AI Inference with TensorFlow",s={unversionedId:"embed/go/ai",id:"embed/go/ai",title:"AI Inference with TensorFlow",description:"The WasmEdge extensions have been deprecated after the v0.12.1 version. We'll update to use the WasmEdge plug-in in the future.",source:"@site/docs/embed/go/ai.md",sourceDirName:"embed/go",slug:"/embed/go/ai",permalink:"/docs/zh-TW/embed/go/ai",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/embed/go/ai.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"embedSidebar",previous:{title:"Pass complex parameters to WASM functions",permalink:"/docs/zh-TW/embed/go/passing_data"},next:{title:"Embed a bindgen function",permalink:"/docs/zh-TW/embed/go/bindgen"}},l={},m=[{value:"The WASM app in Rust",id:"the-wasm-app-in-rust",level:2},{value:"Compile the Rust code to Wasm",id:"compile-the-rust-code-to-wasm",level:2},{value:"Go host app",id:"go-host-app",level:2},{value:"Build and run the wasm app from your go host",id:"build-and-run-the-wasm-app-from-your-go-host",level:2}],d={toc:m},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ai-inference-with-tensorflow"},"AI Inference with TensorFlow"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The WasmEdge extensions have been deprecated after the v0.12.1 version. We'll update to use the WasmEdge plug-in in the future.")),(0,a.kt)("p",null,"In this section, we will show you how to create a TensorFlow or TensorFlow-Lite inference function in Rust for image classification and then embed it into a Go application. The project source code is ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/blob/master/go_TfliteFood/"},"available here"),"."),(0,a.kt)("h2",{id:"the-wasm-app-in-rust"},"The WASM app in Rust"),(0,a.kt)("p",null,"The Rust function for image classification is ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/blob/master/go_TfliteFood/rust_tflite_food/src/lib.rs"},"available here"),". It utilizes the WasmEdge Tensorflow Lite plug-in as well as the ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh-TW/embed/go/function"},"wasmedge_bindgen")," for passing call parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[wasmedge_bindgen]\nfn infer(image_data: Vec<u8>) -> Result<Vec<u8>, String> {\n  let img = image::load_from_memory(&image_data).unwrap().to_rgb8();\n  let flat_img = image::imageops::thumbnail(&img, 192, 192);\n\n  let model_data: &[u8] = include_bytes!("lite-model_aiy_vision_classifier_food_V1_1.tflite");\n  let labels = include_str!("aiy_food_V1_labelmap.txt");\n\n  let mut session = wasmedge_tensorflow_interface::TFLiteSession::new(model_data);\n  session.add_input("input", &flat_img).run();\n  let res_vec: Vec<u8> = session.get_output("MobilenetV1/Predictions/Softmax");\n  ... ...\n}\n')),(0,a.kt)("h2",{id:"compile-the-rust-code-to-wasm"},"Compile the Rust code to Wasm"),(0,a.kt)("p",null,"You can build the standard ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo")," command into a WebAssembly function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/second-state/WasmEdge-go-examples.git\ncd go_TfliteFood/rust_tflite_food\ncargo build --target wasm32-wasi --release\ncp target/wasm32-wasi/release/rust_tflite_food_lib.wasm ../\ncd ../\n")),(0,a.kt)("p",null,"You can use our AOT compiler ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmedge compile")," to instrument the WebAssembly file to make it run much faster. ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh-TW/start/build-and-run/aot"},"Learn more"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wasmedge compile rust_tflite_food_lib.wasm rust_tflite_food_lib.wasm\n")),(0,a.kt)("h2",{id:"go-host-app"},"Go host app"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/blob/master/go_TfliteFood/tflite_food.go"},"Go host app")," source code shows how to instantiate a WasmEdge runtime with the Tensorflow extension, and how to pass the image data to the Rust function in WasmEdge to run the inference."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import (\n  "fmt"\n  "io/ioutil"\n  "os"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n  bindgen "github.com/second-state/wasmedge-bindgen/host/go"\n)\n\nfunc main() {\n  fmt.Println("Go: Args:", os.Args)\n  // Expected Args[0]: program name (./mobilenet)\n  // Expected Args[1]: wasm file (rust_mobilenet_lib.wasm)\n  // Expected Args[2]: input image name (grace_hopper.jpg)\n\n  // Set not to print debug info\n  wasmedge.SetLogErrorLevel()\n\n  // Set Tensorflow not to print debug info\n  os.Setenv("TF_CPP_MIN_LOG_LEVEL", "3")\n  os.Setenv("TF_CPP_MIN_VLOG_LEVEL", "3")\n\n  // Load WasmEdge-image and WasmEdge-tensorflow from default path\n  wasmedge.LoadPluginDefaultPaths()\n\n  // Create configure\n  var conf = wasmedge.NewConfigure(wasmedge.WASI)\n\n  // Create VM with configure\n  var vm = wasmedge.NewVMWithConfig(conf)\n\n  // Init WASI\n  var wasi = vm.GetImportModule(wasmedge.WASI)\n  wasi.InitWasi(\n    os.Args[1:],     // The args\n    os.Environ(),    // The envs\n    []string{".:."}, // The mapping preopens\n  )\n\n  // Load and validate the wasm\n  vm.LoadWasmFile(os.Args[1])\n  vm.Validate()\n\n  // Instantiate the bindgen and vm\n  bg := bindgen.New(vm)\n  bg.Instantiate()\n\n  img, _ := ioutil.ReadFile(os.Args[2])\n  if res, _, err := bg.Execute("infer", img); err != nil {\n    fmt.Println(err)\n  } else {\n    fmt.Println(res[0].(string))\n  }\n\n  bg.Release()\n  vm.Release()\n  conf.Release()\n}\n')),(0,a.kt)("h2",{id:"build-and-run-the-wasm-app-from-your-go-host"},"Build and run the wasm app from your go host"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Ensure you have installed ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh-TW/embed/go/intro"},"Go, WasmEdge, and WasmEdge Go SDK with the TensorFlow extension"),".")),(0,a.kt)("p",null,"Builds the Go host application with the WasmEdge Go SDK."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go build\n")),(0,a.kt)("p",null,"Now you can run the Go application. It calls the WebAssembly function in WasmEdge to run inference on the input image."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./tflite_food rust_tflite_food_lib.wasm food.jpg\n")),(0,a.kt)("p",null,"The results are as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Go: Args: [./tflite_food rust_tflite_food_lib.wasm food.jpg]\nIt is very likely a Hot dog in the picture\n")))}u.isMDXComponent=!0}}]);