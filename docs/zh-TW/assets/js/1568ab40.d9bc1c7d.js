"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[6270],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>k});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),p=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},s=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,d=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),u=p(n),h=r,k=u["".concat(d,".").concat(h)]||u[h]||m[h]||i;return n?a.createElement(k,l(l({ref:e},s),{},{components:n})):a.createElement(k,l({ref:e},s))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=h;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o[u]="string"==typeof t?t:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5424:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:10},l="Crypto for WASI",o={unversionedId:"develop/rust/wasicrypto",id:"develop/rust/wasicrypto",title:"Crypto for WASI",description:"While optimizing compilers could allow efficient implementation of cryptographic features in WebAssembly, there are several occasions as below where a host implementation is more desirable. WASI-crypto aims to fill those gaps by defining a standard interface as a set of APIs. Current not support android.",source:"@site/docs/develop/rust/wasicrypto.md",sourceDirName:"develop/rust",slug:"/develop/rust/wasicrypto",permalink:"/docs/zh-TW/develop/rust/wasicrypto",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/develop/rust/wasicrypto.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"developSidebar",previous:{title:"Dapr services",permalink:"/docs/zh-TW/develop/rust/dapr"},next:{title:"Bindgen of Rust Functions",permalink:"/docs/zh-TW/develop/rust/bindgen"}},d={},p=[{value:"Write WebAssembly Using WASI-Crypto",id:"write-webassembly-using-wasi-crypto",level:2},{value:"<em>(Optional)</em> Rust Installation",id:"optional-rust-installation",level:3},{value:"High Level Operations",id:"high-level-operations",level:3},{value:"Hash Function",id:"hash-function",level:4},{value:"Message Authentications function",id:"message-authentications-function",level:4},{value:"Key Driven function",id:"key-driven-function",level:4},{value:"Signatures Operation",id:"signatures-operation",level:4}],s={toc:p},u="wrapper";function m(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"crypto-for-wasi"},"Crypto for WASI"),(0,r.kt)("p",null,"While optimizing compilers could allow efficient implementation of cryptographic features in WebAssembly, there are several occasions as below where a host implementation is more desirable. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WebAssembly/wasi-crypto/blob/main/docs/HighLevelGoals.md"},"WASI-crypto")," aims to fill those gaps by defining a standard interface as a set of APIs. Current not support android."),(0,r.kt)("p",null,"Make sure ",(0,r.kt)("a",{parentName:"p",href:"/docs/zh-TW/develop/rust/setup"},"you have Rust and WasmEdge installed")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/zh-TW/start/install#wasi-crypto-plug-in"},"the WASI-crypto plugin")," installed."),(0,r.kt)("h2",{id:"write-webassembly-using-wasi-crypto"},"Write WebAssembly Using WASI-Crypto"),(0,r.kt)("h3",{id:"optional-rust-installation"},(0,r.kt)("em",{parentName:"h3"},"(Optional)")," Rust Installation"),(0,r.kt)("p",null,"For importing WASI-Crypto in rust, you should use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WebAssembly/wasi-crypto/tree/main/implementations/bindings/rust"},"wasi-crypto binding")," in your cargo.toml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nwasi-crypto = "0.1.5"\n')),(0,r.kt)("h3",{id:"high-level-operations"},"High Level Operations"),(0,r.kt)("h4",{id:"hash-function"},"Hash Function"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,r.kt)("th",{parentName:"tr",align:null},"Algorithm"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SHA-256")),(0,r.kt)("td",{parentName:"tr",align:null},"SHA-256 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SHA-512")),(0,r.kt)("td",{parentName:"tr",align:null},"SHA-512 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SHA-512/256")),(0,r.kt)("td",{parentName:"tr",align:null},"SHA-512/256 hash function with a specific IV")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// hash "test" by SHA-256\nlet hash : Vec<u8> = Hash::hash("SHA-256", b"test", 32, None)?;\nassert_eq!(hash.len(), 32);\n')),(0,r.kt)("h4",{id:"message-authentications-function"},"Message Authentications function"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,r.kt)("th",{parentName:"tr",align:null},"Algorithm"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HMAC/SHA-256")),(0,r.kt)("td",{parentName:"tr",align:null},"RFC2104 MAC using the SHA-256 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HMAC/SHA-512")),(0,r.kt)("td",{parentName:"tr",align:null},"RFC2104 MAC using the SHA-512 hash function")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// generate key\nlet key = AuthKey::generate("HMAC/SHA-512")?;\n// generate tag\nlet tag = Auth::auth("test", &key)?;\n// verify\nAuth::auth_verify("test", &key, tag)?;\n')),(0,r.kt)("h4",{id:"key-driven-function"},"Key Driven function"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,r.kt)("th",{parentName:"tr",align:null},"Algorithm"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HKDF-EXTRACT/SHA-256")),(0,r.kt)("td",{parentName:"tr",align:null},"RFC5869 ",(0,r.kt)("inlineCode",{parentName:"td"},"EXTRACT")," function using the SHA-256 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HKDF-EXTRACT/SHA-512")),(0,r.kt)("td",{parentName:"tr",align:null},"RFC5869 ",(0,r.kt)("inlineCode",{parentName:"td"},"EXTRACT")," function using the SHA-512 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HKDF-EXPAND/SHA-256")),(0,r.kt)("td",{parentName:"tr",align:null},"RFC5869 ",(0,r.kt)("inlineCode",{parentName:"td"},"EXPAND")," function using the SHA-256 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HKDF-EXPAND/SHA-512")),(0,r.kt)("td",{parentName:"tr",align:null},"RFC5869 ",(0,r.kt)("inlineCode",{parentName:"td"},"EXPAND")," function using the SHA-512 hash function")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let key = HkdfKey::generate("HKDF-EXTRACT/SHA-512")?;\nlet prk = Hkdf::new("HKDF-EXPAND/SHA-512", &key, Some(b"salt"))?;\nlet derived_key = prk.expand("info", 100)?;\nassert_eq!(derived_key.len(), 100);\n')),(0,r.kt)("h4",{id:"signatures-operation"},"Signatures Operation"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,r.kt)("th",{parentName:"tr",align:null},"Algorithm"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ECDSA_P256_SHA256")),(0,r.kt)("td",{parentName:"tr",align:null},"ECDSA over the NIST p256 curve with the SHA-256 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ECDSA_K256_SHA256")),(0,r.kt)("td",{parentName:"tr",align:null},"ECDSA over the secp256k1 curve with the SHA-256 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ed25519")),(0,r.kt)("td",{parentName:"tr",align:null},"Edwards Curve signatures over Edwards25519 (pure EdDSA) as specified in RFC8032")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PKCS1_2048_SHA256")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 2048 bit modulus, PKCS1 padding and the SHA-256 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PKCS1_2048_SHA384")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 2048 bit modulus, PKCS1 padding and the SHA-384 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PKCS1_2048_SHA512")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 2048 bit modulus, PKCS1 padding and the SHA-512 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PKCS1_3072_SHA384")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 3072 bit modulus, PKCS1 padding and the SHA-384 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PKCS1_3072_SHA512")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 3072 bit modulus, PKCS1 padding and the SHA-512 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PKCS1_4096_SHA512")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 4096 bit modulus, PKCS1 padding and the SHA-512 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PSS_2048_SHA256")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 2048 bit modulus, PSS padding and the SHA-256 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PSS_2048_SHA384")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 2048 bit modulus, PSS padding and the SHA-384 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PSS_2048_SHA512")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 2048 bit modulus, PSS padding and the SHA-512 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PSS_3072_SHA384")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 2048 bit modulus, PSS padding and the SHA-384 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PSS_3072_SHA512")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 3072 bit modulus, PSS padding and the SHA-512 hash function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSA_PSS_4096_SHA512")),(0,r.kt)("td",{parentName:"tr",align:null},"RSA signatures with a 4096 bit modulus, PSS padding and the SHA-512 hash function")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let pk = SignaturePublicKey::from_raw("Ed25519", &[0; 32])?;\n\nlet kp = SignatureKeyPair::generate("Ed25519")?;\nlet signature = kp.sign("hello")?;\n\nkp.publickey()?.signature_verify("hello", &signature)?;\n')))}m.isMDXComponent=!0}}]);