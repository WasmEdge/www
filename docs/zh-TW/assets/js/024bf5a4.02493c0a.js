"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[5127],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),u=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return i.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=u(t),g=a,m=c["".concat(l,".").concat(g)]||c[g]||p[g]||o;return t?i.createElement(m,s(s({ref:n},d),{},{components:t})):i.createElement(m,s({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=g;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[c]="string"==typeof e?e:a,s[1]=r;for(var u=2;u<o;u++)s[u]=t[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>u});var i=t(7462),a=(t(7294),t(3905));const o={sidebar_position:2},s="Develop WasmEdge Plug-in in C API",r={unversionedId:"contribute/plugin/develop_plugin_c",id:"contribute/plugin/develop_plugin_c",title:"Develop WasmEdge Plug-in in C API",description:"WasmEdge provides a C++ based API for registering extension modules and host functions. While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, the plugin API allows such extensions to be incorporated into WasmEdge's own building and releasing process.",source:"@site/docs/contribute/plugin/develop_plugin_c.md",sourceDirName:"contribute/plugin",slug:"/contribute/plugin/develop_plugin_c",permalink:"/docs/zh-TW/contribute/plugin/develop_plugin_c",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/contribute/plugin/develop_plugin_c.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"contributeSidebar",previous:{title:"WasmEdge Plug-in System Introduction",permalink:"/docs/zh-TW/contribute/plugin/intro"},next:{title:"Develop WasmEdge Plug-in in C++ API",permalink:"/docs/zh-TW/contribute/plugin/develop_plugin_cpp"}},l={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Example",id:"example",level:2},{value:"Host Functions",id:"host-functions",level:3},{value:"Host Modules",id:"host-modules",level:3},{value:"Plug-in Descriptions",id:"plug-in-descriptions",level:3},{value:"Plug-in Options",id:"plug-in-options",level:3},{value:"Implement the Get Descriptor API",id:"implement-the-get-descriptor-api",level:3},{value:"Build",id:"build",level:2},{value:"Build with Command",id:"build-with-command",level:3},{value:"Build in CMake",id:"build-in-cmake",level:3}],d={toc:u},c="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"develop-wasmedge-plug-in-in-c-api"},"Develop WasmEdge Plug-in in C API"),(0,a.kt)("p",null,"WasmEdge provides a C++ based API for registering extension modules and host functions. While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, the plugin API allows such extensions to be incorporated into WasmEdge's own building and releasing process."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"For developing the WasmEdge plug-in in C API, please ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh-TW/develop/build-and-run/install"},"install WasmEdge")," first."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Assume that the plug-in example is in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"testplugin.c"),"."),(0,a.kt)("h3",{id:"host-functions"},"Host Functions"),(0,a.kt)("p",null,"The goal of the plug-in is to provide the host functions which can be imported when instantiating WASM."),(0,a.kt)("p",null,"Therefore, developers can implement their plug-in host functions first, as the same as the ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh-TW/embed/c/reference/0.12.0#host-functions"},"host functions in WasmEdge C API"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For the more details about the ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh-TW/embed/c/host_function#host-data"},"external data")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh-TW/embed/c/host_function#calling-frame-context"},"calling frame context"),", please refer to the host function guide.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"#include <wasmedge/wasmedge.h>\n\n/* The host function definitions. */\n\n/* The host function to add 2 int32_t numbers. */\nWasmEdge_Result HostFuncAdd(void *Data,\n                            const WasmEdge_CallingFrameContext *CallFrameCxt,\n                            const WasmEdge_Value *In, WasmEdge_Value *Out) {\n  int32_t Val1 = WasmEdge_ValueGetI32(In[0]);\n  int32_t Val2 = WasmEdge_ValueGetI32(In[1]);\n  Out[0] = WasmEdge_ValueGenI32(Val1 + Val2);\n  return WasmEdge_Result_Success;\n}\n\n/* The host function to sub 2 int32_t numbers. */\nWasmEdge_Result HostFuncSub(void *Data,\n                            const WasmEdge_CallingFrameContext *CallFrameCxt,\n                            const WasmEdge_Value *In, WasmEdge_Value *Out) {\n  int32_t Val1 = WasmEdge_ValueGetI32(In[0]);\n  int32_t Val2 = WasmEdge_ValueGetI32(In[1]);\n  Out[0] = WasmEdge_ValueGenI32(Val1 - Val2);\n  return WasmEdge_Result_Success;\n}\n")),(0,a.kt)("h3",{id:"host-modules"},"Host Modules"),(0,a.kt)("p",null,"Then developers should implement the module creation functions."),(0,a.kt)("p",null,"Noticed that there can be several module instances in a plug-in shared library. Here take a module named as ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmedge_plugintest_c_module")," for the example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'/* The creation function of creating the module instance. */\nWasmEdge_ModuleInstanceContext *\nCreateTestModule(const struct WasmEdge_ModuleDescriptor *Desc) {\n  /*\n   * The `Desc` is the const pointer to the module descriptor struct:\n   *\n   *   typedef struct WasmEdge_ModuleDescriptor {\n   *     const char *Name;\n   *     const char *Description;\n   *     WasmEdge_ModuleInstanceContext *(*Create)(\n   *         const struct WasmEdge_ModuleDescriptor *);\n   *   } WasmEdge_ModuleDescriptor;\n   *\n   * Developers can get the name and the description from this descriptor.\n   */\n\n  /* Exported module name of this module instance. */\n  WasmEdge_String ModuleName =\n      WasmEdge_StringCreateByCString("wasmedge_plugintest_c_module");\n  WasmEdge_ModuleInstanceContext *Mod =\n      WasmEdge_ModuleInstanceCreate(ModuleName);\n  WasmEdge_StringDelete(ModuleName);\n\n  WasmEdge_String FuncName;\n  WasmEdge_FunctionTypeContext *FType;\n  WasmEdge_FunctionInstanceContext *FuncCxt;\n  enum WasmEdge_ValType ParamTypes[2], ReturnTypes[1];\n  ParamTypes[0] = WasmEdge_ValType_I32;\n  ParamTypes[1] = WasmEdge_ValType_I32;\n  ReturnTypes[0] = WasmEdge_ValType_I32;\n\n  /* Create and add the host function instances into the module instance. */\n  FType = WasmEdge_FunctionTypeCreate(ParamTypes, 2, ReturnTypes, 1);\n  FuncName = WasmEdge_StringCreateByCString("add");\n  FuncCxt = WasmEdge_FunctionInstanceCreate(FType, HostFuncAdd, NULL, 0);\n  WasmEdge_ModuleInstanceAddFunction(Mod, FuncName, FuncCxt);\n  WasmEdge_StringDelete(FuncName);\n  FuncName = WasmEdge_StringCreateByCString("sub");\n  FuncCxt = WasmEdge_FunctionInstanceCreate(FType, HostFuncSub, NULL, 0);\n  WasmEdge_ModuleInstanceAddFunction(Mod, FuncName, FuncCxt);\n  WasmEdge_StringDelete(FuncName);\n  WasmEdge_FunctionTypeDelete(FType);\n\n  return Mod;\n}\n')),(0,a.kt)("h3",{id:"plug-in-descriptions"},"Plug-in Descriptions"),(0,a.kt)("p",null,"For constructing the plug-in, developers should supply the descriptions of this plug-in and the modules."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'/* The module descriptor array. There can be multiple modules in a plug-in. */\nstatic WasmEdge_ModuleDescriptor ModuleDesc[] = {{\n    /*\n     * Module name. This is the name for searching and creating the module\n     * instance context by the `WasmEdge_PluginCreateModule()` API.\n     */\n    .Name = "wasmedge_plugintest_c_module",\n    /* Module description. */\n    .Description = "This is for the plugin tests in WasmEdge C API.",\n    /* Creation function pointer. */\n    .Create = CreateTestModule,\n}};\n\n/* The plug-in descriptor */\nstatic WasmEdge_PluginDescriptor Desc[] = {{\n    /*\n     * Plug-in name. This is the name for searching the plug-in context by the\n     * `WasmEdge_PluginFind()` API.\n     */\n    .Name = "wasmedge_plugintest_c",\n    /* Plug-in description. */\n    .Description = "",\n    /* Plug-in API version. */\n    .APIVersion = WasmEdge_Plugin_CurrentAPIVersion,\n    /* Plug-in version. Developers can define the version of this plug-in. */\n    .Version =\n        {\n            .Major = 0,\n            .Minor = 1,\n            .Patch = 0,\n            .Build = 0,\n        },\n    /* Module count in this plug-in. */\n    .ModuleCount = 1,\n    /* Plug-in option description count in this plug-in (Work in progress). */\n    .ProgramOptionCount = 0,\n    /* Pointer to the module description array. */\n    .ModuleDescriptions = ModuleDesc,\n    /* Pointer to the plug-in option description array (Work in progress). */\n    .ProgramOptions = NULL,\n}};\n')),(0,a.kt)("h3",{id:"plug-in-options"},"Plug-in Options"),(0,a.kt)("p",null,"WORK IN PROGRESS. This section is reserved for the feature in the future."),(0,a.kt)("h3",{id:"implement-the-get-descriptor-api"},"Implement the Get Descriptor API"),(0,a.kt)("p",null,"The final step is to implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"WasmEdge_Plugin_GetDescriptor()")," API to return the plug-in descriptor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"WASMEDGE_CAPI_PLUGIN_EXPORT const WasmEdge_PluginDescriptor *\nWasmEdge_Plugin_GetDescriptor(void) {\n  return &Desc;\n}\n")),(0,a.kt)("h2",{id:"build"},"Build"),(0,a.kt)("p",null,"To build the plug-in shared library, developers can choose to build stand-alone by the compiler or use cmake."),(0,a.kt)("h3",{id:"build-with-command"},"Build with Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"clang -shared -std=c11 -DWASMEDGE_PLUGIN testplugin.c -lwasmedge -o libwasmedgePluginTest.so\n")),(0,a.kt)("h3",{id:"build-in-cmake"},"Build in CMake"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},"add_library(wasmedgePluginTest\n  SHARED\n  testplugin.c\n)\n\nset_target_properties(wasmedgePluginTest PROPERTIES\n  C_STANDARD 11\n)\n\ntarget_compile_options(wasmedgePluginTest\n  PUBLIC\n  -DWASMEDGE_PLUGIN\n)\n\ntarget_link_libraries(wasmedgePluginTest\n  PRIVATE\n  wasmedge\n)\n")))}p.isMDXComponent=!0}}]);