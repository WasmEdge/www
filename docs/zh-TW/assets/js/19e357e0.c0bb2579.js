"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[8376],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(n),u=i,g=d["".concat(l,".").concat(u)]||d[u]||c[u]||o;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,r[1]=s;for(var m=2;m<o;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:6},r="6.6.6 Go API 0.9.1  Documentation",s={unversionedId:"embed/go/reference/0.9.1",id:"embed/go/reference/0.9.1",title:"6.6.6 Go API 0.9.1  Documentation",description:"The following are the guides to working with the WasmEdge-Go SDK at WasmEdge version 0.9.1 and WasmEdge-Go version v0.9.2.",source:"@site/docs/embed/go/reference/0.9.1.md",sourceDirName:"embed/go/reference",slug:"/embed/go/reference/0.9.1",permalink:"/book/zh-TW/embed/go/reference/0.9.1",draft:!1,editUrl:"https://github.com/alabulei1/book/docs/embed/go/reference/0.9.1.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"embedSidebar",previous:{title:"6.6.5 Upgrade to WasmEdge-Go 0.10.0",permalink:"/book/zh-TW/embed/go/reference/upgrade_to_0.10.0"},next:{title:"Java SDK for Embedding Wasm Functions",permalink:"/book/zh-TW/category/java-sdk-for-embedding-wasm-functions"}},l={},m=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"WasmEdge Installation",id:"wasmedge-installation",level:3},{value:"Get WasmEdge-go",id:"get-wasmedge-go",level:3},{value:"WasmEdge-go Extensions",id:"wasmedge-go-extensions",level:3},{value:"Example of Embedding A Function with wasmedge-bindgen",id:"example-of-embedding-a-function-with-wasmedge-bindgen",level:3},{value:"Example of Embedding A Full WASI Program",id:"example-of-embedding-a-full-wasi-program",level:3},{value:"WasmEdge-go Basics",id:"wasmedge-go-basics",level:2},{value:"Version",id:"version",level:3},{value:"Logging Settings",id:"logging-settings",level:3},{value:"Value Types",id:"value-types",level:3},{value:"Results",id:"results",level:3},{value:"Contexts And Their Life Cycles",id:"contexts-and-their-life-cycles",level:3},{value:"WASM Data Structures",id:"wasm-data-structures",level:3},{value:"Async",id:"async",level:3},{value:"Configurations",id:"configurations",level:3},{value:"Statistics",id:"statistics",level:3},{value:"WasmEdge VM",id:"wasmedge-vm",level:2},{value:"WASM Execution Example With VM Object",id:"wasm-execution-example-with-vm-object",level:3},{value:"VM Creations",id:"vm-creations",level:3},{value:"Preregistrations",id:"preregistrations",level:3},{value:"Host Module Registrations",id:"host-module-registrations",level:3},{value:"WASM Registrations And Executions",id:"wasm-registrations-and-executions",level:3},{value:"Asynchronous Execution",id:"asynchronous-execution",level:3},{value:"Instance Tracing",id:"instance-tracing",level:3},{value:"WasmEdge Runtime",id:"wasmedge-runtime",level:2},{value:"WASM Execution Example Step-By-Step",id:"wasm-execution-example-step-by-step",level:3},{value:"Loader",id:"loader",level:3},{value:"Validator",id:"validator",level:3},{value:"Executor",id:"executor",level:3},{value:"AST Module",id:"ast-module",level:3},{value:"Store",id:"store",level:3},{value:"Instances",id:"instances",level:3},{value:"Host Functions",id:"host-functions",level:3},{value:"WasmEdge AOT Compiler",id:"wasmedge-aot-compiler",level:2},{value:"Compilation Example",id:"compilation-example",level:3},{value:"Compiler Options",id:"compiler-options",level:3}],p={toc:m};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"666-go-api-091--documentation"},"6.6.6 Go API 0.9.1  Documentation"),(0,i.kt)("p",null,"The following are the guides to working with the WasmEdge-Go SDK at WasmEdge version ",(0,i.kt)("inlineCode",{parentName:"p"},"0.9.1")," and WasmEdge-Go version ",(0,i.kt)("inlineCode",{parentName:"p"},"v0.9.2"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Please install WasmEdge 0.9.1 to use this Go package.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"WasmEdge-Go v0.9.1 is retracted. Please use WasmEdge-Go v0.9.2 instead.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Developers can refer ",(0,i.kt)("a",{parentName:"strong",href:"/book/zh-TW/embed/go/reference/upgrade_to_0.10.0"},"here to upgrade to v0.10.0"),".")),(0,i.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getting-started"},"Getting Started"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasmedge-installation"},"WasmEdge Installation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#get-wasmedge-go"},"Get WasmEdge-go")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasmedge-go-extensions"},"WasmEdge-go Extensions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#example-of-embedding-a-function-with-wasmedge-bindgen"},"Example of Embedding A Function with wasmedge-bindgen")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#example-of-embedding-a-full-wasi-program"},"Example of Embedding A Full WASI Program")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasmedge-go-basics"},"WasmEdge-go Basics"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#version"},"Version")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#logging-settings"},"Logging Settings")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#value-types"},"Value Types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#results"},"Results")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#contexts-and-their-life-cycles"},"Contexts And Their Life Cycles")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasm-data-structures"},"WASM data structures")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#async"},"Async")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#configurations"},"Configurations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#statistics"},"Statistics")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasmedge-vm"},"WasmEdge VM"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasm-execution-example-with-vm-object"},"WASM Execution Example With VM Object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#vm-creations"},"VM Creations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#preregistrations"},"Preregistrations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#host-module-registrations"},"Host Module Registrations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasm-registrations-and-executions"},"WASM Registrations And Executions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#asynchronous-execution"},"Asynchronous execution")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#instance-tracing"},"Instance Tracing")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasmedge-runtime"},"WasmEdge Runtime"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasm-execution-example-step-by-step"},"WASM Execution Example Step-By-Step")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#loader"},"Loader")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#validator"},"Validator")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#executor"},"Executor")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#ast-module"},"AST Module")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#store"},"Store")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#instances"},"Instances")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#host-functions"},"Host Functions")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#wasmedge-aot-compiler"},"WasmEdge AOT Compiler"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#compilation-example"},"Compilation Example")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#compiler-options"},"Compiler Options"))))),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"The WasmEdge-go requires golang version >= 1.15. Please check your golang version before installation. Developers can ",(0,i.kt)("a",{parentName:"p",href:"https://golang.org/dl/"},"download golang here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go version\ngo version go1.16.5 linux/amd64\n")),(0,i.kt)("h3",{id:"wasmedge-installation"},"WasmEdge Installation"),(0,i.kt)("p",null,"Developers must ",(0,i.kt)("a",{parentName:"p",href:"/book/zh-TW/develop/build-and-run/install"},"install the WasmEdge shared library")," with the same ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge-go")," release or pre-release version."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -v 0.9.1\n")),(0,i.kt)("p",null,"For the developers need the ",(0,i.kt)("inlineCode",{parentName:"p"},"TensorFlow")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," extension for ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge-go"),", please install the ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge")," with extensions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -e tf,image -v 0.9.1\n")),(0,i.kt)("p",null,"Noticed that the ",(0,i.kt)("inlineCode",{parentName:"p"},"TensorFlow")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," extensions are only for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Linux")," platforms.\nAfter installation, developers can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"source")," command to update the include and linking searching path."),(0,i.kt)("h3",{id:"get-wasmedge-go"},"Get WasmEdge-go"),(0,i.kt)("p",null,"After the WasmEdge installation, developers can get the ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge-go")," package and build it in your Go project directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\ngo build\n")),(0,i.kt)("h3",{id:"wasmedge-go-extensions"},"WasmEdge-go Extensions"),(0,i.kt)("p",null,"By default, the ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge-go")," only turns on the basic runtime."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge-go")," has the following extensions (on the Linux platforms only):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Tensorflow"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This extension supports the host functions in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-tensorflow"},"WasmEdge-tensorflow"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TensorFlow")," extension when installing ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge")," is required. Please install ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"-e tensorflow")," command.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For using this extension, the tag ",(0,i.kt)("inlineCode",{parentName:"p"},"tensorflow")," when building is required:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go build -tags tensorflow\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Image"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This extension supports the host functions in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-image"},"WasmEdge-image"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," extension when installing ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge")," is required. Please install ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"-e image")," command.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For using this extension, the tag ",(0,i.kt)("inlineCode",{parentName:"p"},"image")," when building is required:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go build -tags image\n")))))),(0,i.kt)("p",null,"Users can also turn on the multiple extensions when building:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go build -tags image,tensorflow\n")),(0,i.kt)("h3",{id:"example-of-embedding-a-function-with-wasmedge-bindgen"},"Example of Embedding A Function with wasmedge-bindgen"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/tree/master/wasmedge-bindgen/go_BindgenFuncs"},"this example"),", we will demonstrate how to call a few simple WebAssembly functions with wasmedge-bindgen from a Golang app. The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/blob/master/wasmedge-bindgen/go_BindgenFuncs/rust_bindgen_funcs/src/lib.rs"},"functions")," are written in Rust, and require complex call parameters and return values."),(0,i.kt)("p",null,"While the WebAssembly only supports a few simple data types out of the box. It ",(0,i.kt)("a",{parentName:"p",href:"https://medium.com/wasm/strings-in-webassembly-wasm-57a05c1ea333"},"does not support")," types such as string and array. In order to pass rich types in Golang to WebAssembly, the compiler needs to convert them to simple integers. For example, it converts a string into an integer memory address and an integer length. The ",(0,i.kt)("inlineCode",{parentName:"p"},"#[wasmedge_bindgen]")," macro does this conversion automatically, combining it with Golang's ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge-bindgen")," package to auto-generate the correct code to pass call parameters from Golang to WebAssembly."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use wasmedge_bindgen::*;\nuse wasmedge_bindgen_macro::*;\nuse num_integer::lcm;\nuse sha3::{Digest, Sha3_256, Keccak256};\nuse serde::{Serialize, Deserialize};\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Point {\n  x: f32,\n  y: f32\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Line {\n  points: Vec<Point>,\n  valid: bool,\n  length: f32,\n  desc: String\n}\n\n#[wasmedge_bindgen]\npub fn create_line(p1: String, p2: String, desc: String) -> String {\n  let point1: Point = serde_json::from_str(p1.as_str()).unwrap();\n  let point2: Point = serde_json::from_str(p2.as_str()).unwrap();\n  let length = ((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y)).sqrt();\n\n  let valid = if length == 0.0 { false } else { true };\n\n  let line = Line { points: vec![point1, point2], valid: valid, length: length, desc: desc };\n\n  return serde_json::to_string(&line).unwrap();\n}\n\n#[wasmedge_bindgen]\npub fn say(s: String) -> String {\n  let r = String::from(\"hello \");\n  return r + s.as_str();\n}\n\n#[wasmedge_bindgen]\npub fn obfusticate(s: String) -> String {\n  (&s).chars().map(|c| {\n    match c {\n      'A' ..= 'M' | 'a' ..= 'm' => ((c as u8) + 13) as char,\n      'N' ..= 'Z' | 'n' ..= 'z' => ((c as u8) - 13) as char,\n      _ => c\n    }\n  }).collect()\n}\n\n#[wasmedge_bindgen]\npub fn lowest_common_multiple(a: i32, b: i32) -> i32 {\n  return lcm(a, b);\n}\n\n#[wasmedge_bindgen]\npub fn sha3_digest(v: Vec<u8>) -> Vec<u8> {\n  return Sha3_256::digest(&v).as_slice().to_vec();\n}\n\n#[wasmedge_bindgen]\npub fn keccak_digest(s: Vec<u8>) -> Vec<u8> {\n  return Keccak256::digest(&s).as_slice().to_vec();\n}\n")),(0,i.kt)("p",null,"First, compile the Rust source code into WebAssembly bytecode functions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rustup target add wasm32-wasi\ncd rust_bindgen_funcs\ncargo build --target wasm32-wasi --release\n# The output WASM will be target/wasm32-wasi/release/rust_bindgen_funcs_lib.wasm\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/blob/master/wasmedge-bindgen/go_BindgenFuncs/bindgen_funcs.go"},"Golang source code")," to run the WebAssembly function in WasmEdge is as follows. The ",(0,i.kt)("inlineCode",{parentName:"p"},"bg.Execute()")," function calls the WebAssembly function and passes the parameters with the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge-bindgen")," supporting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n  "os"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n  bindgen "github.com/second-state/wasmedge-bindgen/host/go"\n)\n\nfunc main() {\n  // Expected Args[0]: program name (./bindgen_funcs)\n  // Expected Args[1]: wasm file (rust_bindgen_funcs_lib.wasm))\n  \n  // Set not to print debug info\n  wasmedge.SetLogErrorLevel()\n\n  // Create configure\n  var conf = wasmedge.NewConfigure(wasmedge.WASI)\n\n  // Create VM with configure\n  var vm = wasmedge.NewVMWithConfig(conf)\n\n  // Init WASI\n  var wasi = vm.GetImportObject(wasmedge.WASI)\n  wasi.InitWasi(\n    os.Args[1:],     // The args\n    os.Environ(),    // The envs\n    []string{".:."}, // The mapping preopens\n  )\n\n  // Load and validate the wasm\n  vm.LoadWasmFile(os.Args[1])\n  vm.Validate()\n\n  // Instantiate the bindgen and vm\n  bg := bindgen.Instantiate(vm)\n\n  // create_line: string, string, string -> string (inputs are JSON stringified)  \n  res, err := bg.Execute("create_line", "{\\"x\\":2.5,\\"y\\":7.8}", "{\\"x\\":2.5,\\"y\\":5.8}", "A thin red line")\n  if err == nil {\n    fmt.Println("Run bindgen -- create_line:", res[0].(string))\n  } else {\n    fmt.Println("Run bindgen -- create_line FAILED", err)\n  }\n\n  // say: string -> string\n  res, err = bg.Execute("say", "bindgen funcs test")\n  if err == nil {\n    fmt.Println("Run bindgen -- say:", res[0].(string))\n  } else {\n    fmt.Println("Run bindgen -- say FAILED")\n  }\n\n  // obfusticate: string -> string\n  res, err = bg.Execute("obfusticate", "A quick brown fox jumps over the lazy dog")\n  if err == nil {\n    fmt.Println("Run bindgen -- obfusticate:", res[0].(string))\n  } else {\n    fmt.Println("Run bindgen -- obfusticate FAILED")\n  }\n\n  // lowest_common_multiple: i32, i32 -> i32\n  res, err = bg.Execute("lowest_common_multiple", int32(123), int32(2))\n  if err == nil {\n    fmt.Println("Run bindgen -- lowest_common_multiple:", res[0].(int32))\n  } else {\n    fmt.Println("Run bindgen -- lowest_common_multiple FAILED")\n  }\n\n  // sha3_digest: array -> array\n  res, err = bg.Execute("sha3_digest", []byte("This is an important message"))\n  if err == nil {\n    fmt.Println("Run bindgen -- sha3_digest:", res[0].([]byte))\n  } else {\n    fmt.Println("Run bindgen -- sha3_digest FAILED")\n  }\n\n  // keccak_digest: array -> array\n  res, err = bg.Execute("keccak_digest", []byte("This is an important message"))\n  if err == nil {\n    fmt.Println("Run bindgen -- keccak_digest:", res[0].([]byte))\n  } else {\n    fmt.Println("Run bindgen -- keccak_digest FAILED")\n  }\n\n  bg.Release()\n  vm.Release()\n  conf.Release()\n}\n')),(0,i.kt)("p",null,"Next, build the Golang application with the WasmEdge Golang SDK."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\ngo get github.com/second-state/wasmedge-bindgen@v0.1.12\ngo build\n")),(0,i.kt)("p",null,"Run the Golang application and it will run the WebAssembly functions embedded in the WasmEdge runtime."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ ./bindgen_funcs rust_bindgen_funcs/target/wasm32-wasi/release/rust_bindgen_funcs_lib.wasm\nRun bindgen -- create_line: {"points":[{"x":2.5,"y":7.8},{"x":2.5,"y":5.8}],"valid":true,"length":2.0,"desc":"A thin red line"}\nRun bindgen -- say: hello bindgen funcs test\nRun bindgen -- obfusticate: N dhvpx oebja sbk whzcf bire gur ynml qbt\nRun bindgen -- lowest_common_multiple: 246\nRun bindgen -- sha3_digest: [87 27 231 209 189 105 251 49 159 10 211 250 15 159 154 181 43 218 26 141 56 199 25 45 60 10 20 163 54 211 195 203]\nRun bindgen -- keccak_digest: [126 194 241 200 151 116 227 33 216 99 159 22 107 3 177 169 216 191 114 156 174 193 32 159 246 228 245 133 52 75 55 27]\n')),(0,i.kt)("h3",{id:"example-of-embedding-a-full-wasi-program"},"Example of Embedding A Full WASI Program"),(0,i.kt)("p",null,"Note: You can use the latest Rust compiler to create a standalone WasmEdge application with a ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs")," functions and then embed it into a Golang application."),(0,i.kt)("p",null,"Besides functions, the WasmEdge Golang SDK can also ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/tree/master/go_ReadFile"},"embed standalone WebAssembly applications")," \u2014 i.e. a Rust application with a ",(0,i.kt)("inlineCode",{parentName:"p"},"main()")," function compiled into WebAssembly."),(0,i.kt)("p",null,"Our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/tree/master/go_ReadFile/rust_readfile"},"demo Rust application")," reads from a file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use std::env;\nuse std::fs::File;\nuse std::io::{self, BufRead};\n\nfn main() {\n  // Get the argv.\n  let args: Vec<String> = env::args().collect();\n  if args.len() <= 1 {\n    println!("Rust: ERROR - No input file name.");\n    return;\n  }\n\n  // Open the file.\n  println!("Rust: Opening input file \\"{}\\"...", args[1]);\n  let file = match File::open(&args[1]) {\n    Err(why) => {\n      println!("Rust: ERROR - Open file \\"{}\\" failed: {}", args[1], why);\n      return;\n    },\n    Ok(file) => file,\n  };\n\n  // Read lines.\n  let reader = io::BufReader::new(file);\n  let mut texts:Vec<String> = Vec::new();\n  for line in reader.lines() {\n    if let Ok(text) = line {\n      texts.push(text);\n    }\n  }\n  println!("Rust: Read input file \\"{}\\" succeeded.", args[1]);\n\n  // Get stdin to print lines.\n  println!("Rust: Please input the line number to print the line of file.");\n  let stdin = io::stdin();\n  for line in stdin.lock().lines() {\n    let input = line.unwrap();\n    match input.parse::<usize>() {\n      Ok(n) => if n > 0 && n <= texts.len() {\n        println!("{}", texts[n - 1]);\n      } else {\n        println!("Rust: ERROR - Line \\"{}\\" is out of range.", n);\n      },\n      Err(e) => println!("Rust: ERROR - Input \\"{}\\" is not an integer: {}", input, e),\n    }\n  }\n  println!("Rust: Process end.");\n}\n')),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"rustwasmc")," tool to compile the application into WebAssembly."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd rust_readfile\nrustwasmc build\n# The output file will be at `pkg/rust_readfile.wasm`.\n")),(0,i.kt)("p",null,"Or you can compile the application into WebAssembly directly by ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd rust_readfile\n# Need to add the `wasm32-wasi` target.\nrustup target add wasm32-wasi\ncargo build --release --target=wasm32-wasi\n# The output wasm will be at `target/wasm32-wasi/release/rust_readfile.wasm`.\n")),(0,i.kt)("p",null,"The Golang source code to run the WebAssembly function in WasmEdge is as follows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "os"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\nfunc main() {\n  wasmedge.SetLogErrorLevel()\n\n  var conf = wasmedge.NewConfigure(wasmedge.REFERENCE_TYPES)\n  conf.AddConfig(wasmedge.WASI)\n  var vm = wasmedge.NewVMWithConfig(conf)\n  var wasi = vm.GetImportObject(wasmedge.WASI)\n  wasi.InitWasi(\n    os.Args[1:],     // The args\n    os.Environ(),    // The envs\n    []string{".:."}, // The mapping directories\n  )\n\n  // Instantiate and run WASM "_start" function, which refers to the main() function\n  vm.RunWasmFile(os.Args[1], "_start")\n\n  vm.Release()\n  conf.Release()\n}\n')),(0,i.kt)("p",null,"Next, build the Golang application with the WasmEdge Golang SDK."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\ngo build\n")),(0,i.kt)("p",null,"Run the Golang application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ ./read_file rust_readfile/pkg/rust_readfile.wasm file.txt\nRust: Opening input file "file.txt"...\nRust: Read input file "file.txt" succeeded.\nRust: Please input the line number to print the line of file.\n# Input "5" and press Enter.\n5\n# The output will be the 5th line of `file.txt`:\nabcDEF___!@#$%^\n# To terminate the program, send the EOF (Ctrl + D).\n^D\n# The output will print the terminate message:\nRust: Process end.\n')),(0,i.kt)("p",null,"For more examples, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/"},"example repository"),"."),(0,i.kt)("h2",{id:"wasmedge-go-basics"},"WasmEdge-go Basics"),(0,i.kt)("p",null,"In this partition, we will introduce the utilities and concepts of WasmEdge-go APIs and data structures."),(0,i.kt)("h3",{id:"version"},"Version"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Version")," related APIs provide developers to check for the installed WasmEdge shared library version."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/second-state/WasmEdge-go/wasmedge"\n\nverstr := wasmedge.GetVersion() // Will be `string` of WasmEdge version.\nvermajor := wasmedge.GetVersionMajor() // Will be `uint` of WasmEdge major version number.\nverminor := wasmedge.GetVersionMinor() // Will be `uint` of WasmEdge minor version number.\nverpatch := wasmedge.GetVersionPatch() // Will be `uint` of WasmEdge patch version number.\n')),(0,i.kt)("h3",{id:"logging-settings"},"Logging Settings"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.SetLogErrorLevel()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.SetLogDebugLevel()")," APIs can set the logging system to debug level or error level. By default, the error level is set, and the debug info is hidden."),(0,i.kt)("h3",{id:"value-types"},"Value Types"),(0,i.kt)("p",null,"In WasmEdge-go, the APIs will automatically do the conversion for the built-in types, and implement the data structure for the reference types."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Number types: ",(0,i.kt)("inlineCode",{parentName:"p"},"i32"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"i64"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"f32"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"f64")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"uint32")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"int32")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"i32")," automatically when passing a value into WASM."),(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"uint64")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"int64")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"i64")," automatically when passing a value into WASM."),(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"uint")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"i32")," automatically when passing a value into WASM in 32-bit system."),(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"uint")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"i64")," automatically when passing a value into WASM in 64-bit system."),(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"float32")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"f32")," automatically when passing a value into WASM."),(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"float64")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"f64")," automatically when passing a value into WASM."),(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"i32")," from WASM to ",(0,i.kt)("inlineCode",{parentName:"li"},"int32")," when getting a result."),(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"i64")," from WASM to ",(0,i.kt)("inlineCode",{parentName:"li"},"int64")," when getting a result."),(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"f32")," from WASM to ",(0,i.kt)("inlineCode",{parentName:"li"},"float32")," when getting a result."),(0,i.kt)("li",{parentName:"ul"},"Convert the ",(0,i.kt)("inlineCode",{parentName:"li"},"f64")," from WASM to ",(0,i.kt)("inlineCode",{parentName:"li"},"float64")," when getting a result."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Number type: ",(0,i.kt)("inlineCode",{parentName:"p"},"v128")," for the ",(0,i.kt)("inlineCode",{parentName:"p"},"SIMD")," proposal"),(0,i.kt)("p",{parentName:"li"},"Developers should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.NewV128()")," to generate a ",(0,i.kt)("inlineCode",{parentName:"p"},"v128")," value, and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.GetV128()")," to get the value."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"val := wasmedge.NewV128(uint64(1234), uint64(5678))\nhigh, low := val.GetVal()\n// `high` will be uint64(1234), `low` will be uint64(5678)\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Reference types: ",(0,i.kt)("inlineCode",{parentName:"p"},"FuncRef")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ExternRef")," for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Reference-Types")," proposal"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"funcref := wasmedge.NewFuncRef(10)\n// Create a `FuncRef` with function index 10.\n\nnum := 1234\n// `num` is a `int`.\nexternref := wasmedge.NewExternRef(&num)\n// Create an `ExternRef` which reference to the `num`.\nnum = 5678\n// Modify the `num` to 5678.\nnumref := externref.GetRef().(*int)\n// Get the original reference from the `ExternRef`.\nfmt.Println(*numref)\n// Will print `5678`.\nnumref.Release()\n// Should call the `Release` method.\n")))),(0,i.kt)("h3",{id:"results"},"Results"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," object specifies the execution status. Developers can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Error()")," function to get the error message."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// Assume that `vm` is a `wasmedge.VM` object.\nres, err = vm.Execute(...) // Ignore the detail of parameters.\n// Assume that `res, err` are the return values for executing a function with `vm`.\nif err != nil {\n  fmt.Println("Error message:", err.Error())\n}\n')),(0,i.kt)("h3",{id:"contexts-and-their-life-cycles"},"Contexts And Their Life Cycles"),(0,i.kt)("p",null,"The objects, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"VM"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Function"),", etc., are composed of ",(0,i.kt)("inlineCode",{parentName:"p"},"Context"),"s in the WasmEdge shared library.\nAll of the contexts can be created by calling the corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"New")," APIs, developers should also call the corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"Release")," functions of the contexts to release the resources.\nNoticed that it's not necessary to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"Release")," functions for the contexts which are retrieved from other contexts but not created from the ",(0,i.kt)("inlineCode",{parentName:"p"},"New")," APIs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"// Create a Configure.\nconf := wasmedge.NewConfigure()\n// Release the `conf` immediately.\nconf.Release()\n")),(0,i.kt)("p",null,"The details of other contexts will be introduced later."),(0,i.kt)("h3",{id:"wasm-data-structures"},"WASM Data Structures"),(0,i.kt)("p",null,"The WASM data structures are used for creating instances or can be queried from instance contexts.\nThe details of instances creation will be introduced in the ",(0,i.kt)("a",{parentName:"p",href:"#instances"},"Instances"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Limit"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Limit")," struct presents the minimum and maximum value data structure."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"lim1 := wasmedge.NewLimit(12)\nfmt.Println(lim1.HasMax())\n// Will print `false`.\nfmt.Println(lim1.GetMin())\n// Will print `12`.\n\nlim2 := wasmedge.NewLimitWithMax(15, 50)\nfmt.Println(lim2.HasMax())\n// Will print `true`.\nfmt.Println(lim2.GetMin())\n// Will print `15`.\nfmt.Println(lim2.GetMax())\n// Will print `50`.\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Function type context"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"FunctionType")," is an object holds the function type context and used for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")," creation, checking the value types of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")," instance, or getting the function type with function name from VM.\nDevelopers can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"FunctionType")," APIs to get the parameter or return value types information."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"functype := wasmedge.NewFunctionType(\n  []wasmedge.ValType{\n    wasmedge.ValType_ExternRef,\n    wasmedge.ValType_I32,\n    wasmedge.ValType_I64,\n  }, []wasmedge.ValType{\n    wasmedge.ValType_F32,\n    wasmedge.ValType_F64,\n  })\n\nplen := functype.GetParametersLength()\n// `plen` will be 3.\nrlen := functype.GetReturnsLength()\n// `rlen` will be 2.\nplist := functype.GetParameters()\n// `plist` will be `[]wasmedge.ValType{wasmedge.ValType_ExternRef, wasmedge.ValType_I32, wasmedge.ValType_I64}`.\nrlist := functype.GetReturns()\n// `rlist` will be `[]wasmedge.ValType{wasmedge.ValType_F32, wasmedge.ValType_F64}`.\n\nfunctype.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Table type context"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TableType")," is an object holds the table type context and used for ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," instance creation or getting information from ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," instances."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"lim := wasmedge.NewLimit(12)\ntabtype := wasmedge.NewTableType(wasmedge.RefType_ExternRef, lim)\n\nrtype := tabtype.GetRefType()\n// `rtype` will be `wasmedge.RefType_ExternRef`.\ngetlim := tabtype.GetLimit()\n// `getlim` will be the same value as `lim`.\n\ntabtype.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Memory type context"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MemoryType")," is an object holds the memory type context and used for ",(0,i.kt)("inlineCode",{parentName:"p"},"Memory")," instance creation or getting information from ",(0,i.kt)("inlineCode",{parentName:"p"},"Memory")," instances."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"lim := wasmedge.NewLimit(1)\nmemtype := wasmedge.NewMemoryType(lim)\n\ngetlim := memtype.GetLimit()\n// `getlim` will be the same value as `lim`.\n\nmemtype.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Global type context"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"GlobalType")," is an object holds the global type context and used for ",(0,i.kt)("inlineCode",{parentName:"p"},"Global")," instance creation or getting information from ",(0,i.kt)("inlineCode",{parentName:"p"},"Global")," instances."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"globtype := wasmedge.NewGlobalType(wasmedge.ValType_F64, wasmedge.ValMut_Var)\n\nvtype := globtype.GetValType()\n// `vtype` will be `wasmedge.ValType_F64`.\nvmut := globtype.GetMutability()\n// `vmut` will be `wasmedge.ValMut_Var`.\n\nglobtype.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Import type context"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportType")," is an object holds the import type context and used for getting the imports information from a ",(0,i.kt)("a",{parentName:"p",href:"#ast-module"},"AST Module"),".\nDevelopers can get the external type (",(0,i.kt)("inlineCode",{parentName:"p"},"function"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"table"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"memory"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"global"),"), import module name, and external name from an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportType")," object.\nThe details about querying ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportType")," objects will be introduced in the ",(0,i.kt)("a",{parentName:"p",href:"#ast-module"},"AST Module"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"var ast *wasmedge.AST = ...\n// Assume that `ast` is returned by the `Loader` for the result of loading a WASM file.\nimptypelist := ast.ListImports()\n// Assume that `imptypelist` is an array listed from the `ast` for the imports.\n\nfor i, imptype := range imptypelist {\n  exttype := imptype.GetExternalType()\n  // The `exttype` must be one of `wasmedge.ExternType_Function`, `wasmedge.ExternType_Table`,\n  // wasmedge.ExternType_Memory`, or `wasmedge.ExternType_Global`.\n\n  modname := imptype.GetModuleName()\n  extname := imptype.GetExternalName()\n  // Get the module name and external name of the imports.\n\n  extval := imptype.GetExternalValue()\n  // The `extval` is the type of `interface{}` which indicates one of `*wasmedge.FunctionType`,\n  // `*wasmedge.TableType`, `*wasmedge.MemoryType`, or `*wasmedge.GlobalType`.\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Export type context"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ExportType")," is an object holds the export type context is used for getting the exports information from a ",(0,i.kt)("a",{parentName:"p",href:"#ast-module"},"AST Module"),".\nDevelopers can get the external type (",(0,i.kt)("inlineCode",{parentName:"p"},"function"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"table"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"memory"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"global"),") and external name from an ",(0,i.kt)("inlineCode",{parentName:"p"},"Export Type")," context.\nThe details about querying ",(0,i.kt)("inlineCode",{parentName:"p"},"ExportType")," objects will be introduced in the ",(0,i.kt)("a",{parentName:"p",href:"#ast-module"},"AST Module"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"var ast *wasmedge.AST = ...\n// Assume that `ast` is returned by the `Loader` for the result of loading a WASM file.\nexptypelist := ast.ListExports()\n// Assume that `exptypelist` is an array listed from the `ast` for the exports.\n\nfor i, exptype := range exptypelist {\n  exttype := exptype.GetExternalType()\n  // The `exttype` must be one of `wasmedge.ExternType_Function`, `wasmedge.ExternType_Table`,\n  // wasmedge.ExternType_Memory`, or `wasmedge.ExternType_Global`.\n\n  extname := exptype.GetExternalName()\n  // Get the external name of the exports.\n\n  extval := exptype.GetExternalValue()\n  // The `extval` is the type of `interface{}` which indicates one of `*wasmedge.FunctionType`,\n  // `*wasmedge.TableType`, `*wasmedge.MemoryType`, or `*wasmedge.GlobalType`.\n}\n")))),(0,i.kt)("h3",{id:"async"},"Async"),(0,i.kt)("p",null,"After calling the ",(0,i.kt)("a",{parentName:"p",href:"#asynchronous-execution"},"asynchronous execution APIs"),", developers will get the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.Async")," object.\nDevelopers own the object and should call the ",(0,i.kt)("inlineCode",{parentName:"p"},"(*Async).Release()")," API to release it."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get the execution result of the asynchronous execution"),(0,i.kt)("p",{parentName:"li"},"Developers can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"(*Async).GetResult()")," API to block and wait for getting the return values.\nThis function will block and wait for the execution. If the execution has finished, this function will return immediately. If the execution failed, this function will return an error."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"async := ... // Ignored. Asynchronous execute a function.\n\n// Blocking and waiting for the execution and get the return values.\nres, err := async.GetResult()\nasync.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Wait for the asynchronous execution with timeout settings"),(0,i.kt)("p",{parentName:"li"},"Besides waiting until the end of execution, developers can set the timeout to wait for."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'async := ... // Ignored. Asynchronous execute a function.\n\n// Blocking and waiting for the execution with the timeout(ms). \nisend := async.WaitFor(1000)\nif isend {\n  res, err := async.GetResult()\n  // ...\n} else {\n  async.Cancel()\n  _, err := async.GetResult()\n  // The error message in `err` will be "execution interrupted".\n}\nasync.Release()\n')))),(0,i.kt)("h3",{id:"configurations"},"Configurations"),(0,i.kt)("p",null,"The configuration object, ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.Configure"),", manages the configurations for ",(0,i.kt)("inlineCode",{parentName:"p"},"Loader"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Validator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Executor"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"VM"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Compiler"),".\nDevelopers can adjust the settings about the proposals, VM host pre-registrations (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"WASI"),"), and AOT compiler options, and then apply the ",(0,i.kt)("inlineCode",{parentName:"p"},"Configure")," object to create other runtime objects."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Proposals"),(0,i.kt)("p",{parentName:"li"},"WasmEdge supports turning on or off the WebAssembly proposals.\nThis configuration is effective in any contexts created with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Configure")," object."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"const (\n  IMPORT_EXPORT_MUT_GLOBALS         = Proposal(C.WasmEdge_Proposal_ImportExportMutGlobals)\n  NON_TRAP_FLOAT_TO_INT_CONVERSIONS = Proposal(C.WasmEdge_Proposal_NonTrapFloatToIntConversions)\n  SIGN_EXTENSION_OPERATORS          = Proposal(C.WasmEdge_Proposal_SignExtensionOperators)\n  MULTI_VALUE                       = Proposal(C.WasmEdge_Proposal_MultiValue)\n  BULK_MEMORY_OPERATIONS            = Proposal(C.WasmEdge_Proposal_BulkMemoryOperations)\n  REFERENCE_TYPES                   = Proposal(C.WasmEdge_Proposal_ReferenceTypes)\n  SIMD                              = Proposal(C.WasmEdge_Proposal_SIMD)\n  TAIL_CALL                         = Proposal(C.WasmEdge_Proposal_TailCall)\n  ANNOTATIONS                       = Proposal(C.WasmEdge_Proposal_Annotations)\n  MEMORY64                          = Proposal(C.WasmEdge_Proposal_Memory64)\n  THREADS                           = Proposal(C.WasmEdge_Proposal_Threads)\n  EXCEPTION_HANDLING                = Proposal(C.WasmEdge_Proposal_ExceptionHandling)\n  FUNCTION_REFERENCES               = Proposal(C.WasmEdge_Proposal_FunctionReferences)\n)\n")),(0,i.kt)("p",{parentName:"li"},"Developers can add or remove the proposals into the ",(0,i.kt)("inlineCode",{parentName:"p"},"Configure")," object."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"// By default, the following proposals have turned on initially:\n// * IMPORT_EXPORT_MUT_GLOBALS\n// * NON_TRAP_FLOAT_TO_INT_CONVERSIONS\n// * SIGN_EXTENSION_OPERATORS\n// * MULTI_VALUE\n// * BULK_MEMORY_OPERATIONS\n// * REFERENCE_TYPES\n// * SIMD\nconf := wasmedge.NewConfigure()\n// Developers can also pass the proposals as parameters:\n// conf := wasmedge.NewConfigure(wasmedge.SIMD, wasmedge.BULK_MEMORY_OPERATIONS)\nconf.AddConfig(wasmedge.SIMD)\nconf.RemoveConfig(wasmedge.REFERENCE_TYPES)\nis_bulkmem := conf.HasConfig(wasmedge.BULK_MEMORY_OPERATIONS)\n// The `is_bulkmem` will be `true`.\nconf.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Host registrations"),(0,i.kt)("p",{parentName:"li"},"This configuration is used for the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," context to turn on the ",(0,i.kt)("inlineCode",{parentName:"p"},"WASI")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge_process")," supports and only effective in ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," objects."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"const (\n  WASI             = HostRegistration(C.WasmEdge_HostRegistration_Wasi)\n  WasmEdge_PROCESS = HostRegistration(C.WasmEdge_HostRegistration_WasmEdge_Process)\n)\n")),(0,i.kt)("p",{parentName:"li"},"The details will be introduced in the ",(0,i.kt)("a",{parentName:"p",href:"#preregistrations"},"preregistrations of VM context"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"conf := wasmedge.NewConfigure()\n// Developers can also pass the proposals as parameters:\n// conf := wasmedge.NewConfigure(wasmedge.WASI)\nconf.AddConfig(wasmedge.WASI)\nconf.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Maximum memory pages"),(0,i.kt)("p",{parentName:"li"},"Developers can limit the page size of memory instances by this configuration.\nWhen growing the page size of memory instances in WASM execution and exceeding the limited size, the page growing will fail.\nThis configuration is only effective in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Executor")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," objects."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"conf := wasmedge.NewConfigure()\n\npagesize := conf.GetMaxMemoryPage()\n// By default, the maximum memory page size in each memory instances is 65536.\nconf.SetMaxMemoryPage(1234)\npagesize := conf.GetMaxMemoryPage()\n// `pagesize` will be 1234.\n\nconf.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"AOT compiler options"),(0,i.kt)("p",{parentName:"li"},"The AOT compiler options configure the behavior about optimization level, output format, dump IR, and generic binary."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"const (\n  // Disable as many optimizations as possible.\n  CompilerOptLevel_O0 = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_O0)\n  // Optimize quickly without destroying debuggability.\n  CompilerOptLevel_O1 = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_O1)\n  // Optimize for fast execution as much as possible without triggering significant incremental compile time or code size growth.\n  CompilerOptLevel_O2 = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_O2)\n  // Optimize for fast execution as much as possible.\n  CompilerOptLevel_O3 = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_O3)\n  // Optimize for small code size as much as possible without triggering significant incremental compile time or execution time slowdowns.\n  CompilerOptLevel_Os = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_Os)\n  // Optimize for small code size as much as possible.\n  CompilerOptLevel_Oz = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_Oz)\n)\n\nconst (\n  // Native dynamic library format.\n  CompilerOutputFormat_Native = CompilerOutputFormat(C.WasmEdge_CompilerOutputFormat_Native)\n  // WebAssembly with AOT compiled codes in custom section.\n  CompilerOutputFormat_Wasm = CompilerOutputFormat(C.WasmEdge_CompilerOutputFormat_Wasm)\n)\n")),(0,i.kt)("p",{parentName:"li"},"These configurations are only effective in ",(0,i.kt)("inlineCode",{parentName:"p"},"Compiler")," contexts."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"conf := wasmedge.NewConfigure()\n\n// By default, the optimization level is O3.\nconf.SetCompilerOptimizationLevel(wasmedge.CompilerOptLevel_O2)\n// By default, the output format is universal WASM.\nconf.SetCompilerOutputFormat(wasmedge.CompilerOutputFormat_Native)\n// By default, the dump IR is `false`.\nconf.SetCompilerDumpIR(true)\n// By default, the generic binary is `false`.\nconf.SetCompilerGenericBinary(true)\n\nconf.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Statistics options"),(0,i.kt)("p",{parentName:"li"},"The statistics options configure the behavior about instruction counting, cost measuring, and time measuring in both runtime and AOT compiler.\nThese configurations are effective in ",(0,i.kt)("inlineCode",{parentName:"p"},"Compiler"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"VM"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Executor")," objects."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"conf := wasmedge.NewConfigure()\n\n// By default, the instruction counting is `false` when running a compiled-WASM or a pure-WASM.\nconf.SetStatisticsInstructionCounting(true)\n// By default, the cost measurement is `false` when running a compiled-WASM or a pure-WASM.\nconf.SetStatisticsTimeMeasuring(true)\n// By default, the time measurement is `false` when running a compiled-WASM or a pure-WASM.\nconf.SetStatisticsCostMeasuring(true)\n\nconf.Release()\n")))),(0,i.kt)("h3",{id:"statistics"},"Statistics"),(0,i.kt)("p",null,"The statistics object, ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.Statistics"),", provides the instruction counter, cost summation, and cost limitation at runtime."),(0,i.kt)("p",null,"Before using statistics, the statistics configuration must be set. Otherwise, the return values of calling statistics are undefined behaviour."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Instruction counter"),(0,i.kt)("p",{parentName:"li"},"The instruction counter can help developers to profile the performance of WASM running.\nDevelopers can retrieve the ",(0,i.kt)("inlineCode",{parentName:"p"},"Statistics")," object from the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object, or create a new one for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Executor")," creation.\nThe details will be introduced in the next partitions."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"stat := wasmedge.NewStatistics()\n// ... After running the WASM functions with the `Statistics` object\n\ncount := stat.GetInstrCount()\nips := stat.GetInstrPerSecond()\nstat.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cost table"),(0,i.kt)("p",{parentName:"li"},"The cost table is to accumulate the cost of instructions with their weights.\nDevelopers can set the cost table array (the indices are the byte code value of instructions, and the values are the cost of instructions) into the ",(0,i.kt)("inlineCode",{parentName:"p"},"Statistics")," object.\nIf the cost limit value is set, the execution will return the ",(0,i.kt)("inlineCode",{parentName:"p"},"cost limit exceeded")," error immediately when exceeds the cost limit in runtime."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-c"},"stat := wasmedge.NewStatistics()\n\ncosttable := []uint64{\n  0, 0,\n  10, /* 0x02: Block */\n  11, /* 0x03: Loop */\n  12, /* 0x04: If */\n  12, /* 0x05: Else */\n  0, 0, 0, 0, 0, 0,\n  20, /* 0x0C: Br */\n  21, /* 0x0D: Br_if */\n  22, /* 0x0E: Br_table */\n  0,\n}\n// Developers can set the costs of each instruction. The value not covered will be 0.\n\nWasmEdge_StatisticsSetCostTable(StatCxt, CostTable, 16);\nstat.SetCostTable()\nstat.SetCostLimit(5000000)\n\n// ... After running the WASM functions with the `Statistics` object\ncost := stat.GetTotalCost()\nstat.Release()\n")))),(0,i.kt)("h2",{id:"wasmedge-vm"},"WasmEdge VM"),(0,i.kt)("p",null,"In this partition, we will introduce the functions of ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.VM")," object and show examples of executing WASM functions."),(0,i.kt)("h3",{id:"wasm-execution-example-with-vm-object"},"WASM Execution Example With VM Object"),(0,i.kt)("p",null,"The following shows the example of running the WASM for getting the Fibonacci.\nThis example uses the ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wasm"},"fibonacci.wasm"),", and the corresponding WAT file is at ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wat"},"fibonacci.wat"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasm"},'(module\n (export "fib" (func $fib))\n (func $fib (param $n i32) (result i32)\n  (if\n   (i32.lt_s (get_local $n)(i32.const 2))\n   (return (i32.const 1))\n  )\n  (return\n   (i32.add\n    (call $fib (i32.sub (get_local $n)(i32.const 2)))\n    (call $fib (i32.sub (get_local $n)(i32.const 1)))\n   )\n  )\n )\n)\n')),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run WASM functions rapidly"),(0,i.kt)("p",{parentName:"li"},"Create a new Go project first:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir wasmedge_test && cd wasmedge_test\ngo mod init wasmedge_test\n")),(0,i.kt)("p",{parentName:"li"},"Assume that the WASM file ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wasm"},(0,i.kt)("inlineCode",{parentName:"a"},"fibonacci.wasm"))," is copied into the current ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge_test")," directory, and create and edit the Go file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.go")," as following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\nfunc main() {\n  // Set the logging level.\n  wasmedge.SetLogErrorLevel()\n\n  // Create the configure context and add the WASI support.\n  // This step is not necessary unless you need WASI support.\n  conf := wasmedge.NewConfigure(wasmedge.WASI)\n  // Create VM with the configure.\n  vm := wasmedge.NewVMWithConfig(conf)\n\n  res, err := vm.RunWasmFile("fibonacci.wasm", "fib", uint32(21))\n  if err == nil {\n    fmt.Println("Get fibonacci[21]:", res[0].(int32))\n  } else {\n    fmt.Println("Run failed:", err.Error())\n  }\n\n  vm.Release()\n  conf.Release()\n}\n')),(0,i.kt)("p",{parentName:"li"},"Then you can build and run the Golang application with the WasmEdge Golang SDK: (the 21 Fibonacci number is 17711 in 0-based index)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\n$ go build\n$ ./wasmedge_test\nGet fibonacci[21]: 17711\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Instantiate and run WASM functions manually"),(0,i.kt)("p",{parentName:"li"},"Besides the above example, developers can run the WASM functions step-by-step with ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object APIs:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\nfunc main() {\n  // Set the logging level.\n  wasmedge.SetLogErrorLevel()\n\n  // Create VM.\n  vm := wasmedge.NewVM()\n  var err error\n  var res []interface{}\n\n  // Step 1: Load WASM file.\n  err = vm.LoadWasmFile("fibonacci.wasm")\n  if err != nil {\n    fmt.Println("Load WASM from file FAILED:", err.Error())\n    return\n  }\n\n  // Step 2: Validate the WASM module.\n  err = vm.Validate()\n  if err != nil {\n    fmt.Println("Validation FAILED:", err.Error())\n    return\n  }\n\n  // Step 3: Instantiate the WASM module.\n  err = vm.Instantiate()\n  // Developers can load, validate, and instantiate another WASM module\n  // to replace the instantiated one. In this case, the old module will\n  // be cleared, but the registered modules are still kept.\n  if err != nil {\n    fmt.Println("Instantiation FAILED:", err.Error())\n    return\n  }\n\n  // Step 4: Execute WASM functions. Parameters: (funcname, args...)\n  res, err = vm.Execute("fib", uint32(25))\n  // Developers can execute functions repeatedly after instantiation.\n  if err == nil {\n    fmt.Println("Get fibonacci[25]:", res[0].(int32))\n  } else {\n    fmt.Println("Run failed:", err.Error())\n  }\n\n  vm.Release()\n}\n')),(0,i.kt)("p",{parentName:"li"},"Then you can build and run: (the 25th Fibonacci number is 121393 in 0-based index)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go build\n$ ./wasmedge_test\nGet fibonacci[25]: 121393\n")),(0,i.kt)("p",{parentName:"li"},"The following graph explains the status of the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-text"},"                       |========================|\n              |-------\x3e|      VM: Initiated     |\n              |        |========================|\n              |                    |\n              |                 LoadWasm\n              |                    |\n              |                    v\n              |        |========================|\n              |--------|       VM: Loaded       |<-------|\n              |        |========================|        |\n              |              |            ^              |\n              |         Validate          |              |\n          Cleanup            |          LoadWasm         |\n              |              v            |            LoadWasm\n              |        |========================|        |\n              |--------|      VM: Validated     |        |\n              |        |========================|        |\n              |              |            ^              |\n              |      Instantiate          |              |\n              |              |          RegisterModule   |\n              |              v            |              |\n              |        |========================|        |\n              |--------|    VM: Instantiated    |--------|\n                       |========================|\n                             |            ^\n                             |            |\n                             --------------\n                Instantiate, Execute, ExecuteRegistered,\n                ExecuteBindgen, ExecuteBindgenRegistered\n")),(0,i.kt)("p",{parentName:"li"},"The status of the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," context would be ",(0,i.kt)("inlineCode",{parentName:"p"},"Inited")," when created.\nAfter loading WASM successfully, the status will be ",(0,i.kt)("inlineCode",{parentName:"p"},"Loaded"),".\nAfter validating WASM successfully, the status will be ",(0,i.kt)("inlineCode",{parentName:"p"},"Validated"),".\nAfter instantiating WASM successfully, the status will be ",(0,i.kt)("inlineCode",{parentName:"p"},"Instantiated"),", and developers can invoke functions.\nDevelopers can register WASM or import objects in any status, but they should instantiate WASM again.\nDevelopers can also load WASM in any status, and they should validate and instantiate the WASM module before function invocation.\nWhen in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Instantiated")," status, developers can instantiate the WASM module again to reset the old WASM runtime structures."))),(0,i.kt)("h3",{id:"vm-creations"},"VM Creations"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," creation APIs accepts the ",(0,i.kt)("inlineCode",{parentName:"p"},"Configure")," object and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object.\nNoticed that if the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," created with the outside ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object, the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," will execute WASM on that ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object is set into multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," objects, it may causes data conflict when in execution.\nThe details of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object will be introduced in ",(0,i.kt)("a",{parentName:"p",href:"#store"},"Store"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"conf := wasmedge.NewConfigure()\nstore := wasmedge.NewStore()\n\n// Create a VM with default configure and store.\nvm := wasmedge.NewVM()\nvm.Release()\n\n// Create a VM with the specified configure and default store.\nvm = wasmedge.NewVMWithConfig(conf)\nvm.Release()\n\n// Create a VM with the default configure and specified store.\nvm = wasmedge.NewVMWithStore(store)\nvm.Release()\n\n// Create a VM with the specified configure and store.\nvm = wasmedge.NewVMWithConfigAndStore(conf, store)\nvm.Release()\n\nconf.Release()\nstore.Release()\n")),(0,i.kt)("h3",{id:"preregistrations"},"Preregistrations"),(0,i.kt)("p",null,"WasmEdge provides the following built-in pre-registrations."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/WebAssembly/WASI"},"WASI (WebAssembly System Interface)")),(0,i.kt)("p",{parentName:"li"},"Developers can turn on the WASI support for VM in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Configure")," object."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"conf := wasmedge.NewConfigure(wasmedge.WASI)\n// Or you can set the `wasmedge.WASI` into the configure object through `(*Configure).AddConfig`.\nvm := wasmedge.NewVMWithConfig(conf)\nvm.Release()\n\n// The following API can retrieve the pre-registration import objects from the VM object.\n// This API will return `nil` if the corresponding pre-registration is not set into the configuration.\nwasiconf := conf.GetImportObject(wasmedge.WASI)\n// Initialize the WASI.\nwasiconf.InitWasi(/* ... ignored */)\n\nconf.Release()\n")),(0,i.kt)("p",{parentName:"li"},"And also can create the WASI import object from API. The details will be introduced in the ",(0,i.kt)("a",{parentName:"p",href:"#host-functions"},"Host Functions")," and the ",(0,i.kt)("a",{parentName:"p",href:"#host-module-registrations"},"Host Module Registrations"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://crates.io/crates/wasmedge_process_interface"},"WasmEdge_Process")),(0,i.kt)("p",{parentName:"li"},"This pre-registration is for the process interface for WasmEdge on ",(0,i.kt)("inlineCode",{parentName:"p"},"Rust")," sources.\nAfter turning on this pre-registration, the VM will support the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge_process")," host functions."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"conf := wasmedge.NewConfigure(wasmedge.WasmEdge_PROCESS)\nvm := wasmedge.NewVMWithConfig(conf)\nvm.Release()\n\n// The following API can retrieve the pre-registration import objects from the VM object.\n// This API will return `nil` if the corresponding pre-registration is not set into the configuration.\nprocconf := conf.GetImportObject(wasmedge.WasmEdge_PROCESS)\n// Initialize the WasmEdge_Process.\nprocconf.InitWasmEdgeProcess(/* ... ignored */)\n\nconf.Release()\n")),(0,i.kt)("p",{parentName:"li"},"And also can create the WasmEdge_Process import object from API. The details will be introduced in the ",(0,i.kt)("a",{parentName:"p",href:"#host-functions"},"Host Functions")," and the ",(0,i.kt)("a",{parentName:"p",href:"#host-module-registrations"},"Host Module Registrations"),"."))),(0,i.kt)("h3",{id:"host-module-registrations"},"Host Module Registrations"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-hostfunc"},"Host functions")," are functions outside WebAssembly and passed to WASM modules as imports.\nIn WasmEdge-go, the host functions are composed into host modules as ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," objects with module names.\nPlease refer to the ",(0,i.kt)("a",{parentName:"p",href:"#host-functions"},"Host Functions in WasmEdge Runtime")," for the details.\nIn this chapter, we show the example for registering the host modules into a ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"vm := wasmedge.NewVM()\n// You can also create and register the WASI host modules by this API.\nwasiobj := wasmedge.NewWasiImportObject(/* ... ignored ... */)\n\nres := vm.RegisterImport(wasiobj)\n// The result status should be checked.\n\nvm.Release()\n// The created import objects should be released.\nwasiobj.Release()\n")),(0,i.kt)("h3",{id:"wasm-registrations-and-executions"},"WASM Registrations And Executions"),(0,i.kt)("p",null,"In WebAssembly, the instances in WASM modules can be exported and can be imported by other WASM modules.\nWasmEdge VM provides APIs for developers to register and export any WASM modules, and execute the functions or host functions in the registered WASM modules."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Register the WASM modules with exported module names"),(0,i.kt)("p",{parentName:"li"},"Unless the import objects have already contained the module names, every WASM module should be named uniquely when registering. The following shows the example."),(0,i.kt)("p",{parentName:"li"},"Create a new Go project first:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir wasmedge_test && cd wasmedge_test\ngo mod init wasmedge_test\n")),(0,i.kt)("p",{parentName:"li"},"Assume that the WASM file ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wasm"},(0,i.kt)("inlineCode",{parentName:"a"},"fibonacci.wasm"))," is copied into the current directory.\nThen create and edit the Go file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.go")," as following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "github.com/second-state/WasmEdge-go/wasmedge"\n\nfunc main() {\n  // Create VM.\n  vm := wasmedge.NewVM()\n\n  var err error\n  err = vm.RegisterWasmFile("module_name", "fibonacci.wasm")\n  // Developers can register the WASM module from `[]byte` with the\n  // `(*VM).RegisterWasmBuffer` function, or from `AST` object with\n  // the `(*VM).RegisterAST` function.\n  // The result status should be checked. The error will occur if the\n  // WASM module instantiation failed or the module name conflicts.\n\n  vm.Release()\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Execute the functions in registered WASM modules"),(0,i.kt)("p",{parentName:"li"},"Edit the Go file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.go")," as following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\nfunc main() {\n  // Create VM.\n  vm := wasmedge.NewVM()\n\n  var res []interface{}\n  var err error\n  // Register the WASM module from file into VM with the module name "mod".\n  err = vm.RegisterWasmFile("mod", "fibonacci.wasm")\n  // Developers can register the WASM module from `[]byte` with the\n  // `(*VM).RegisterWasmBuffer` function, or from `AST` object with\n  // the `(*VM).RegisterAST` function.\n  if err != nil {\n    fmt.Println("WASM registration failed:", err.Error())\n    return\n  }\n  // The function "fib" in the "fibonacci.wasm" was exported with the module\n  // name "mod". As the same as host functions, other modules can import the\n  // function `"mod" "fib"`.\n\n  // Execute WASM functions in registered modules.\n  // Unlike the execution of functions, the registered functions can be\n  // invoked without `(*VM).Instantiate` because the WASM module was\n  // instantiated when registering.\n  // Developers can also invoke the host functions directly with this API.\n  res, err = vm.ExecuteRegistered("mod", "fib", int32(25))\n  if err == nil {\n    fmt.Println("Get fibonacci[25]:", res[0].(int32))\n  } else {\n    fmt.Println("Run failed:", err.Error())\n  }\n\n  vm.Release()\n}\n')),(0,i.kt)("p",{parentName:"li"},"Then you can build and run: (the 25th Fibonacci number is 121393 in 0-based index)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\n$ go build\n$ ./wasmedge_test\nGet fibonacci[25]: 121393\n")))),(0,i.kt)("h3",{id:"asynchronous-execution"},"Asynchronous Execution"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Asynchronously run WASM functions rapidly"),(0,i.kt)("p",{parentName:"li"},"Assume that a new Go project is created as following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir wasmedge_test && cd wasmedge_test\ngo mod init wasmedge_test\n")),(0,i.kt)("p",{parentName:"li"},"Then assume that the WASM file ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wasm"},(0,i.kt)("inlineCode",{parentName:"a"},"fibonacci.wasm"))," is copied into the current directory, and create and edit a Go file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.go"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\nfunc main() {\n  // Create VM.\n  vm := wasmedge.NewVM()\n\n  // Asynchronously run the WASM function from file and get the `wasmedge.Async` object.\n  async := vm.AsyncRunWasmFile("fibonacci.wasm", "fib", uint32(20))\n\n  // Block and wait for the execution and get the results.\n  res, err := async.GetResult()\n  if err == nil {\n    fmt.Println("Get the result:", res[0].(int32))\n  } else {\n    fmt.Println("Error message:", err.Error())\n  }\n  async.Release()\n  vm.Release()\n}\n')),(0,i.kt)("p",{parentName:"li"},"Then you can build and run: (the 20th Fibonacci number is 10946 in 0-based index)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\n$ go build\n$ ./wasmedge_test\nGet the result: 10946\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Instantiate and asynchronously run WASM functions manually"),(0,i.kt)("p",{parentName:"li"},"Besides the above example, developers can run the WASM functions step-by-step with ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," context APIs:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\nfunc main() {\n  var err error\n  var res []interface{}\n\n  // Create VM.\n  vm := wasmedge.NewVM()\n\n  // Step 1: Load WASM file.\n  // Developers can load the WASM binary from buffer with the `(*VM).LoadWasmBuffer()` API,\n  // or from `wasmedge.AST` object with the `(*VM).LoadWasmAST()` API.\n  err := vm.LoadWasmFile("fibonacci.wasm")\n  if err != nil {\n    fmt.Println("Load WASM from file FAILED:", err.Error())\n    return\n  }\n\n  // Step 2: Validate the WASM module.\n  err = vm.Validate()\n  if err != nil {\n    fmt.Println("Validation FAILED:", err.Error())\n    return\n  }\n\n  // Step 3: Instantiate the WASM module.\n  err = vm.Instantiate()\n  if err != nil {\n    fmt.Println("Instantiation FAILED:", err.Error())\n    return\n  }\n\n  // Step 4: Asynchronously execute the WASM function and get the `wasmedge.Async` object.\n  async := vm.AsyncExecute("fib", uint32(25))\n\n  // Block and wait for the execution and get the results.\n  res, err := async.GetResult()\n  if err == nil {\n    fmt.Println("Get the result:", res[0].(int32))\n  } else {\n    fmt.Println("Error message:", err.Error())\n  }\n  async.Release()\n  vm.Release()\n}\n')),(0,i.kt)("p",{parentName:"li"},"Then you can build and run: (the 25th Fibonacci number is 121393 in 0-based index)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\n$ go build\n$ ./wasmedge_test\nGet the result: 121393\n")))),(0,i.kt)("h3",{id:"instance-tracing"},"Instance Tracing"),(0,i.kt)("p",null,"Sometimes the developers may have requirements to get the instances of the WASM runtime.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object supplies the APIs to retrieve the instances."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Store"),(0,i.kt)("p",{parentName:"li"},"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object is created without assigning a ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object, the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," context will allocate and own a ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"vm := wasmedge.NewVM()\nstore := vm.GetStore()\n// The object should __NOT__ be deleted by calling `(*Store).Release`.\nvm.Release()\n")),(0,i.kt)("p",{parentName:"li"},"Developers can also create the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object with a ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object.\nIn this case, developers should guarantee that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object cannot be released before the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object.\nPlease refer to the ",(0,i.kt)("a",{parentName:"p",href:"#store"},"Store Objects")," for the details about the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," APIs."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"store := wasmedge.NewStore()\nvm := wasmedge.NewVMWithStore(store)\n\nstoremock := vm.GetStore()\n// The internal store context of the `store` and the `storemock` are the same.\n\nvm.Release()\nstore.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"List exported functions"),(0,i.kt)("p",{parentName:"li"},"After the WASM module instantiation, developers can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"(*VM).Execute")," function to invoke the exported WASM functions. For this purpose, developers may need information about the exported WASM function list.\nPlease refer to the ",(0,i.kt)("a",{parentName:"p",href:"#instances"},"Instances in runtime")," for the details about the function types."),(0,i.kt)("p",{parentName:"li"},"Assume that a new Go project is created as following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir wasmedge_test && cd wasmedge_test\ngo mod init wasmedge_test\n")),(0,i.kt)("p",{parentName:"li"},"Then assume that the WASM file ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wasm"},(0,i.kt)("inlineCode",{parentName:"a"},"fibonacci.wasm"))," is copied into the current directory, and create and edit a Go file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.go"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\nfunc main() {\n  // Create VM.\n  vm := wasmedge.NewVM()\n\n  // Step 1: Load WASM file.\n  err := vm.LoadWasmFile("fibonacci.wasm")\n  if err != nil {\n    fmt.Println("Load WASM from file FAILED:", err.Error())\n    return\n  }\n\n  // Step 2: Validate the WASM module.\n  err = vm.Validate()\n  if err != nil {\n    fmt.Println("Validation FAILED:", err.Error())\n    return\n  }\n\n  // Step 3: Instantiate the WASM module.\n  err = vm.Instantiate()\n  if err != nil {\n    fmt.Println("Instantiation FAILED:", err.Error())\n    return\n  }\n\n  // List the exported functions for the names and function types.\n  funcnames, functypes := vm.GetFunctionList()\n  for _, fname := range funcnames {\n    fmt.Println("Exported function name:", fname)\n  }\n  for _, ftype := range functypes {\n    // `ftype` is the `FunctionType` object of the same index in the `funcnames` array.\n    // Developers should __NOT__ call the `ftype.Release()`.\n  }\n\n  vm.Release()\n}\n')),(0,i.kt)("p",{parentName:"li"},"Then you can build and run: (the only exported function in ",(0,i.kt)("inlineCode",{parentName:"p"},"fibonacci.wasm")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"fib"),")"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\n$ go build\n$ ./wasmedge_test\nExported function name: fib\n")),(0,i.kt)("p",{parentName:"li"},"If developers want to get the exported function names in the registered WASM modules, please retrieve the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object from the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object and refer to the APIs of ",(0,i.kt)("a",{parentName:"p",href:"#store"},"Store Contexts")," to list the registered functions by the module name.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get function types"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object provides APIs to find the function type by function name.\nPlease refer to the ",(0,i.kt)("a",{parentName:"p",href:"#instances"},"Instances in runtime")," for the details about the function types."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// Assume that a WASM module is instantiated in `vm` which is a `wasmedge.VM` object.\nfunctype := vm.GetFunctionType("fib")\n// Developers can get the function types of functions in the registered modules via the \n// `(*VM).GetFunctionTypeRegistered` API with the function name and the module name.\n// If the function is not found, these APIs will return `nil`.\n// Developers should __NOT__ call the `(*FunctionType).Release` function of the returned object.\n')))),(0,i.kt)("h2",{id:"wasmedge-runtime"},"WasmEdge Runtime"),(0,i.kt)("p",null,"In this partition, we will introduce the objects of WasmEdge runtime manually."),(0,i.kt)("h3",{id:"wasm-execution-example-step-by-step"},"WASM Execution Example Step-By-Step"),(0,i.kt)("p",null,"Besides the WASM execution through the ",(0,i.kt)("a",{parentName:"p",href:"#wasmedge-vm"},(0,i.kt)("inlineCode",{parentName:"a"},"VM")," object")," rapidly, developers can execute the WASM functions or instantiate WASM modules step-by-step with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Loader"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Validator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Executor"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," objects."),(0,i.kt)("p",null,"Assume that a new Go project is created as following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir wasmedge_test && cd wasmedge_test\ngo mod init wasmedge_test\n")),(0,i.kt)("p",null,"Then assume that the WASM file ",(0,i.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wasm"},(0,i.kt)("inlineCode",{parentName:"a"},"fibonacci.wasm"))," is copied into the current directory, and create and edit a Go file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.go"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\nfunc main() {\n  // Set the logging level to debug to print the statistics info.\n  wasmedge.SetLogDebugLevel()\n  // Create the configure object. This is not necessary if developers use the default configuration.\n  conf := wasmedge.NewConfigure()\n  // Turn on the runtime instruction counting and time measuring.\n  conf.SetStatisticsInstructionCounting(true)\n  conf.SetStatisticsTimeMeasuring(true)\n  // Create the statistics object. This is not necessary if the statistics in runtime is not needed.\n  stat := wasmedge.NewStatistics()\n  // Create the store object. The store object is the WASM runtime structure core.\n  store := wasmedge.NewStore()\n\n  var err error\n  var res []interface{}\n  var ast *wasmedge.AST\n\n  // Create the loader object.\n  // For loader creation with default configuration, you can use `wasmedge.NewLoader()` instead.\n  loader := wasmedge.NewLoaderWithConfig(conf)\n  // Create the validator object.\n  // For validator creation with default configuration, you can use `wasmedge.NewValidator()` instead.\n  validator := wasmedge.NewValidatorWithConfig(conf)\n  // Create the executor object.\n  // For executor creation with default configuration and without statistics, you can use `wasmedge.NewExecutor()` instead.\n  executor := wasmedge.NewExecutorWithConfigAndStatistics(conf, stat)\n\n  // Load the WASM file or the compiled-WASM file and convert into the AST module object.\n  ast, err = loader.LoadFile("fibonacci.wasm")\n  if err != nil {\n    fmt.Println("Load WASM from file FAILED:", err.Error())\n    return\n  }\n  // Validate the WASM module.\n  err = validator.Validate(ast)\n  if err != nil {\n    fmt.Println("Validation FAILED:", err.Error())\n    return\n  }\n  // Instantiate the WASM module into the Store object.\n  err = executor.Instantiate(store, ast)\n  if err != nil {\n    fmt.Println("Instantiation FAILED:", err.Error())\n    return\n  }\n\n  // Try to list the exported functions of the instantiated WASM module.\n  funcnames := store.ListFunction()\n  for _, fname := range funcnames {\n    fmt.Println("Exported function name:", fname)\n  }\n\n  // Invoke the WASM function.\n  res, err = executor.Invoke(store, "fib", int32(30))\n  if err == nil {\n    fmt.Println("Get fibonacci[30]:", res[0].(int32))\n  } else {\n    fmt.Println("Run failed:", err.Error())\n  }\n\n  // Resources deallocations.\n  conf.Release()\n  stat.Release()\n  ast.Release()\n  loader.Release()\n  validator.Release()\n  executor.Release()\n  store.Release()\n}\n')),(0,i.kt)("p",null,"Then you can build and run: (the 18th Fibonacci number is 1346269 in 30-based index)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\n$ go build\n$ ./wasmedge_test\nExported function name: fib\n[2021-11-24 18:53:01.451] [debug]  Execution succeeded.\n[2021-11-24 18:53:01.452] [debug]\n ====================  Statistics  ====================\n Total execution time: 556372295 ns\n Wasm instructions execution time: 556372295 ns\n Host functions execution time: 0 ns\n Executed wasm instructions count: 28271634\n Gas costs: 0\n Instructions per second: 50814237\nGet fibonacci[30]: 1346269\n")),(0,i.kt)("h3",{id:"loader"},"Loader"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Loader")," object loads the WASM binary from files or buffers.\nBoth the WASM and the compiled-WASM from the ",(0,i.kt)("a",{parentName:"p",href:"#wasmedge-aot-compiler"},"WasmEdge AOT Compiler")," are supported."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'var buf []byte\n// ... Read the WASM code to the `buf`.\n\n// Developers can adjust settings in the configure object.\nconf := wasmedge.NewConfigure()\n// Create the loader object.\n// For loader creation with default configuration, you can use `wasmedge.NewLoader()` instead.\nloader := wasmedge.NewLoaderWithConfig(conf)\nconf.Release()\n\n// Load WASM or compiled-WASM from the file.\nast, err := loader.LoadFile("fibonacci.wasm")\nif err != nil {\n  fmt.Println("Load WASM from file FAILED:", err.Error())\n} else {\n  // The output AST object should be released.\n  ast.Release()\n}\n\n// Load WASM or compiled-WASM from the buffer\nast, err = loader.LoadBuffer(buf)\nif err != nil {\n  fmt.Println("Load WASM from buffer FAILED:", err.Error())\n} else {\n  // The output AST object should be released.\n  ast.Release()   \n}\n\nloader.Release()\n')),(0,i.kt)("h3",{id:"validator"},"Validator"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Validator")," object can validate the WASM module.\nEvery WASM module should be validated before instantiation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// ...\n// Assume that the `ast` is the output `*wasmedge.AST` object from the loader context.\n// Assume that the `conf` is the `*wasmedge.Configure` object.\n\n// Create the validator context.\n// For validator creation with default configuration, you can use `wasmedge.NewValidator()` instead.\nvalidator := wasmedge.NewValidatorWithConfig(conf)\n\nerr := validator.Validate(ast)\nif err != nil {\n  fmt.Println("Validation FAILED:", err.Error())\n}\n\nvalidator.Release()\n')),(0,i.kt)("h3",{id:"executor"},"Executor"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Executor")," object is the executor for both WASM and compiled-WASM.\nThis object should work base on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object. For the details of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"#store"},"next chapter"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Register modules"),(0,i.kt)("p",{parentName:"li"},"As the same of ",(0,i.kt)("a",{parentName:"p",href:"#host-module-registrations"},"registering host modules")," or ",(0,i.kt)("a",{parentName:"p",href:"#wasm-registrations-and-executions"},"importing WASM modules")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," objects, developers can register ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"AST")," objects into the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Executor")," APIs.\nFor the details of import objects, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"#host-functions"},"Host Functions"),")."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// ...\n// Assume that the `ast` is the output `*wasmedge.AST` object from the loader\n// and has passed the validation.\n// Assume that the `conf` is the `*wasmedge.Configure` object.\n\n// Create the statistics object. This step is not necessary if the statistics\n// is not needed.\nstat := wasmedge.NewStatistics()\n// Create the executor object.\n// For executor creation with default configuration and without statistics,\n// you can use `wasmedge.NewExecutor()` instead.\nexecutor := wasmedge.NewExecutorWithConfigAndStatistics(conf, stat)\n// Create the store object. The store is the WASM runtime structure core.\nstore := wasmedge.NewStore()\n\n// Register the loaded WASM `ast` into store with the export module name "mod".\nres := executor.RegisterModule(store, ast, "mod")\nif err != nil {\n  fmt.Println("WASM registration FAILED:", err.Error())\n  return\n}\n\n// Assume that the `impobj` is the `*wasmedge.ImportObject` for host functions.\nimpobj := ...\nerr = executor.RegisterImport(store, impobj)\nif err != nil {\n  fmt.Println("Import object registration FAILED:", err.Error())\n  return\n}\n\nexecutor.Release()\nstat.Release()\nstore.Release()\nimpobj.Release()\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Instantiate modules"),(0,i.kt)("p",{parentName:"li"},"WASM or compiled-WASM modules should be instantiated before the function invocation.\nNote that developers can only instantiate one module into the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object, and in that case, the old instantiated module will be cleaned.\nBefore instantiating a WASM module, please check the ",(0,i.kt)("a",{parentName:"p",href:"https://webassembly.github.io/spec/core/syntax/modules.html#syntax-import"},"import section")," for ensuring the imports are registered into the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// ...\n// Assume that the `ast` is the output `*wasmedge.AST` object from the loader\n// and has passed the validation.\n// Assume that the `conf` is the `*wasmedge.Configure` object.\n\n// Create the statistics object. This step is not necessary if the statistics\n// is not needed.\nstat := wasmedge.NewStatistics()\n// Create the executor object.\n// For executor creation with default configuration and without statistics,\n// you can use `wasmedge.NewExecutor()` instead.\nexecutor := wasmedge.NewExecutorWithConfigAndStatistics(conf, stat)\n// Create the store object. The store is the WASM runtime structure core.\nstore := wasmedge.NewStore()\n\n// Instantiate the WASM module.\nerr := executor.Instantiate(stpre, ast)\nif err != nil {\n  fmt.Println("WASM instantiation FAILED:", err.Error())\n  return\n}\n\nexecutor.Release()\nstat.Release()\nstore.Release()\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Invoke functions"),(0,i.kt)("p",{parentName:"li"},"As the same as function invocation via the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object, developers can invoke the functions of the instantiated or registered modules.\nThe APIs, ",(0,i.kt)("inlineCode",{parentName:"p"},"(*Executor).Invoke")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"(*Executor).InvokeRegistered"),", are similar as the APIs of the ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," object.\nPlease refer to the ",(0,i.kt)("a",{parentName:"p",href:"#wasm-execution-example-with-vm-object"},"VM context workflows")," for details."))),(0,i.kt)("h3",{id:"ast-module"},"AST Module"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AST")," object presents the loaded structure from a WASM file or buffer. Developer will get this object after loading a WASM file or buffer from ",(0,i.kt)("a",{parentName:"p",href:"#loader"},"Loader"),".\nBefore instantiation, developers can also query the imports and exports of an ",(0,i.kt)("inlineCode",{parentName:"p"},"AST")," object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'ast := ...\n// Assume that a WASM is loaded into an `*wasmedge.AST` object from loader.\n\n// List the imports.\nimports := ast.ListImports()\nfor _, import := range imports {\n  fmt.Println("Import:", import.GetModuleName(), import.GetExternalName())\n}\n\n// List the exports.\nexports := ast.ListExports()\nfor _, export := range exports {\n  fmt.Println("Export:", export.GetExternalName())\n}\n\nast.Release()\n')),(0,i.kt)("h3",{id:"store"},"Store"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://webassembly.github.io/spec/core/exec/runtime.html#store"},"Store")," is the runtime structure for the representation of all instances of ",(0,i.kt)("inlineCode",{parentName:"p"},"Function"),"s, ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"s, ",(0,i.kt)("inlineCode",{parentName:"p"},"Memory"),"s, and ",(0,i.kt)("inlineCode",{parentName:"p"},"Global"),"s that have been allocated during the lifetime of the abstract machine.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," object in WasmEdge-go provides APIs to list the exported instances with their names or find the instances by exported names. For adding instances into ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," objects, please instantiate or register WASM modules or ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," objects via the ",(0,i.kt)("inlineCode",{parentName:"p"},"Executor")," APIs."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"List instances"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'store := wasmedge.NewStore()\n// ...\n// Instantiate a WASM module via the `*wasmedge.Executor` object.\n// ...\n\n// Try to list the exported functions of the instantiated WASM module.\n// Take the function instances for example here.\nfuncnames := store.ListFunction()\nfor _, name := range funcnames {\n  fmt.Println("Exported function name:", name)\n}\n\nstore.Release()\n')),(0,i.kt)("p",{parentName:"li"},"Developers can list the function instance exported names of the registered modules via the ",(0,i.kt)("inlineCode",{parentName:"p"},"(*Store).ListFunctionRegistered()")," API with the module name.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Find instances"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'store := wasmedge.NewStore()\n// ...\n// Instantiate a WASM module via the `*wasmedge.Executor` object.\n// ...\n\n// Try to find the exported functions of the instantiated WASM module.\n// Take the function instances for example here.\nfuncobj := store.FindFunction("fib")\n// `funcobj` will be `nil` if the function not found.\n\nstore.Release()\n')),(0,i.kt)("p",{parentName:"li"},"Developers can retrieve the exported function instances of the registered modules via the ",(0,i.kt)("inlineCode",{parentName:"p"},"(*Store).FindFunctionRegistered")," API with the module name.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"List registered modules"),(0,i.kt)("p",{parentName:"li"},"With the module names, developers can list the exported instances of the registered modules with their names."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'store := wasmedge.NewStore()\n// ...\n// Instantiate a WASM module via the `*wasmedge.Executor` object.\n// ...\n\n// Try to list the registered WASM modules.\nmodnames := store.ListModule()\nfor _, name := range modnames {\n  fmt.Println("Registered module names:", name)\n}\n\nstore.Release()\n')))),(0,i.kt)("h3",{id:"instances"},"Instances"),(0,i.kt)("p",null,"The instances are the runtime structures of WASM. Developers can retrieve the instances from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," objects.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," objects will allocate instances when a WASM module or an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," is registered or instantiated through the ",(0,i.kt)("inlineCode",{parentName:"p"},"Executor"),".\nA single instance can be allocated by its creation function. Developers can construct instances into an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," for registration. Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"#host-functions"},"Host Functions")," for details.\nThe instances created by their creation functions should be destroyed, EXCEPT they are added into an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," object."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Function instance"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-hostfunc"},"Host functions")," are functions outside WebAssembly and passed to WASM modules as imports.\nIn WasmEdge, developers can create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")," objects for host functions and add them into an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," object for registering into a ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),".\nFor both host functions and the functions get from ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),", developers can retrieve the ",(0,i.kt)("inlineCode",{parentName:"p"},"FunctionType")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")," objects.\nFor the details of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Host Function")," guide, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"#host-functions"},"next chapter"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"funcinst := ...\n// `funcobj` is the `*wasmedge.Function` retrieved from the store object.\nfunctype := funcobj.GetFunctionType()\n// The `funcobj` retrieved from the store object should __NOT__ be released.\n// The `functype` retrieved from the `funcobj` should __NOT__ be released.\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Table instance"),(0,i.kt)("p",{parentName:"li"},"In WasmEdge, developers can create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," objects and add them into an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," object for registering into a ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," objects supply APIs to control the data in table instances."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'lim := wasmedge.NewLimitWithMax(10, 20)\n// Create the table type with limit and the `FuncRef` element type.\ntabtype := wasmedge.NewTableType(wasmedge.RefType_FuncRef, lim)\n// Create the table instance with table type.\ntabinst := wasmedge.NewTable(tabtype)\n// Delete the table type.\ntabtype.Release()\n\ngottabtype := tabinst.GetTableType()\n// The `gottabtype` got from table instance is owned by the `tabinst`\n// and should __NOT__ be released.\nreftype := gottabtype.GetRefType()\n// The `reftype` will be `wasmedge.RefType_FuncRef`.\n\nvar gotdata interface{}\ndata := wasmedge.NewFuncRef(5)\nerr := tabinst.SetData(data, 3)\n// Set the function index 5 to the table[3].\n\n// The following line will get an "out of bounds table access" error\n// because the position (13) is out of the table size (10):\n//   err = tabinst.SetData(data, 13)\n\ngotdata, err = tabinst.GetData(3)\n// Get the FuncRef value of the table[3].\n\n// The following line will get an "out of bounds table access" error\n// because the position (13) is out of the table size (10):\n//   gotdata, err = tabinst.GetData(13)\n\ntabsize := tabinst.GetSize()\n// `tabsize` will be 10.\nerr = tabinst.Grow(6)\n// Grow the table size of 6, the table size will be 16.\n\n// The following line will get an "out of bounds table access" error\n// because the size (16 + 6) will reach the table limit (20):\n//   err = tabinst.Grow(6)\n\ntabinst.Release()\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Memory instance"),(0,i.kt)("p",{parentName:"li"},"In WasmEdge, developers can create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Memory")," objects and add them into an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," object for registering into a ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Memory")," objects supply APIs to control the data in memory instances."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'lim := wasmedge.NewLimitWithMax(1, 5)\n// Create the memory type with limit. The memory page size is 64KiB.\nmemtype := wasmedge.NewMemoryType(lim)\n// Create the memory instance with memory type.\nmeminst := wasmedge.NewMemory(memtype)\n// Delete the memory type.\nmemtype.Release()\n\ndata := []byte("A quick brown fox jumps over the lazy dog")\nerr := meminst.SetData(data, 0x1000, 10)\n// Set the data[0:9] to the memory[4096:4105].\n\n// The following line will get an "out of bounds memory access" error\n// because [65535:65544] is out of 1 page size (65536):\n//   err = meminst.SetData(data, 0xFFFF, 10)\n\nvar gotdata []byte\ngotdata, err = meminst.GetData(0x1000, 10)\n// Get the memory[4096:4105]. The `gotdata` will be `[]byte("A quick br").\n// The following line will get an "out of bounds memory access" error\n// because [65535:65544] is out of 1 page size (65536):\n//   gotdata, err = meminst.Getdata(0xFFFF, 10)\n\npagesize := meminst.GetPageSize()\n// `pagesize` will be 1.\nerr = meminst.GrowPage(2)\n// Grow the page size of 2, the page size of the memory instance will be 3.\n\n// The following line will get an "out of bounds memory access" error\n// because the size (3 + 3) will reach the memory limit (5):\n//   err = meminst.GetPageSize(3)\n\nmeminst.Release()\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Global instance"),(0,i.kt)("p",{parentName:"li"},"In WasmEdge, developers can create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Global")," objects and add them into an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," object for registering into a ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Global")," objects supply APIs to control the value in global instances."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"// Create the global type with value type and mutation.\nglobtype := wasmedge.NewGlobalType(wasmedge.ValType_I64, wasmedge.ValMut_Var)\n// Create the global instance with value and global type.\nglobinst := wasmedge.NewGlobal(globtype, uint64(1000))\n// Delete the global type.\nglobtype.Release()\n\ngotglobtype := globinst.GetGlobalType()\n// The `gotglobtype` got from global instance is owned by the `globinst`\n// and should __NOT__ be released.\nvaltype := gotglobtype.GetValType()\n// The `valtype` will be `wasmedge.ValType_I64`.\nvalmut := gotglobtype.GetMutability()\n// The `valmut` will be `wasmedge.ValMut_Var`.\n\nglobinst.SetValue(uint64(888))\n// Set the value u64(888) to the global.\n// This function will do nothing if the value type mismatched or the\n// global mutability is `wasmedge.ValMut_Const`.\ngotval := globinst.GetValue()\n// The `gotbal` will be `interface{}` which the type is `uint64` and\n// the value is 888.\n\nglobinst.Release()\n")))),(0,i.kt)("h3",{id:"host-functions"},"Host Functions"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-hostfunc"},"Host functions")," are functions outside WebAssembly and passed to WASM modules as imports.\nIn WasmEdge-go, developers can create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Function"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Memory"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Global")," objects and add them into an ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," object for registering into a ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"Store"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Host function allocation"),(0,i.kt)("p",{parentName:"li"},"Developers can define Go functions with the following function signature as the host function body:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type hostFunctionSignature func(\n    data interface{}, mem *Memory, params []interface{}) ([]interface{}, Result)\n")),(0,i.kt)("p",{parentName:"li"},"The example of an ",(0,i.kt)("inlineCode",{parentName:"p"},"add")," host function to add 2 ",(0,i.kt)("inlineCode",{parentName:"p"},"i32")," values:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func host_add(data interface{}, mem *wasmedge.Memory, params []interface{}) ([]interface{}, wasmedge.Result) {\n  // add: i32, i32 -> i32\n  res := params[0].(int32) + params[1].(int32)\n\n  // Set the returns\n  returns := make([]interface{}, 1)\n  returns[0] = res\n\n  // Return\n  return returns, wasmedge.Result_Success\n}\n")),(0,i.kt)("p",{parentName:"li"},"Then developers can create ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")," object with the host function body and function type:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"// Create a function type: {i32, i32} -> {i32}.\nfunctype := wasmedge.NewFunctionType(\n  []wasmedge.ValType{wasmedge.ValType_I32, wasmedge.ValType_I32},\n  []wasmedge.ValType{wasmedge.ValType_I32},\n)\n\n// Create a function context with the function type and host function body.\n// The third parameter is the pointer to the additional data.\n// Developers should guarantee the life cycle of the data, and it can be\n// `nil` if the external data is not needed.\n// The last parameter can be 0 if developers do not need the cost measuring.\nfunc_add := wasmedge.NewFunction(functype, host_add, nil, 0)\n\n// If the function object is not added into an import object object, it should be released.\nfunc_add.Release()\nfunctype.Release()\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Import object object"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportObject")," object holds an exporting module name and the instances. Developers can add the ",(0,i.kt)("inlineCode",{parentName:"p"},"Function"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Memory"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Global")," instances with their exporting names."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// Host function body definition.\nfunc host_add(data interface{}, mem *wasmedge.Memory, params []interface{}) ([]interface{}, wasmedge.Result) {\n  // add: i32, i32 -> i32\n  res := params[0].(int32) + params[1].(int32)\n\n  // Set the returns\n  returns := make([]interface{}, 1)\n  returns[0] = res\n\n  // Return\n  return returns, wasmedge.Result_Success\n}\n\n// Create the import object with the module name "module".\nimpobj := wasmedge.NewImportObject("module")\n\n// Create and add a function instance into the import object with export name "add".\nfunctype := wasmedge.NewFunctionType(\n  []wasmedge.ValType{wasmedge.ValType_I32, wasmedge.ValType_I32},\n  []wasmedge.ValType{wasmedge.ValType_I32},\n)\nhostfunc := wasmedge.NewFunction(functype, host_add, nil, 0)\nfunctype.Release()\nimpobj.AddFunction("add", hostfunc)\n\n// Create and add a table instance into the import object with export name "table".\ntabtype := wasmedge.NewTableType(wasmedge.RefType_FuncRef ,wasmedge.NewLimitWithMax(10, 20))\nhosttab := wasmedge.NewTable(tabtype)\ntabtype.Release()\nimpobj.AddTable("table", hosttab)\n\n// Create and add a memory instance into the import object with export name "memory".\nmemtype := wasmedge.NewMemoryType(wasmedge.NewLimitWithMax(1, 2))\nhostmem := wasmedge.NewMemory(memtype)\nmemtype.Release()\nimpobj.AddMemory("memory", hostmem)\n\n// Create and add a global instance into the import object with export name "global".\nglobtype := wasmedge.NewGlobalType(wasmedge.ValType_I32, wasmedge.ValMut_Var)\nhostglob := wasmedge.NewGlobal(globtype, uint32(666))\nglobtype.Release()\nimpobj.AddGlobal("global", hostglob)\n\n// The import objects should be released.\n// Developers should __NOT__ release the instances added into the import object objects.\nimpobj.Release()\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Specified import object"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.NewWasiImportObject()")," API can create and initialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"WASI")," import object.\n",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge.NewWasmEdgeProcessImportObject()")," API can create and initialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge_process")," import object.\nDevelopers can create these import object objects and register them into the ",(0,i.kt)("inlineCode",{parentName:"p"},"Store")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"VM")," objects rather than adjust the settings in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Configure")," objects."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'wasiobj := wasmedge.NewWasiImportObject(\n  os.Args[1:],     // The args\n  os.Environ(),    // The envs\n  []string{".:."}, // The mapping preopens\n)\nprocobj := wasmedge.NewWasmEdgeProcessImportObject(\n  []string{"ls", "echo"}, // The allowed commands\n  false,                  // Not to allow all commands\n)\n\n// Register the WASI and WasmEdge_Process into the VM object.\nvm := wasmedge.NewVM()\nvm.RegisterImport(wasiobj)\nvm.RegisterImport(procobj)\n\n// ... Execute some WASM functions.\n\n// Get the WASI exit code.\nexitcode := wasiobj.WasiGetExitCode()\n// The `exitcode` will be 0 if the WASI function "_start" execution has no error.\n// Otherwise, it will return with the related exit code.\n\nvm.Release()\n// The import objects should be deleted.\nwasiobj.Release()\nprocobj.Release()\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Example"),(0,i.kt)("p",{parentName:"li"},"Create a new Go project first:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir wasmedge_test && cd wasmedge_test\ngo mod init wasmedge_test\n")),(0,i.kt)("p",{parentName:"li"},"Assume that there is a simple WASM from the WAT as following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-wasm"},'(module\n  (type $t0 (func (param i32 i32) (result i32)))\n  (import "extern" "func-add" (func $f-add (type $t0)))\n  (func (export "addTwo") (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    call $f-add)\n)\n')),(0,i.kt)("p",{parentName:"li"},"Create and edit the Go file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.go")," as following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\n// Host function body definition.\nfunc host_add(data interface{}, mem *wasmedge.Memory, params []interface{}) ([]interface{}, wasmedge.Result) {\n  // add: i32, i32 -> i32\n  res := params[0].(int32) + params[1].(int32)\n\n  // Set the returns\n  returns := make([]interface{}, 1)\n  returns[0] = res\n\n  // Return\n  return returns, wasmedge.Result_Success\n}\n\nfunc main() {\n  // Create the VM object.\n  vm := wasmedge.NewVM()\n\n  // The WASM module buffer.\n  wasmbuf := []byte{\n    /* WASM header */\n    0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00,\n    /* Type section */\n    0x01, 0x07, 0x01,\n    /* function type {i32, i32} -> {i32} */\n    0x60, 0x02, 0x7F, 0x7F, 0x01, 0x7F,\n    /* Import section */\n    0x02, 0x13, 0x01,\n    /* module name: "extern" */\n    0x06, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E,\n    /* extern name: "func-add" */\n    0x08, 0x66, 0x75, 0x6E, 0x63, 0x2D, 0x61, 0x64, 0x64,\n    /* import desc: func 0 */\n    0x00, 0x00,\n    /* Function section */\n    0x03, 0x02, 0x01, 0x00,\n    /* Export section */\n    0x07, 0x0A, 0x01,\n    /* export name: "addTwo" */\n    0x06, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6F,\n    /* export desc: func 0 */\n    0x00, 0x01,\n    /* Code section */\n    0x0A, 0x0A, 0x01,\n    /* code body */\n    0x08, 0x00, 0x20, 0x00, 0x20, 0x01, 0x10, 0x00, 0x0B,\n  }\n\n  // Create the import object with the module name "extern".\n  impobj := wasmedge.NewImportObject("extern")\n\n  // Create and add a function instance into the import object with export name "func-add".\n  functype := wasmedge.NewFunctionType(\n    []wasmedge.ValType{wasmedge.ValType_I32, wasmedge.ValType_I32},\n    []wasmedge.ValType{wasmedge.ValType_I32},\n  )\n  hostfunc := wasmedge.NewFunction(functype, host_add, nil, 0)\n  functype.Release()\n  impobj.AddFunction("func-add", hostfunc)\n\n  // Register the import object into VM.\n  vm.RegisterImport(impobj)\n\n  res, err := vm.RunWasmBuffer(wasmbuf, "addTwo", uint32(1234), uint32(5678))\n  if err == nil {\n    fmt.Println("Get the result:", res[0].(int32))\n  } else {\n    fmt.Println("Error message:", err.Error())\n  }\n\n  impobj.Release()\n  vm.Release()\n}\n')),(0,i.kt)("p",{parentName:"li"},"Then you can build and run the Golang application with the WasmEdge Golang SDK:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\n$ go build\n$ ./wasmedge_test\nGet the result: 6912\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Host Data Example"),(0,i.kt)("p",{parentName:"li"},"Developers can set a external data object to the function object, and access to the object in the function body.\nAssume that edit the Go file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.go")," above:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\n// Host function body definition.\nfunc host_add(data interface{}, mem *wasmedge.Memory, params []interface{}) ([]interface{}, wasmedge.Result) {\n  // add: i32, i32 -> i32\n  res := params[0].(int32) + params[1].(int32)\n\n  // Set the returns\n  returns := make([]interface{}, 1)\n  returns[0] = res\n\n  // Also set the result to the data.\n  *data.(*int32) = res\n\n  // Return\n  return returns, wasmedge.Result_Success\n}\n\nfunc main() {\n  // Create the VM object.\n  vm := wasmedge.NewVM()\n\n  // The WASM module buffer.\n  wasmbuf := []byte{\n    /* WASM header */\n    0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00,\n    /* Type section */\n    0x01, 0x07, 0x01,\n    /* function type {i32, i32} -> {i32} */\n    0x60, 0x02, 0x7F, 0x7F, 0x01, 0x7F,\n    /* Import section */\n    0x02, 0x13, 0x01,\n    /* module name: "extern" */\n    0x06, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E,\n    /* extern name: "func-add" */\n    0x08, 0x66, 0x75, 0x6E, 0x63, 0x2D, 0x61, 0x64, 0x64,\n    /* import desc: func 0 */\n    0x00, 0x00,\n    /* Function section */\n    0x03, 0x02, 0x01, 0x00,\n    /* Export section */\n    0x07, 0x0A, 0x01,\n    /* export name: "addTwo" */\n    0x06, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6F,\n    /* export desc: func 0 */\n    0x00, 0x01,\n    /* Code section */\n    0x0A, 0x0A, 0x01,\n    /* code body */\n    0x08, 0x00, 0x20, 0x00, 0x20, 0x01, 0x10, 0x00, 0x0B,\n  }\n\n  // The additional data to set into the host function.\n  var data int32 = 0\n\n  // Create the import object with the module name "extern".\n  impobj := wasmedge.NewImportObject("extern")\n\n  // Create and add a function instance into the import object with export name "func-add".\n  functype := wasmedge.NewFunctionType(\n    []wasmedge.ValType{wasmedge.ValType_I32, wasmedge.ValType_I32},\n    []wasmedge.ValType{wasmedge.ValType_I32},\n  )\n  hostfunc := wasmedge.NewFunction(functype, host_add, &data, 0)\n  functype.Release()\n  impobj.AddFunction("func-add", hostfunc)\n\n  // Register the import object into VM.\n  vm.RegisterImport(impobj)\n\n  res, err := vm.RunWasmBuffer(wasmbuf, "addTwo", uint32(1234), uint32(5678))\n  if err == nil {\n    fmt.Println("Get the result:", res[0].(int32))\n  } else {\n    fmt.Println("Error message:", err.Error())\n  }\n  fmt.Println("Data value:", data)\n\n  impobj.Release()\n  vm.Release()\n}\n')),(0,i.kt)("p",{parentName:"li"},"Then you can build and run the Golang application with the WasmEdge Golang SDK:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/second-state/WasmEdge-go/wasmedge@v0.9.2\n$ go build\n$ ./wasmedge_test\nGet the result: 6912\nData value: 6912\n")))),(0,i.kt)("h2",{id:"wasmedge-aot-compiler"},"WasmEdge AOT Compiler"),(0,i.kt)("p",null,"In this partition, we will introduce the WasmEdge AOT compiler and the options in Go.\nWasmEdge runs the WASM files in interpreter mode, and WasmEdge also supports the AOT (ahead-of-time) mode running without modifying any code.\nThe WasmEdge AOT (ahead-of-time) compiler compiles the WASM files for running in AOT mode which is much faster than interpreter mode. Developers can compile the WASM files into the compiled-WASM files in shared library format for universal WASM format for the AOT mode execution."),(0,i.kt)("h3",{id:"compilation-example"},"Compilation Example"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/tree/master/go_WasmAOT"},"go_WasmAOT example")," provide a tool for compiling a WASM file."),(0,i.kt)("h3",{id:"compiler-options"},"Compiler Options"),(0,i.kt)("p",null,"Developers can set options for AOT compilers such as optimization level and output format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"const (\n  // Disable as many optimizations as possible.\n  CompilerOptLevel_O0 = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_O0)\n  // Optimize quickly without destroying debuggability.\n  CompilerOptLevel_O1 = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_O1)\n  // Optimize for fast execution as much as possible without triggering significant incremental compile time or code size growth.\n  CompilerOptLevel_O2 = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_O2)\n  // Optimize for fast execution as much as possible.\n  CompilerOptLevel_O3 = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_O3)\n  // Optimize for small code size as much as possible without triggering significant incremental compile time or execution time slowdowns.\n  CompilerOptLevel_Os = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_Os)\n  // Optimize for small code size as much as possible.\n  CompilerOptLevel_Oz = CompilerOptimizationLevel(C.WasmEdge_CompilerOptimizationLevel_Oz)\n)\n\nconst (\n  // Native dynamic library format.\n  CompilerOutputFormat_Native = CompilerOutputFormat(C.WasmEdge_CompilerOutputFormat_Native)\n  // WebAssembly with AOT compiled codes in custom section.\n  CompilerOutputFormat_Wasm = CompilerOutputFormat(C.WasmEdge_CompilerOutputFormat_Wasm)\n)\n")),(0,i.kt)("p",null,"Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"#configurations"},"AOT compiler options configuration")," for details."))}d.isMDXComponent=!0}}]);