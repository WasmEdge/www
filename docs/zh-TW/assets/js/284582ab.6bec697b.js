"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[996],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(r),h=a,d=u["".concat(p,".").concat(h)]||u[h]||m[h]||s;return r?n.createElement(d,o(o({ref:t},c),{},{components:r})):n.createElement(d,o({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=h;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},17929:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const s={sidebar_position:2},o="Server",i={unversionedId:"develop/rust/http_service/server",id:"develop/rust/http_service/server",title:"Server",description:"For WasmEdge to become a cloud-native runtime for microservices, it needs to support HTTP servers. By its very nature, the HTTP server is always asynchronous (non-blocking -- so that it can handle concurrent requests). This chapter will cover HTTP servers using popular Rust APIs.",source:"@site/docs/develop/rust/http_service/server.md",sourceDirName:"develop/rust/http_service",slug:"/develop/rust/http_service/server",permalink:"/docs/zh-TW/develop/rust/http_service/server",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/develop/rust/http_service/server.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"developSidebar",previous:{title:"HTTP client",permalink:"/docs/zh-TW/develop/rust/http_service/client"},next:{title:"Socket networking",permalink:"/docs/zh-TW/category/socket-networking"}},p={},l=[{value:"The axum API",id:"the-axum-api",level:2},{value:"The hyper API",id:"the-hyper-api",level:2}],c={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"server"},"Server"),(0,a.kt)("p",null,"For WasmEdge to become a cloud-native runtime for microservices, it needs to support HTTP servers. By its very nature, the HTTP server is always asynchronous (non-blocking -- so that it can handle concurrent requests). This chapter will cover HTTP servers using popular Rust APIs."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#the-warp-api"},"The axum API")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#the-hyper-api"},"The hyper API"))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Before we start, ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh-TW/develop/rust/setup"},"you need to have Rust and WasmEdge installed"),".\nMake sure that you read the ",(0,a.kt)("a",{parentName:"p",href:"../setup#special-notes-for-networking-apps"},"special notes on networking apps")," especially if you are compiling Rust programs on a Mac.")),(0,a.kt)("h2",{id:"the-axum-api"},"The axum API"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tokio-rs/axum"},"axum")," crate is the most popular HTTP server framework in the Rust Tokio ecosystem.\nIt is also the web framework for many popular services such as the ",(0,a.kt)("a",{parentName:"p",href:"https://flows.network"},"flows.network")," serverless platform for workflow functions."),(0,a.kt)("p",null,"Use the axum API to create an asynchronous HTTP server. Build and run ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/wasmedge_hyper_demo/blob/main/server-axum/"},"the example")," in WasmEdge as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/WasmEdge/wasmedge_hyper_demo\ncd wasmedge_hyper_demo/server-axum\n\n# Build the Rust code\nRUSTFLAGS="--cfg wasmedge --cfg tokio_unstable" cargo build --target wasm32-wasi --release\n# Use the AoT compiler for better performance\nwasmedge compile target/wasm32-wasi/release/wasmedge_axum_server.wasm wasmedge_axum_server.wasm\n\n# Run the example\nwasmedge wasmedge_axum_server.wasm\n')),(0,a.kt)("p",null,"Then from another terminal, you can request the server. The HTTP server echoes the request data and sends back the response."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl http://localhost:8080/echo -X POST -d "WasmEdge"\nWasmEdge\n')),(0,a.kt)("p",null,"In your Rust application, you will apply a few patches developed by the WasmEdge community to replace\nPOSIX sockets with WasmEdge sockets in standard libraries. With those patches, you can then\nuse the official ",(0,a.kt)("inlineCode",{parentName:"p"},"tokio")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"axum")," crates."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[patch.crates-io]\ntokio = { git = "https://github.com/second-state/wasi_tokio.git", branch = "v1.36.x" }\nsocket2 = { git = "https://github.com/second-state/socket2.git", branch = "v0.5.x" }\nhyper = { git = "https://github.com/second-state/wasi_hyper.git", branch = "v0.14.x" }\n\n[dependencies]\naxum = "0.6"\nbytes = "1"\nfutures-util = "0.3.30"\ntokio = { version = "1", features = ["rt", "macros", "net", "time", "io-util"]}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/wasmedge_hyper_demo/blob/main/server-axum/src/main.rs"},"Rust example code")," below shows an HTTP server that responds to incoming requests for the ",(0,a.kt)("inlineCode",{parentName:"p"},"/")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/echo")," URL endpoints."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[tokio::main(flavor = "current_thread")]\nasync fn main() {\n    // build our application with a route\n    let app = Router::new()\n        .route("/", get(help))\n        .route("/echo", post(echo));\n\n    // run it\n    let addr = "0.0.0.0:8080";\n    let tcp_listener = TcpListener::bind(addr).await.unwrap();\n    println!("listening on {}", addr);\n    axum::Server::from_tcp(tcp_listener.into_std().unwrap())\n        .unwrap()\n        .serve(app.into_make_service())\n        .await\n        .unwrap();\n}\n')),(0,a.kt)("p",null,"The  ",(0,a.kt)("inlineCode",{parentName:"p"},"echo()")," function is called when a ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," request is received at ",(0,a.kt)("inlineCode",{parentName:"p"},"/echo"),". The function receives and processes\nthe request body and returns bytes that are sent back as the response message."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"async fn echo(mut stream: BodyStream) -> Bytes {\n    if let Some(Ok(s)) = stream.next().await {\n        s\n    } else {\n        Bytes::new()\n    }\n}\n")),(0,a.kt)("h2",{id:"the-hyper-api"},"The hyper API"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"hyper")," crate is an excellent library for building HTTP servers using customizable low level APIs. Build and run ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/wasmedge_hyper_demo/blob/main/server/"},"the example")," in WasmEdge as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/WasmEdge/wasmedge_hyper_demo\ncd wasmedge_hyper_demo/server\n\n# Build the Rust code\nRUSTFLAGS="--cfg wasmedge --cfg tokio_unstable" cargo build --target wasm32-wasi --release\n# Use the AoT compiler to get better performance\nwasmedge compile target/wasm32-wasi/release/wasmedge_hyper_server.wasm wasmedge_hyper_server.wasm\n\n# Run the example\nwasmedge wasmedge_hyper_server.wasm\n')),(0,a.kt)("p",null,"Then from another terminal, you can request the server. The HTTP server echoes the request data and sends back the response."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl http://localhost:8080/echo -X POST -d "WasmEdge"\nWasmEdge\n')),(0,a.kt)("p",null,"In your Rust application, import the ",(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/hyper"},"hyper")," and ",(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/tokio"},"tokio")," crates, as well as the WasmEdge patches. Just add the following lines to your ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[patch.crates-io]\ntokio = { git = "https://github.com/second-state/wasi_tokio.git", branch = "v1.36.x" }\nsocket2 = { git = "https://github.com/second-state/socket2.git", branch = "v0.5.x" }\nhyper = { git = "https://github.com/second-state/wasi_hyper.git", branch = "v0.14.x" }\n\n[dependencies]\nhyper = { version = "0.14", features = ["full"]}\ntokio = { version = "1", features = ["rt", "macros", "net", "time", "io-util"]}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/wasmedge_hyper_demo/blob/main/server/src/main.rs"},"Rust example code")," below shows an HTTP server that echoes back any incoming request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'async fn echo(req: Request<Body>) -> Result<Response<Body>, hyper::Error> {\n    match (req.method(), req.uri().path()) {\n        // Serve some instructions at /\n        (&Method::GET, "/") => Ok(Response::new(Body::from(\n            "Try POSTing data to /echo such as: `curl localhost:8080/echo -XPOST -d \'hello world\'`",\n        ))),\n\n        // Simply echo the body back to the client.\n        (&Method::POST, "/echo") => Ok(Response::new(req.into_body())),\n\n        (&Method::POST, "/echo/reversed") => {\n            let whole_body = hyper::body::to_bytes(req.into_body()).await?;\n\n            let reversed_body = whole_body.iter().rev().cloned().collect::<Vec<u8>>();\n            Ok(Response::new(Body::from(reversed_body)))\n        }\n\n        // Return the 404 Not Found for other routes.\n        _ => {\n            let mut not_found = Response::default();\n            *not_found.status_mut() = StatusCode::NOT_FOUND;\n            Ok(not_found)\n        }\n    }\n}\n')))}m.isMDXComponent=!0}}]);