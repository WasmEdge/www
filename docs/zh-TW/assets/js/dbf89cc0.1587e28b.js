"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[8539],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=l,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:l,r[1]=o;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},52181:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(87462),l=(n(67294),n(3905));const i={sidebar_position:2},r="Install and uninstall WasmEdge",o={unversionedId:"start/install",id:"start/install",title:"Install and uninstall WasmEdge",description:"This chapter will discuss ways to install and uninstall the WasmEdge Runtime on various OSes and platforms. We will cover how to install plug-ins to WasmEdge.",source:"@site/docs/start/install.md",sourceDirName:"start",slug:"/start/install",permalink:"/docs/zh-TW/start/install",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/start/install.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"startSidebar",previous:{title:"Getting Started with WasmEdge",permalink:"/docs/zh-TW/start/overview"},next:{title:"Getting Started with WasmEdge",permalink:"/docs/zh-TW/category/getting-started-with-wasmedge"}},s={},d=[{value:"Install",id:"install",level:2},{value:"Generic Linux and MacOS",id:"generic-linux-and-macos",level:3},{value:"Install for all users",id:"install-for-all-users",level:4},{value:"Install a specific version of WasmEdge",id:"install-a-specific-version-of-wasmedge",level:4},{value:"Install via Nix",id:"install-via-nix",level:4},{value:"Install WasmEdge with plug-ins",id:"install-wasmedge-with-plug-ins",level:4},{value:"Windows",id:"windows",level:3},{value:"Fedora and Red Hat Linux",id:"fedora-and-red-hat-linux",level:3},{value:"What&#39;s installed",id:"whats-installed",level:2},{value:"Uninstall",id:"uninstall",level:2},{value:"Appendix: Installing the Dependencies",id:"appendix-installing-the-dependencies",level:2},{value:"GGML Dependencies",id:"ggml-dependencies",level:3},{value:"TensorFlow-Lite Dependencies",id:"tensorflow-lite-dependencies",level:3},{value:"TensorFlow Dependencies",id:"tensorflow-dependencies",level:3},{value:"OpenVINO Dependencies",id:"openvino-dependencies",level:3},{value:"PyTorch Dependencies",id:"pytorch-dependencies",level:3},{value:"Piper Dependencies",id:"piper-dependencies",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}],p={toc:d},m="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"install-and-uninstall-wasmedge"},"Install and uninstall WasmEdge"),(0,l.kt)("p",null,"This chapter will discuss ways to install and uninstall the WasmEdge Runtime on various OSes and platforms. We will cover how to install plug-ins to WasmEdge."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Docker Desktop 4.15+ already has WasmEdge bundled in its distribution binary. If you use Docker Desktop, you will not need to install WasmEdge separately. Check out ",(0,l.kt)("a",{parentName:"p",href:"/docs/zh-TW/start/build-and-run/docker_wasm"},"how to run WasmEdge apps in Docker Desktop."))),(0,l.kt)("h2",{id:"install"},"Install"),(0,l.kt)("p",null,"You can install the WasmEdge Runtime on any generic Linux and MacOS platforms. If you use Windows 10 or Fedora / Red Hat Linux systems, you can install with their default package managers."),(0,l.kt)("h3",{id:"generic-linux-and-macos"},"Generic Linux and MacOS"),(0,l.kt)("p",null,"The easiest way to install WasmEdge is to run the following command. Your system should have ",(0,l.kt)("inlineCode",{parentName:"p"},"git")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"curl")," as prerequisites."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash\n")),(0,l.kt)("p",null,"Run the following command to make the installed binary available in the current session."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"source $HOME/.wasmedge/env\n")),(0,l.kt)("h4",{id:"install-for-all-users"},"Install for all users"),(0,l.kt)("p",null,"WasmEdge is installed in the ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge")," directory by default. You can install it into a system directory, such as ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local")," to make it available to all users. To specify an install directory, run the ",(0,l.kt)("inlineCode",{parentName:"p"},"install.sh")," script with the ",(0,l.kt)("inlineCode",{parentName:"p"},"-p")," flag. You will need to run the following commands as the ",(0,l.kt)("inlineCode",{parentName:"p"},"root")," user or ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo")," since they are written write into system directories."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -p /usr/local\n")),(0,l.kt)("h4",{id:"install-a-specific-version-of-wasmedge"},"Install a specific version of WasmEdge"),(0,l.kt)("p",null,"The WasmEdge installer script will install the latest official release by default. You could install a specific version of WasmEdge, including pre-releases or old releases by passing the ",(0,l.kt)("inlineCode",{parentName:"p"},"-v")," argument to the installer script. Here is an example."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"VERSION=0.14.1\ncurl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -v $VERSION\n")),(0,l.kt)("p",null,"Suppose you are interested in the latest builds from the ",(0,l.kt)("inlineCode",{parentName:"p"},"HEAD")," of the ",(0,l.kt)("inlineCode",{parentName:"p"},"master")," branch, which is basically WasmEdge's nightly builds. In that case, you can download the release package directly from our Github Action's CI artifact. ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/actions/runs/2969775464#artifacts"},"Here is an example"),"."),(0,l.kt)("h4",{id:"install-via-nix"},"Install via Nix"),(0,l.kt)("p",null,"For nix/nixos users, we also provide a ",(0,l.kt)("inlineCode",{parentName:"p"},"flake.nix")," in repository, so you can install WasmEdge via:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"nix profile install github:WasmEdge/WasmEdge\n")),(0,l.kt)("h4",{id:"install-wasmedge-with-plug-ins"},"Install WasmEdge with plug-ins"),(0,l.kt)("p",null,"WasmEdge plug-ins are pre-built native modules that provide additional functionalities to the WasmEdge Runtime. To install plug-ins with the runtime, you can pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"--plugins")," parameter in the installer. For example, the command below installs the ",(0,l.kt)("inlineCode",{parentName:"p"},"wasi_nn-ggml")," plug-in to enable LLM (Large Language Model) inference."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- --plugins wasi_nn-ggml\n")),(0,l.kt)("p",null,"To install multiple plug-ins, you can pass a list of plug-ins with the ",(0,l.kt)("inlineCode",{parentName:"p"},"--plugins")," option. For example, the following command installs the ",(0,l.kt)("inlineCode",{parentName:"p"},"wasi_logging")," and the ",(0,l.kt)("inlineCode",{parentName:"p"},"wasi_nn-ggml")," plug-ins. The ",(0,l.kt)("inlineCode",{parentName:"p"},"wasi_logging")," plug-in allows the Rust ",(0,l.kt)("a",{parentName:"p",href:"https://crates.io/crates/log"},"log::Log")," API to compile into Wasm and run in WasmEdge."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- --plugins wasi_logging wasi_nn-ggml\n")),(0,l.kt)("p",null,"The installer downloads the plug-in files from the WasmEdge release on GitHub, unzips them, and then copies them over to the ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.wasmedge/plugin/")," folder (for user install) and to the ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/")," folder (for system install)."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"WASI-NN")," related plug-ins are all EXCLUSIVE. Users can only install one of the WASI-NN backends."),(0,l.kt)("p",{parentName:"admonition"},"After WasmEdge ",(0,l.kt)("inlineCode",{parentName:"p"},"0.14.1"),", the WASI-Logging plug-in is bundled into the WasmEdge shared library and is not necessary to be installed."),(0,l.kt)("p",{parentName:"admonition"},"Some of plug-ins need dependencies. Please follow the guide in the comment column to install the dependencies.")),(0,l.kt)("p",null,"The following lists are the WasmEdge official released plug-ins. Users can install them easily by the parameters of ",(0,l.kt)("inlineCode",{parentName:"p"},"--plugins")," option of installer."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Plug-in"),(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Supported Platforms"),(0,l.kt)("th",{parentName:"tr",align:null},"Versions"),(0,l.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-Logging"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_logging")),(0,l.kt)("td",{parentName:"tr",align:null},"All"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Bundled into WasmEdge library since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.14.1"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-Crypto"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_crypto")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.10.1")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-NN OpenVINO backend"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_nn-openvino")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", Ubuntu only)"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.10.1")),(0,l.kt)("td",{parentName:"tr",align:null},"Users should install the ",(0,l.kt)("a",{parentName:"td",href:"#openvino-dependencies"},"OpenVINO dependency"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-NN PyTorch backend"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_nn-pytorch")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.11.1")),(0,l.kt)("td",{parentName:"tr",align:null},"Users should install the ",(0,l.kt)("a",{parentName:"td",href:"#pytorch-dependencies"},"PyTorch dependency"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-NN TensorFlow-Lite backend"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_nn-tensorflowlite")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.11.2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tensorflow-lite-dependencies"},"Dependency")," installed automatically by installer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-NN GGML backend"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_nn-ggml")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.4")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#ggml-dependencies"},"Notes for the dependency"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-NN Piper backend"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_nn-piper")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.14.1")),(0,l.kt)("td",{parentName:"tr",align:null},"Users should install the ",(0,l.kt)("a",{parentName:"td",href:"#piper-dependencies"},"Piper dependency"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-NN Whisper backend"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_nn-whisper")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.14.1")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-NN Burn.rs backend (Squeezenet)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_nn_burnrs-squeezenet")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", Ubuntu only)"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.14.1")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASI-NN Burn.rs backend (Whisper)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasi_nn_burnrs-whisper")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", Ubuntu only)"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.14.1")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Ffmpeg"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_ffmpeg")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.14.0")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Image"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_image")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.0")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"LLM"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_llmc")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.14.1")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OpenCV mini"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_opencvmini")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.3")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Process"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_process")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.10.0")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Stable Diffusion"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_stablediffusion")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.14.1")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TensorFlow"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_tensorflow")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tensorflow-dependencies"},"Dependency")," installed automatically by installer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TensorFlow-Lite"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_tensorflowlite")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tensorflow-lite-dependencies"},"Dependency")," installed automatically by installer.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Zlib"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_zlib")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"aarch64"),"), MacOS (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"arm64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.5")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WASM-eBPF"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasm_bpf")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.2")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Rust TLS"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wasmedge_rustls")),(0,l.kt)("td",{parentName:"tr",align:null},"Linux (",(0,l.kt)("inlineCode",{parentName:"td"},"x86_64"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"Since ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.0")),(0,l.kt)("td",{parentName:"tr",align:null},"Until ",(0,l.kt)("inlineCode",{parentName:"td"},"0.13.5"),". DEPRECATED.")))),(0,l.kt)("p",null,"For further details of each plug-ins, please follow the ",(0,l.kt)("a",{parentName:"p",href:"/docs/zh-TW/start/wasmedge/extensions/plugins"},"plug-in page"),"."),(0,l.kt)("h3",{id:"windows"},"Windows"),(0,l.kt)("p",null,"For ",(0,l.kt)("inlineCode",{parentName:"p"},"Windows 10"),", you could use Windows Package Manager Client (aka ",(0,l.kt)("inlineCode",{parentName:"p"},"winget.exe"),") to install WasmEdge with one single command in your terminal."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"winget install wasmedge\n")),(0,l.kt)("p",null,"To install plug-ins, you can download plug-in binary modules from the WasmEdge release page, unzip them, and then copy them to ",(0,l.kt)("inlineCode",{parentName:"p"},"C:\\Program Files\\WasmEdge\\lib"),"."),(0,l.kt)("h3",{id:"fedora-and-red-hat-linux"},"Fedora and Red Hat Linux"),(0,l.kt)("p",null,"WasmEdge is now an official package on Fedora 36, Fedora 37, Fedora 38, Fedora EPEL 8, and Fedora EPEL 9. Check out the stable version ",(0,l.kt)("a",{parentName:"p",href:"https://src.fedoraproject.org/rpms/wasmedge"},"here"),". To install WasmEdge on Fedora, run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"dnf install wasmedge\n")),(0,l.kt)("p",null,"For more usages, please check out Fedora docs."),(0,l.kt)("p",null,"To install plug-ins, you can download plug-in binary modules from the WasmEdge release page, unzip them, and then copy them over to ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/"),"."),(0,l.kt)("h2",{id:"whats-installed"},"What's installed"),(0,l.kt)("p",null,"If you install into the ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge")," directory, you will have the following directories and files after installation:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge/bin")," directory contains the WasmEdge Runtime CLI executable files. You can copy and move them around on your file system."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedge")," tool is the standard WasmEdge runtime. You can use it from the CLI."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Execute a WASM file: ",(0,l.kt)("inlineCode",{parentName:"li"},"wasmedge --dir .:. app.wasm")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedgec")," tool is the ahead-of-time (AOT) compiler to compile a ",(0,l.kt)("inlineCode",{parentName:"p"},".wasm")," file into a native ",(0,l.kt)("inlineCode",{parentName:"p"},".so")," file (or ",(0,l.kt)("inlineCode",{parentName:"p"},".dylib")," on MacOS, ",(0,l.kt)("inlineCode",{parentName:"p"},".dll")," on Windows, or ",(0,l.kt)("inlineCode",{parentName:"p"},".wasm")," as the universal WASM format on all platforms). The ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedge")," can then execute the output file."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Compile a WASM file into a AOT-compiled WASM: ",(0,l.kt)("inlineCode",{parentName:"li"},"wasmedgec app.wasm app.so")),(0,l.kt)("li",{parentName:"ul"},"Execute the WASM in AOT mode: ",(0,l.kt)("inlineCode",{parentName:"li"},"wasmedge --dir .:. app.so"))),(0,l.kt)("admonition",{parentName:"li",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The usage of ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedgec")," is equal to ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedge compile"),". We decide to deprecate ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedgec")," in the future."))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge/lib")," directory contains WasmEdge shared libraries and dependency libraries. They are useful for WasmEdge SDKs to launch WasmEdge programs and functions from host applications.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge/include")," directory contains the WasmEdge header files. They are useful for WasmEdge SDKs.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge/plugin")," directory contains the WasmEdge plug-ins. They are loadable extensions for WasmEdge SDKs and will automatically be loaded when running the WasmEdge CLI."))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"You could also change it to ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local")," if you did a system-wide install.\nIf you used ",(0,l.kt)("inlineCode",{parentName:"p"},"winget")," to install WasmEdge, the files are located at ",(0,l.kt)("inlineCode",{parentName:"p"},"C:\\Program Files\\WasmEdge"),".")),(0,l.kt)("h2",{id:"uninstall"},"Uninstall"),(0,l.kt)("p",null,"To uninstall WasmEdge, you can run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bash <(curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/uninstall.sh)\n")),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedge")," binary is not in ",(0,l.kt)("inlineCode",{parentName:"p"},"PATH")," and it wasn't installed in the default ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge")," folder, then you must provide the installation path."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bash <(curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/uninstall.sh) -p /path/to/parent/folder\n")),(0,l.kt)("p",null,"If you wish to uninstall uninteractively, you can pass in the ",(0,l.kt)("inlineCode",{parentName:"p"},"--quick")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"-q")," flag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bash <(curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/uninstall.sh) -q\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If a parent folder of the ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedge")," binary contains ",(0,l.kt)("inlineCode",{parentName:"p"},".wasmedge"),", the folder will be considered for removal. For example, the script altogether removes the default ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.wasmedge")," folder.")),(0,l.kt)("p",null,"If you used ",(0,l.kt)("inlineCode",{parentName:"p"},"dnf")," to install WasmEdge on Fedora and Red Hat Linux, run the following command to uninstall it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"dnf remove wasmedge\n")),(0,l.kt)("p",null,"If you used ",(0,l.kt)("inlineCode",{parentName:"p"},"winget")," to install WasmEdge on Windows, run the following command to uninstall it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"winget uninstall wasmedge\n")),(0,l.kt)("h2",{id:"appendix-installing-the-dependencies"},"Appendix: Installing the Dependencies"),(0,l.kt)("h3",{id:"ggml-dependencies"},"GGML Dependencies"),(0,l.kt)("p",null,"The installer from WasmEdge 0.13.5 will detect CUDA automatically. If CUDA is detected, the installer will always attempt to install a CUDA-enabled version of the WASI-NN GGML plug-in."),(0,l.kt)("p",null,"If CPU is the only available hardware on your machine, the installer will install the pure CPU version of plugin instead."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"apt update && apt install -y libopenblas-dev # You may need sudo if the user is not root.\n")),(0,l.kt)("h3",{id:"tensorflow-lite-dependencies"},"TensorFlow-Lite Dependencies"),(0,l.kt)("p",null,"If you install the WASI-NN TensorflowLite or ",(0,l.kt)("inlineCode",{parentName:"p"},"WasmEdge-TensorFlowLite")," plug-in WITHOUT installer, you can download the shared libraries with the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"VERSION=TF-2.12.0-CC\n# For the WasmEdge versions before 0.13.0, please use the `TF-2.6.0-CC` version.\nPLATFORM=manylinux2014_x86_64\n# For the Linux aarch64 platforms, please use the `manylinux2014_aarch64`.\n# For the MacOS x86_64 platforms, please use the `darwin_x86_64`.\n# For the MacOS arm64 platforms, please use the `darwin_arm64`.\ncurl -s -L -O --remote-name-all https://github.com/second-state/WasmEdge-tensorflow-deps/releases/download/$VERSION/WasmEdge-tensorflow-deps-TFLite-$VERSION-$PLATFORM.tar.gz\ntar -zxf WasmEdge-tensorflow-deps-TFLite-$VERSION-$PLATFORM.tar.gz\nrm -f WasmEdge-tensorflow-deps-TFLite-$VERSION-$PLATFORM.tar.gz\n")),(0,l.kt)("p",null,"The shared library will be extracted in the current directory ",(0,l.kt)("inlineCode",{parentName:"p"},"./libtensorflowlite_c.so")," (or ",(0,l.kt)("inlineCode",{parentName:"p"},".dylib")," for MacOS) and ",(0,l.kt)("inlineCode",{parentName:"p"},"./libtensorflowlite_flex.so")," (after the ",(0,l.kt)("inlineCode",{parentName:"p"},"WasmEdge 0.13.0")," version). You can move the library to the installation path:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# If you installed wasmedge locally as above\nmv libtensorflowlite_c.so ~/.wasmedge/lib\nmv libtensorflowlite_flex.so ~/.wasmedge/lib\n\n# Or, if you installed wasmedge for all users in /usr/local/\nmv libtensorflowlite_c.so /usr/local/lib\nmv libtensorflowlite_flex.so /usr/local/lib\n\n# Or on MacOS platforms\nmv libtensorflowlite_c.dylib ~/.wasmedge/lib\nmv libtensorflowlite_flex.dylib ~/.wasmedge/lib\n")),(0,l.kt)("h3",{id:"tensorflow-dependencies"},"TensorFlow Dependencies"),(0,l.kt)("p",null,"If you install the ",(0,l.kt)("inlineCode",{parentName:"p"},"WasmEdge-Tensorflow")," plug-in WITHOUT installer, you can download the shared libraries with the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"VERSION=TF-2.12.0-CC\n# For the WasmEdge versions before 0.13.0, please use the `TF-2.6.0-CC` version.\nPLATFORM=manylinux2014_x86_64\n# For the Linux aarch64 platforms, please use the `manylinux2014_aarch64`.\n# For the MacOS x86_64 platforms, please use the `darwin_x86_64`.\n# For the MacOS arm64 platforms, please use the `darwin_arm64`.\ncurl -s -L -O --remote-name-all https://github.com/second-state/WasmEdge-tensorflow-deps/releases/download/TF-2.12.0-CC/WasmEdge-tensorflow-deps-TF-TF-$VERSION-$PLATFORM.tar.gz\ntar -zxf WasmEdge-tensorflow-deps-TF-TF-$VERSION-$PLATFORM.tar.gz\nrm -f WasmEdge-tensorflow-deps-TF-TF-$VERSION-$PLATFORM.tar.gz\n")),(0,l.kt)("p",null,"The shared library will be extracted in the current directory ",(0,l.kt)("inlineCode",{parentName:"p"},"./libtensorflow_cc.so.2.12.0")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"./libtensorflow_framework.so.2.12.0")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"Linux")," platforms, or ",(0,l.kt)("inlineCode",{parentName:"p"},"./libtensorflow_cc.2.12.0.dylib")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"./libtensorflow_framework.2.12.0.dylib")," on ",(0,l.kt)("inlineCode",{parentName:"p"},"MacOS")," platforms. You can move the library to the installation path:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# If you installed wasmedge locally as above\nmv libtensorflow_cc.so.2.12.0 ~/.wasmedge/lib\nmv libtensorflow_framework.so.2.12.0 ~/.wasmedge/lib\nln -s libtensorflow_cc.so.2.12.0 ~/.wasmedge/lib/libtensorflow_cc.so.2\nln -s libtensorflow_cc.so.2 ~/.wasmedge/lib/libtensorflow_cc.so\nln -s libtensorflow_framework.so.2.12.0 ~/.wasmedge/lib/libtensorflow_framework.so.2\nln -s libtensorflow_framework.so.2 ~/.wasmedge/lib/libtensorflow_framework.so\n\n# Or, if you installed wasmedge for all users in /usr/local/\nmv libtensorflow_cc.so.2.12.0 /usr/local/lib\nmv libtensorflow_framework.so.2.12.0 /usr/local/lib\nln -s libtensorflow_cc.so.2.12.0 /usr/local/lib/libtensorflow_cc.so.2\nln -s libtensorflow_cc.so.2 /usr/local/lib/libtensorflow_cc.so\nln -s libtensorflow_framework.so.2.12.0 /usr/local/lib/libtensorflow_framework.so.2\nln -s libtensorflow_framework.so.2 /usr/local/lib/libtensorflow_framework.so\n\n# Or on MacOS platforms\nmv libtensorflow_cc.2.12.0.dylib ~/.wasmedge/lib\nmv libtensorflow_framework.2.12.0.dylib ~/.wasmedge/lib\nln -s libtensorflow_cc.2.12.0.dylib ~/.wasmedge/lib/libtensorflow_cc.2.dylib\nln -s libtensorflow_cc.2.dylib ~/.wasmedge/lib/libtensorflow_cc.dylib\nln -s libtensorflow_framework.2.12.0.dylib ~/.wasmedge/lib/libtensorflow_framework.2.dylib\nln -s libtensorflow_framework.2.dylib ~/.wasmedge/lib/libtensorflow_framework.dylib\n")),(0,l.kt)("h3",{id:"openvino-dependencies"},"OpenVINO Dependencies"),(0,l.kt)("p",null,"The WASI-NN plug-in with OpenVINO backend depends on the OpenVINO C library to perform AI/ML computations. The following commands are for Ubuntu 20.04 and above to install ",(0,l.kt)("a",{parentName:"p",href:"https://docs.openvino.ai/2023.0/openvino_docs_install_guides_installing_openvino_apt.html"},"OpenVINO"),"(2023) dependencies."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB\nsudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB\necho "deb https://apt.repos.intel.com/openvino/2023 ubuntu20 main" | sudo tee /etc/apt/sources.list.d/intel-openvino-2023.list\nsudo apt update\nsudo apt-get -y install openvino\nldconfig\n')),(0,l.kt)("h3",{id:"pytorch-dependencies"},"PyTorch Dependencies"),(0,l.kt)("p",null,"The WASI-NN plug-in with PyTorch backend depends on the ",(0,l.kt)("inlineCode",{parentName:"p"},"libtorch")," C++ library to perform AI/ML computations. You need to install the ",(0,l.kt)("a",{parentName:"p",href:"https://pytorch.org/get-started/locally/"},"PyTorch 1.8.2 LTS")," dependencies for it to work properly."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'export PYTORCH_VERSION="1.8.2"\n# For the Ubuntu 20.04 or above, use the libtorch with cxx11 abi.\nexport PYTORCH_ABI="libtorch-cxx11-abi"\n# For the manylinux2014, please use the without cxx11 abi version:\n#   export PYTORCH_ABI="libtorch"\ncurl -s -L -O --remote-name-all https://download.pytorch.org/libtorch/lts/1.8/cpu/${PYTORCH_ABI}-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip\nunzip -q "${PYTORCH_ABI}-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip"\nrm -f "${PYTORCH_ABI}-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip"\nexport LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)/libtorch/lib\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"For the ",(0,l.kt)("inlineCode",{parentName:"p"},"Ubuntu 20.04")," or above versions, the WasmEdge installer will install the ",(0,l.kt)("inlineCode",{parentName:"p"},"Ubuntu")," version of WasmEdge and its plug-ins.\nFor other systems, the WasmEdge installer will install the ",(0,l.kt)("inlineCode",{parentName:"p"},"manylinux2014")," version, and you should get the ",(0,l.kt)("inlineCode",{parentName:"p"},"libtorch")," without ",(0,l.kt)("inlineCode",{parentName:"p"},"cxx11-abi"),".")),(0,l.kt)("h3",{id:"piper-dependencies"},"Piper Dependencies"),(0,l.kt)("p",null,"The WASI-NN plug-in with Piper backend depends on the ONNX Runtime C++ API. For installation instructions, please refer to the installation table on the ",(0,l.kt)("a",{parentName:"p",href:"https://onnxruntime.ai/getting-started"},"official website"),"."),(0,l.kt)("p",null,"Example of installing ONNX Runtime 1.14.1 on Ubuntu:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://github.com/microsoft/onnxruntime/releases/download/v1.14.1/onnxruntime-linux-x64-1.14.1.tgz\ntar zxf onnxruntime-linux-x64-1.14.1.tgz\nmv onnxruntime-linux-x64-1.14.1/include/* /usr/local/include/\nmv onnxruntime-linux-x64-1.14.1/lib/* /usr/local/lib/\nrm -rf onnxruntime-linux-x64-1.14.1.tgz onnxruntime-linux-x64-1.14.1\nldconfig\n")),(0,l.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,l.kt)("p",null,"Some users, especially in China, reported encountering the Connection refused error when trying to download the ",(0,l.kt)("inlineCode",{parentName:"p"},"install.sh")," from the ",(0,l.kt)("inlineCode",{parentName:"p"},"githubusercontent.com"),"."),(0,l.kt)("p",null,"Please make sure your network connection can access ",(0,l.kt)("inlineCode",{parentName:"p"},"github.com")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"githubusercontent.com")," via VPN."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# The error message\ncurl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash\ncurl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused\n")))}u.isMDXComponent=!0}}]);