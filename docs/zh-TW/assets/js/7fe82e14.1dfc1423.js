"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[2635],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,u=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=s(t),m=i,h=d["".concat(u,".").concat(m)]||d[m]||c[m]||l;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=m;var r={};for(var u in n)hasOwnProperty.call(n,u)&&(r[u]=n[u]);r.originalType=e,r[d]="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1480:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var a=t(87462),i=(t(67294),t(3905));const l={sidebar_position:2},o="Build with WASI-nn Plug-in",r={unversionedId:"contribute/source/plugin/wasi_nn",id:"contribute/source/plugin/wasi_nn",title:"Build with WASI-nn Plug-in",description:"The WASI-NN plug-in is a proposed WebAssembly System Interface (WASI) API for machine learning. It allows WebAssembly programs to access host-provided machine learning functions.",source:"@site/docs/contribute/source/plugin/wasi_nn.md",sourceDirName:"contribute/source/plugin",slug:"/contribute/source/plugin/wasi_nn",permalink:"/docs/zh-TW/contribute/source/plugin/wasi_nn",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/contribute/source/plugin/wasi_nn.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"contributeSidebar",previous:{title:"Build WasmEdge With WASI-Logging Plug-in",permalink:"/docs/zh-TW/contribute/source/plugin/wasi_logging"},next:{title:"Build WasmEdge With WasmEdge-Process Plug-in",permalink:"/docs/zh-TW/contribute/source/plugin/process"}},u={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Build WasmEdge with WASI-NN OpenVINO Backend",id:"build-wasmedge-with-wasi-nn-openvino-backend",level:2},{value:"Build WasmEdge with WASI-NN PyTorch Backend",id:"build-wasmedge-with-wasi-nn-pytorch-backend",level:2},{value:"Build WasmEdge with WASI-NN TensorFlow-Lite Backend",id:"build-wasmedge-with-wasi-nn-tensorflow-lite-backend",level:2},{value:"Build WasmEdge with WASI-NN llama.cpp Backend",id:"build-wasmedge-with-wasi-nn-llamacpp-backend",level:2},{value:"MacOS",id:"macos",level:3},{value:"Intel Model",id:"intel-model",level:4},{value:"Apple Silicon Model",id:"apple-silicon-model",level:4},{value:"Linux",id:"linux",level:3},{value:"Ubuntu/Debian with CUDA 12",id:"ubuntudebian-with-cuda-12",level:4},{value:"Ubuntu on NVIDIA Jetson AGX Orin",id:"ubuntu-on-nvidia-jetson-agx-orin",level:4},{value:"Ubuntu/Debian with OpenBLAS",id:"ubuntudebian-with-openblas",level:4},{value:"General Linux without any acceleration framework",id:"general-linux-without-any-acceleration-framework",level:4},{value:"Appendix",id:"appendix",level:3},{value:"Build WasmEdge with WASI-NN Neural Speed Backend",id:"build-wasmedge-with-wasi-nn-neural-speed-backend",level:2}],p={toc:s},d="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"build-with-wasi-nn-plug-in"},"Build with WASI-nn Plug-in"),(0,i.kt)("p",null,"The WASI-NN plug-in is a proposed WebAssembly System Interface (WASI) API for machine learning. It allows WebAssembly programs to access host-provided machine learning functions."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Currently, WasmEdge used OpenVINO\u2122, PyTorch, TensorFlow Lite, or llama.cpp as the WASI-NN backend implementation. For using WASI-NN on WasmEdge, you need to install ",(0,i.kt)("a",{parentName:"p",href:"https://docs.openvino.ai/2023.0/openvino_docs_install_guides_installing_openvino_apt.html"},"OpenVINO\u2122"),"(2023), ",(0,i.kt)("a",{parentName:"p",href:"https://www.tensorflow.org/install/lang_c"},"TensorFlow Lite"),", or ",(0,i.kt)("a",{parentName:"p",href:"https://pytorch.org/get-started/locally/"},"PyTorch 1.8.2 LTS")," for the backend."),(0,i.kt)("p",null,"By default, we don't enable any WASI-NN backend in WasmEdge. Therefore developers should ",(0,i.kt)("a",{parentName:"p",href:"/docs/zh-TW/contribute/source/os/linux"},"build the WasmEdge from source")," with the cmake option ",(0,i.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_WASI_NN_BACKEND")," to enable the backends."),(0,i.kt)("h2",{id:"build-wasmedge-with-wasi-nn-openvino-backend"},"Build WasmEdge with WASI-NN OpenVINO Backend"),(0,i.kt)("p",null,"For choosing and installing OpenVINO\u2122 on ",(0,i.kt)("inlineCode",{parentName:"p"},"Ubuntu 20.04")," for the backend, we recommend the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB\nsudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB\necho "deb https://apt.repos.intel.com/openvino/2023 ubuntu20 main" | sudo tee /etc/apt/sources.list.d/intel-openvino-2023.list\nsudo apt update\nsudo apt-get -y install openvino\nldconfig\n')),(0,i.kt)("p",null,"Then build and install WasmEdge from source:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="OpenVINO"\ncmake --build build\n# For the WASI-NN plug-in, you should install this project.\ncmake --install build\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If the built ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," CLI tool cannot find the WASI-NN plug-in, you can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_PATH")," environment variable to the plug-in installation path (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/"),", or the built plug-in path ",(0,i.kt)("inlineCode",{parentName:"p"},"build/plugins/wasi_nn/"),") to try to fix this issue.")),(0,i.kt)("p",null,"Then you will have an executable ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," runtime under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," and the WASI-NN with OpenVINO backend plug-in under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/libwasmedgePluginWasiNN.so")," after installation."),(0,i.kt)("h2",{id:"build-wasmedge-with-wasi-nn-pytorch-backend"},"Build WasmEdge with WASI-NN PyTorch Backend"),(0,i.kt)("p",null,"For choosing and installing PyTorch on ",(0,i.kt)("inlineCode",{parentName:"p"},"Ubuntu 20.04")," for the backend, we recommend the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'export PYTORCH_VERSION="1.8.2"\ncurl -s -L -O --remote-name-all https://download.pytorch.org/libtorch/lts/1.8/cpu/libtorch-cxx11-abi-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip\nunzip -q "libtorch-cxx11-abi-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip"\nrm -f "libtorch-cxx11-abi-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip"\nexport LD_LIBRARY_PATH=$(pwd)/libtorch/lib:${LD_LIBRARY_PATH}\nexport Torch_DIR=$(pwd)/libtorch\n')),(0,i.kt)("p",null,"For the legacy operating system such as ",(0,i.kt)("inlineCode",{parentName:"p"},"CentOS 7.6"),", please use the ",(0,i.kt)("inlineCode",{parentName:"p"},"pre-cxx11-abi")," version of ",(0,i.kt)("inlineCode",{parentName:"p"},"libtorch")," instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'export PYTORCH_VERSION="1.8.2"\ncurl -s -L -O --remote-name-all https://download.pytorch.org/libtorch/lts/1.8/cpu/libtorch-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip\nunzip -q "libtorch-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip"\nrm -f "libtorch-shared-with-deps-${PYTORCH_VERSION}%2Bcpu.zip"\nexport LD_LIBRARY_PATH=$(pwd)/libtorch/lib:${LD_LIBRARY_PATH}\nexport Torch_DIR=$(pwd)/libtorch\n')),(0,i.kt)("p",null,"The PyTorch library will be extracted in the current directory ",(0,i.kt)("inlineCode",{parentName:"p"},"./libtorch"),"."),(0,i.kt)("p",null,"Then build and install WasmEdge from source:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="PyTorch"\ncmake --build build\n# For the WASI-NN plug-in, you should install this project.\ncmake --install build\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If the built ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," CLI tool cannot find the WASI-NN plug-in, you can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_PATH")," environment variable to the plug-in installation path (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/"),", or the built plug-in path ",(0,i.kt)("inlineCode",{parentName:"p"},"build/plugins/wasi_nn/"),") to try to fix this issue.")),(0,i.kt)("p",null,"Then you will have an executable ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," runtime under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," and the WASI-NN with PyTorch backend plug-in under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/libwasmedgePluginWasiNN.so")," after installation."),(0,i.kt)("h2",{id:"build-wasmedge-with-wasi-nn-tensorflow-lite-backend"},"Build WasmEdge with WASI-NN TensorFlow-Lite Backend"),(0,i.kt)("p",null,"You can build and install WasmEdge from source directly (on ",(0,i.kt)("inlineCode",{parentName:"p"},"Linux x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Linux aarch64"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"MacOS x86_64"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"MacOS arm64")," platforms):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="TensorflowLite"\ncmake --build build\n# For the WASI-NN plug-in, you should install this project.\ncmake --install build\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If the built ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," CLI tool cannot find the WASI-NN plug-in, you can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_PATH")," environment variable to the plug-in installation path (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/"),", or the built plug-in path ",(0,i.kt)("inlineCode",{parentName:"p"},"build/plugins/wasi_nn/"),") to try to fix this issue.")),(0,i.kt)("p",null,"Then you will have an executable ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," runtime under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," and the WASI-NN with TensorFlow-lite backend plug-in under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/libwasmedgePluginWasiNN.so")," after installation."),(0,i.kt)("p",null,"Installing the necessary ",(0,i.kt)("inlineCode",{parentName:"p"},"libtensorflowlite_c.so")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"libtensorflowlite_flex.so")," on both ",(0,i.kt)("inlineCode",{parentName:"p"},"Ubuntu 20.04")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"manylinux2014")," for the backend, we recommend the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -s -L -O --remote-name-all https://github.com/second-state/WasmEdge-tensorflow-deps/releases/download/TF-2.12.0-CC/WasmEdge-tensorflow-deps-TFLite-TF-2.12.0-CC-manylinux2014_x86_64.tar.gz\ntar -zxf WasmEdge-tensorflow-deps-TFLite-TF-2.12.0-CC-manylinux2014_x86_64.tar.gz\nrm -f WasmEdge-tensorflow-deps-TFLite-TF-2.12.0-CC-manylinux2014_x86_64.tar.gz\n")),(0,i.kt)("p",null,"The shared library will be extracted in the current directory ",(0,i.kt)("inlineCode",{parentName:"p"},"./libtensorflowlite_c.so")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"./libtensorflowlite_flex.so"),"."),(0,i.kt)("p",null,"Then you can move the library to the installation path:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mv libtensorflowlite_c.so /usr/local/lib\nmv libtensorflowlite_flex.so /usr/local/lib\n")),(0,i.kt)("p",null,"Or set the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"export LD_LIBRARY_PATH=$(pwd):${LD_LIBRARY_PATH}"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"We also provided the ",(0,i.kt)("inlineCode",{parentName:"p"},"darwin_x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"darwin_arm64"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"manylinux_aarch64")," versions of the TensorFlow-Lite pre-built shared libraries.")),(0,i.kt)("p",null,"For more information, you can refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/tree/master/plugins/wasi_nn"},"GitHub repository"),"."),(0,i.kt)("h2",{id:"build-wasmedge-with-wasi-nn-llamacpp-backend"},"Build WasmEdge with WASI-NN llama.cpp Backend"),(0,i.kt)("p",null,"You don't need to install any llama.cpp libraries. WasmEdge will download it during the building period."),(0,i.kt)("p",null,"Due to the acceleration frameworks being various, you will need to use different compilation options to build this plugin. Please make sure you are following the same OS section to do this."),(0,i.kt)("h3",{id:"macos"},"MacOS"),(0,i.kt)("h4",{id:"intel-model"},"Intel Model"),(0,i.kt)("p",null,"If you are using the Intel Model macOS, we won't enable any acceleration framework. It is a pure CPU mode plugin."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\n# Disable BLAS and METAL on x86_64 macOS.\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release \\\n  -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="GGML" \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_METAL=OFF \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_BLAS=OFF \\\n  .\ncmake --build build\n# For the WASI-NN plugin, you should install this project.\ncmake --install build\n')),(0,i.kt)("h4",{id:"apple-silicon-model"},"Apple Silicon Model"),(0,i.kt)("p",null,"You can build and install WasmEdge from source directly on the macOS arm64 platform. It will use the built-in GPU by default."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\n# Enable METAL on arm64 macOS.\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release \\\n  -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="GGML" \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_METAL=ON \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_BLAS=OFF \\\n  .\ncmake --build build\n# For the WASI-NN plugin, you should install this project.\ncmake --install build\n')),(0,i.kt)("h3",{id:"linux"},"Linux"),(0,i.kt)("h4",{id:"ubuntudebian-with-cuda-12"},"Ubuntu/Debian with CUDA 12"),(0,i.kt)("p",null,"Please follow the official guide provided by NVIDIA for installing the CUDA framework: ",(0,i.kt)("a",{parentName:"p",href:"https://developer.nvidia.com/cuda-12-2-0-download-archive"},"https://developer.nvidia.com/cuda-12-2-0-download-archive")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\n\n# You may need to install dependencies\napt update\napt install -y software-properties-common lsb-release \\\n  cmake unzip pkg-config\n\n# Due to cuda-related files, it will produce some warning.\n# Disable the warning as an error to avoid failures.\nexport CXXFLAGS="-Wno-error"\n# Please make sure you set up the correct CUDAARCHS.\n# We use `60;61;70` for maximum compatibility.\nexport CUDAARCHS="60;61;70"\n\n# BLAS cannot work with CUBLAS\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release \\\n  -DCMAKE_CUDA_ARCHITECTURES="60;61;70" \\\n  -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc \\\n  -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="GGML" \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_BLAS=OFF \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_CUBLAS=ON \\\n  .\n\ncmake --build build\n\n# For the WASI-NN plugin, you should install this project.\ncmake --install build\n')),(0,i.kt)("h4",{id:"ubuntu-on-nvidia-jetson-agx-orin"},"Ubuntu on NVIDIA Jetson AGX Orin"),(0,i.kt)("p",null,"You should use the pre-built OS image from the NVIDIA official site."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\n\n# Due to cuda-related files, it will produce some warning.\n# Disable the warning as an error to avoid failures.\nexport CXXFLAGS="-Wno-error"\n# Please make sure you set up the correct CUDAARCHS.\n# 72 is for NVIDIA Jetson AGX Orin\nexport CUDAARCHS=72\n\n# BLAS cannot work with CUBLAS\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release \\\n  -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc \\\n  -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="GGML" \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_BLAS=OFF \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_CUBLAS=ON \\\n  .\n\ncmake --build build\n\n# For the WASI-NN plugin, you should install this project.\ncmake --install build\n')),(0,i.kt)("h4",{id:"ubuntudebian-with-openblas"},"Ubuntu/Debian with OpenBLAS"),(0,i.kt)("p",null,"Please install OpenBLAS before building the plugin."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\n\n# You may need to install dependencies\napt update\napt install -y software-properties-common lsb-release \\\n  cmake unzip pkg-config\n# You must install OpenBLAS\napt install libopenblas-dev\n\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release \\\n  -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="GGML" \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_BLAS=ON \\\n  .\n\ncmake --build build\n\n# For the WASI-NN plugin, you should install this project.\ncmake --install build\n')),(0,i.kt)("h4",{id:"general-linux-without-any-acceleration-framework"},"General Linux without any acceleration framework"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\n\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release \\\n  -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="GGML" \\\n  -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_BLAS=OFF \\\n  .\n\ncmake --build build\n\n# For the WASI-NN plugin, you should install this project.\ncmake --install build\n')),(0,i.kt)("h3",{id:"appendix"},"Appendix"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If the built ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," CLI tool cannot find the WASI-NN plugin, you can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_PATH")," environment variable to the plugin installation path (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/")," or the built plugin path ",(0,i.kt)("inlineCode",{parentName:"p"},"build/plugins/wasi_nn/"),") to try to fix this issue.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"We also provided the pre-built ggml plugins on the following platforms:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"darwin","_","x86","_","64: Intel Model macOS"),(0,i.kt)("li",{parentName:"ul"},"darwin","_","arm64: Apple Silicon Model macOS"),(0,i.kt)("li",{parentName:"ul"},"ubuntu20.04","_","x86","_","64: x86","_","64 Linux (the glibc is using Ubuntu20.04 one)"),(0,i.kt)("li",{parentName:"ul"},"ubuntu20.04","_","aarch64: aarch64 Linux (the glibc is using Ubuntu20.04 one)"),(0,i.kt)("li",{parentName:"ul"},"ubuntu20.04","_","blas","_","x86","_","64: x86","_","64 Linux with OpenBLAS support (the glibc is using Ubuntu20.04 one)"),(0,i.kt)("li",{parentName:"ul"},"ubuntu20.04","_","blas","_","aarch64: aarch64 Linux with OpenBLAS support (the glibc is using Ubuntu20.04 one)"),(0,i.kt)("li",{parentName:"ul"},"ubuntu20.04","_","cuda","_","x86","_","64: x86","_","64 Linux with CUDA 12 support (the glibc is using Ubuntu20.04 one)"),(0,i.kt)("li",{parentName:"ul"},"ubuntu20.04","_","cuda","_","aarch64: aarch64 Linux with CUDA 11 support (the glibc is using Ubuntu20.04 one), for NVIDIA Jetson AGX Orin"),(0,i.kt)("li",{parentName:"ul"},"manylinux2014","_","x86","_","64: x86","_","64 Linux (the glibc is using CentOS 7 one)"),(0,i.kt)("li",{parentName:"ul"},"manylinux2014","_","aarch64: aarch64 Linux (the glibc is using CentOS 7 one)"))),(0,i.kt)("h2",{id:"build-wasmedge-with-wasi-nn-neural-speed-backend"},"Build WasmEdge with WASI-NN Neural Speed Backend"),(0,i.kt)("p",null,"The Neural Speed backend relies on Neural Speed, we recommend the following commands to install Neural Speed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\nsudo apt upgrade\nsudo apt install python3-dev\nwget https://raw.githubusercontent.com/intel/neural-speed/main/requirements.txt\npip install -r requirements.txt\npip install neural-speed\n")),(0,i.kt)("p",null,"Then build and install WasmEdge from source:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/your/wasmedge/source/folder>\n\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="neuralspeed"\ncmake --build build\n\n# For the WASI-NN plugin, you should install this project.\ncmake --install build\n')),(0,i.kt)("p",null,"Then you will have an executable ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," runtime under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," and the WASI-NN with Neural Speed backend plug-in under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/libwasmedgePluginWasiNN.so")," after installation."))}c.isMDXComponent=!0}}]);