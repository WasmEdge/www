"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[1044],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(t),c=r,g=u["".concat(l,".").concat(c)]||u[c]||d[c]||i;return t?a.createElement(g,s(s({ref:n},m),{},{components:t})):a.createElement(g,s({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=c;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6691:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:3},s="2 Embed the Wasm app into your Go Host app",o={unversionedId:"embed/quick-start/embed-wasm-apps-go",id:"embed/quick-start/embed-wasm-apps-go",title:"2 Embed the Wasm app into your Go Host app",description:"In the previous chapter, we learned how to  create a Wasm app using Rust and wasmedge-bindgen tool. In this chapter, I will walk you through how to embed the compiled Wasm app into your Go Host app.",source:"@site/docs/embed/quick-start/embed-wasm-apps-go.md",sourceDirName:"embed/quick-start",slug:"/embed/quick-start/embed-wasm-apps-go",permalink:"/docs/zh-TW/embed/quick-start/embed-wasm-apps-go",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/embed/quick-start/embed-wasm-apps-go.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"embedSidebar",previous:{title:"2 Create a Wasm app using Rust and wasmedge-bindgen",permalink:"/docs/zh-TW/embed/quick-start/wasm-app-in-rust"},next:{title:"Passing Complex Data",permalink:"/docs/zh-TW/category/passing-complex-data"}},l={},p=[{value:"The Go Host Application",id:"the-go-host-application",level:2},{value:"Run the Wasm app from your Go Host",id:"run-the-wasm-app-from-your-go-host",level:2}],m={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2-embed-the-wasm-app-into-your-go-host-app"},"2 Embed the Wasm app into your Go Host app"),(0,r.kt)("p",null,"In the previous chapter, we learned how to  create a Wasm app using Rust and ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge-bindgen")," tool. In this chapter, I will walk you through how to embed the compiled Wasm app into your Go Host app."),(0,r.kt)("h2",{id:"the-go-host-application"},"The Go Host Application"),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/blob/master/wasmedge-bindgen/go_BindgenFuncs/bindgen_funcs.go"},"Go host application"),", you can create and set up the WasmEdge VM using the WasmEdge Go SDK."),(0,r.kt)("p",null,"However, instead of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"vm.Instantiate()"),", you should now call ",(0,r.kt)("inlineCode",{parentName:"p"},"bindgen.Instantiate(vm)")," to instantiate the VM and return a ",(0,r.kt)("inlineCode",{parentName:"p"},"bindgen")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  // Expected Args[0]: program name (./bindgen_funcs)\n  // Expected Args[1]: wasm file (rust_bindgen_funcs_lib.wasm))\n\n  wasmedge.SetLogErrorLevel()\n  var conf = wasmedge.NewConfigure(wasmedge.WASI)\n  var vm = wasmedge.NewVMWithConfig(conf)\n  var wasi = vm.GetImportModule(wasmedge.WASI)\n  wasi.InitWasi(\n    os.Args[1:],     // The args\n    os.Environ(),    // The envs\n    []string{".:."}, // The mapping preopens\n  )\n  vm.LoadWasmFile(os.Args[1])\n  vm.Validate()\n\n  // Instantiate the bindgen and vm\n  bg := bindgen.Instantiate(vm)\n')),(0,r.kt)("p",null,"Next, you can call any ",(0,r.kt)("inlineCode",{parentName:"p"},"[wasmedge_bindgen]")," annotated functions in the VM via the ",(0,r.kt)("inlineCode",{parentName:"p"},"bindgen")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'  // create_line: string, string, string -> string (inputs are JSON stringified) \n  res, err := bg.Execute("create_line", "{\\"x\\":2.5,\\"y\\":7.8}", "{\\"x\\":2.5,\\"y\\":5.8}", "A thin red line")\n  if err == nil {\n    fmt.Println("Run bindgen -- create_line:", string(res))\n  } else {\n    fmt.Println("Run bindgen -- create_line FAILED", err)\n  }\n\n  // say: string -> string\n  res, err = bg.Execute("say", "bindgen funcs test")\n  if err == nil {\n    fmt.Println("Run bindgen -- say:", string(res))\n  } else {\n    fmt.Println("Run bindgen -- say FAILED")\n  }\n\n  // obfusticate: string -> string\n  res, err = bg.Execute("obfusticate", "A quick brown fox jumps over the lazy dog")\n  if err == nil {\n    fmt.Println("Run bindgen -- obfusticate:", string(res))\n  } else {\n    fmt.Println("Run bindgen -- obfusticate FAILED")\n  }\n\n  // lowest_common_multiple: i32, i32 -> i32\n  res, err = bg.Execute("lowest_common_multiple", int32(123), int32(2))\n  if err == nil {\n    num, _ := strconv.ParseInt(string(res), 10, 32)\n    fmt.Println("Run bindgen -- lowest_common_multiple:", num)\n  } else {\n    fmt.Println("Run bindgen -- lowest_common_multiple FAILED")\n  }\n\n  // sha3_digest: array -> array\n  res, err = bg.Execute("sha3_digest", []byte("This is an important message"))\n  if err == nil {\n    fmt.Println("Run bindgen -- sha3_digest:", res)\n  } else {\n    fmt.Println("Run bindgen -- sha3_digest FAILED")\n  }\n\n  // keccak_digest: array -> array\n  res, err = bg.Execute("keccak_digest", []byte("This is an important message"))\n  if err == nil {\n    fmt.Println("Run bindgen -- keccak_digest:", res)\n  } else {\n    fmt.Println("Run bindgen -- keccak_digest FAILED")\n  }\n\n  bg.Release()\n  vm.Release()\n  conf.Release()\n}\n')),(0,r.kt)("h2",{id:"run-the-wasm-app-from-your-go-host"},"Run the Wasm app from your Go Host"),(0,r.kt)("p",null,"Before that, maker sure you have ",(0,r.kt)("a",{parentName:"p",href:"/docs/zh-TW/embed/quick-start/install"},"installed Go, WasmEdge, and WasmEdge Go SDK"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd rust_bindgen_funcs\ngo build\n./bindgen_funcs rust_bindgen_funcs_lib.wasm\n")),(0,r.kt)("p",null,"The standard output of this example will be the following."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'Run bindgen -- create_line: {"points":[{"x":1.5,"y":3.8},{"x":2.5,"y":5.8}],"valid":true,"length":2.2360682,"desc":"A thin red line"}\nRun bindgen -- say: hello bindgen funcs test\nRun bindgen -- obfusticate: N dhvpx oebja sbk whzcf bire gur ynml qbt\nRun bindgen -- lowest_common_multiple: 246\nRun bindgen -- sha3_digest: [87 27 231 209 189 105 251 49 159 10 211 250 15 159 154 181 43 218 26 141 56 199 25 45 60 10 20 163 54 211 195 203]\nRun bindgen -- keccak_digest: [126 194 241 200 151 116 227 33 216 99 159 22 107 3 177 169 216 191 114 156 174 193 32 159 246 228 245 133 52 75 55 27]\n')),(0,r.kt)("p",null,"That's it. Next let's dive into how to pass complex data from host applications to the Wasm app."))}u.isMDXComponent=!0}}]);