"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[9860],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=m(a),c=r,h=d["".concat(l,".").concat(c)]||d[c]||u[c]||o;return a?n.createElement(h,s(s({ref:t},p),{},{components:a})):n.createElement(h,s({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var m=2;m<o;m++)s[m]=a[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},74433:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_position:1},s="WebAssembly Serverless Functions in AWS Lambda",i={unversionedId:"start/usage/serverless/aws",id:"start/usage/serverless/aws",title:"WebAssembly Serverless Functions in AWS Lambda",description:"In this article, we will show you two serverless functions in Rust and WasmEdge deployed on AWS Lambda. One is the image processing function, the other one is the TensorFlow inference function.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/start/usage/serverless/aws.md",sourceDirName:"start/usage/serverless",slug:"/start/usage/serverless/aws",permalink:"/docs/zh/start/usage/serverless/aws",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/start/usage/serverless/aws.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"startSidebar",previous:{title:"Serverless Platforms",permalink:"/docs/zh/category/serverless-platforms"},next:{title:"WebAssembly Serverless Functions in Netlify",permalink:"/docs/zh/start/usage/serverless/netlify"}},l={},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Example 1: Image processing",id:"example-1-image-processing",level:2},{value:"Create the function",id:"create-the-function",level:3},{value:"Create the service script to load the function",id:"create-the-service-script-to-load-the-function",level:3},{value:"Build the Docker image for Lambda deployment",id:"build-the-docker-image-for-lambda-deployment",level:3},{value:"Optional: test the Docker image locally",id:"optional-test-the-docker-image-locally",level:3},{value:"Example 2: AI inference",id:"example-2-ai-inference",level:2}],p={toc:m},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"webassembly-serverless-functions-in-aws-lambda"},"WebAssembly Serverless Functions in AWS Lambda"),(0,r.kt)("p",null,"In this article, we will show you two serverless functions in Rust and WasmEdge deployed on AWS Lambda. One is the image processing function, the other one is the TensorFlow inference function."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For the insight on why WasmEdge on AWS Lambda, please refer to the article ",(0,r.kt)("a",{parentName:"p",href:"https://www.secondstate.io/articles/webassembly-serverless-functions-in-aws-lambda/"},"WebAssembly Serverless Functions in AWS Lambda"))),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Since our demo WebAssembly functions are written in Rust, you will need a ",(0,r.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/tools/install"},"Rust compiler"),". Make sure that you install the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasm32-wasi")," compiler target as follows, in order to generate WebAssembly bytecode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rustup target add wasm32-wasi\n")),(0,r.kt)("p",null,"The demo application front end is written in ",(0,r.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js"),", and deployed on AWS Lambda. We will assume that you already have the basic knowledge of how to work with Next.js and Lambda."),(0,r.kt)("h2",{id:"example-1-image-processing"},"Example 1: Image processing"),(0,r.kt)("p",null,"Our first demo application allows users to upload an image and then invoke a serverless function to turn it into black and white. A ",(0,r.kt)("a",{parentName:"p",href:"https://second-state.github.io/aws-lambda-wasm-runtime/"},"live demo")," deployed through GitHub Pages is available."),(0,r.kt)("p",null,"Fork the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime"},"demo application\u2019s GitHub repo")," to get started. To deploy the application on AWS Lambda, follow the guide in the repository ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/tensorflow/README.md"},"README"),"."),(0,r.kt)("h3",{id:"create-the-function"},"Create the function"),(0,r.kt)("p",null,"This repo is a standard Next.js application. The backend serverless function is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"api/functions/image_grayscale")," folder. The ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main.rs")," file contains the Rust program\u2019s source code. The Rust program reads image data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"STDIN"),", and then outputs the black-white image to the ",(0,r.kt)("inlineCode",{parentName:"p"},"STDOUT"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use hex;\nuse std::io::{self, Read};\nuse image::{ImageOutputFormat, ImageFormat};\n\nfn main() {\n  let mut buf = Vec::new();\n  io::stdin().read_to_end(&mut buf).unwrap();\n\n  let image_format_detected: ImageFormat = image::guess_format(&buf).unwrap();\n  let img = image::load_from_memory(&buf).unwrap();\n  let filtered = img.grayscale();\n  let mut buf = vec![];\n  match image_format_detected {\n    ImageFormat::Gif => {\n      filtered.write_to(&mut buf, ImageOutputFormat::Gif).unwrap();\n    },\n    _ => {\n      filtered.write_to(&mut buf, ImageOutputFormat::Png).unwrap();\n    },\n  };\n  io::stdout().write_all(&buf).unwrap();\n  io::stdout().flush().unwrap();\n}\n")),(0,r.kt)("p",null,"You can use Rust\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo")," tool to build the Rust program into WebAssembly bytecode or native code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd api/functions/image-grayscale/\ncargo build --release --target wasm32-wasi\n")),(0,r.kt)("p",null,"Copy the build artifacts to the ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp target/wasm32-wasi/release/grayscale.wasm ../../\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When we build the docker image, ",(0,r.kt)("inlineCode",{parentName:"p"},"api/pre.sh")," is executed. ",(0,r.kt)("inlineCode",{parentName:"p"},"pre.sh")," installs the WasmEdge runtime, and then compiles each WebAssembly bytecode program into a native ",(0,r.kt)("inlineCode",{parentName:"p"},"so")," library for faster execution.")),(0,r.kt)("h3",{id:"create-the-service-script-to-load-the-function"},"Create the service script to load the function"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/main/api/hello.js"},(0,r.kt)("inlineCode",{parentName:"a"},"api/hello.js"))," script loads the WasmEdge runtime, starts the compiled WebAssembly program in WasmEdge, and passes the uploaded image data via ",(0,r.kt)("inlineCode",{parentName:"p"},"STDIN"),". Notice that ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/main/api/hello.js"},(0,r.kt)("inlineCode",{parentName:"a"},"api/hello.js"))," runs the compiled ",(0,r.kt)("inlineCode",{parentName:"p"},"grayscale.so")," file generated by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/main/api/pre.sh"},(0,r.kt)("inlineCode",{parentName:"a"},"api/pre.sh"))," for better performance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { spawn } = require('child_process');\nconst path = require('path');\n\nfunction _runWasm(reqBody) {\n  return new Promise((resolve) => {\n    const wasmedge = spawn(path.join(__dirname, 'wasmedge'), [\n      path.join(__dirname, 'grayscale.so'),\n    ]);\n\n    let d = [];\n    wasmedge.stdout.on('data', (data) => {\n      d.push(data);\n    });\n\n    wasmedge.on('close', (code) => {\n      let buf = Buffer.concat(d);\n      resolve(buf);\n    });\n\n    wasmedge.stdin.write(reqBody);\n    wasmedge.stdin.end('');\n  });\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"exports.handler")," part of ",(0,r.kt)("inlineCode",{parentName:"p"},"hello.js")," exports an async function handler, used to handle different events every time the serverless function is called. In this example, we simply process the image by calling the function above and return the result, but more complicated event-handling behavior may be defined based on your need. We also need to return some ",(0,r.kt)("inlineCode",{parentName:"p"},"Access-Control-Allow")," headers to avoid ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"},"Cross-Origin Resource Sharing (CORS)")," errors when calling the serverless function from a browser. You can read more about CORS errors ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors"},"here")," if you encounter them when replicating our example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"exports.handler = async function (event, context) {\n  var typedArray = new Uint8Array(\n    event.body.match(/[\\da-f]{2}/gi).map(function (h) {\n      return parseInt(h, 16);\n    }),\n  );\n  let buf = await _runWasm(typedArray);\n  return {\n    statusCode: 200,\n    headers: {\n      'Access-Control-Allow-Headers':\n        'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods':\n        'DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT',\n    },\n    body: buf.toString('hex'),\n  };\n};\n")),(0,r.kt)("h3",{id:"build-the-docker-image-for-lambda-deployment"},"Build the Docker image for Lambda deployment"),(0,r.kt)("p",null,"Now we have the WebAssembly bytecode function and the script to load and connect to the web request. In order to deploy them as a function service on AWS Lambda, you still need to package the whole thing into a Docker image."),(0,r.kt)("p",null,"We are not going to cover in detail about how to build the Docker image and deploy on AWS Lambda, as there are detailed steps in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/tensorflow/README.md#deploy"},"Deploy section of the repository README"),". However, we will highlight some lines in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/tensorflow/api/Dockerfile"},(0,r.kt)("inlineCode",{parentName:"a"},"Dockerfile"))," for you to avoid some pitfalls."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM public.ecr.aws/lambda/nodejs:14\n\n# Change directory to /var/task\nWORKDIR /var/task\n\nRUN yum update -y && yum install -y curl tar gzip\n\n# Bundle and pre-compile the wasm files\nCOPY *.wasm ./\nCOPY pre.sh ./\nRUN chmod +x pre.sh\nRUN ./pre.sh\n\n# Bundle the JS files\nCOPY *.js ./\n\nCMD [ "hello.handler" ]\n')),(0,r.kt)("p",null,"First, we are building the image from ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/amazon/aws-lambda-nodejs"},"AWS Lambda's Node.js base image"),". The advantage of using AWS Lambda's base image is that it includes the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/aws/aws-lambda-nodejs-runtime-interface-client"},"Lambda Runtime Interface Client (RIC)"),", which we need to implement in our Docker image as it is required by AWS Lambda. The Amazon Linux uses ",(0,r.kt)("inlineCode",{parentName:"p"},"yum")," as the package manager."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"These base images contain the Amazon Linux Base operating system, the runtime for a given language, dependencies and the Lambda Runtime Interface Client (RIC), which implements the Lambda ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html"},"Runtime API"),". The Lambda Runtime Interface Client allows your runtime to receive requests from and send requests to the Lambda service.")),(0,r.kt)("p",null,"Second, we need to put our function and all its dependencies in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/var/task")," directory. Files in other folders will not be executed by AWS Lambda."),(0,r.kt)("p",null,"Third, we need to define the default command when we start our container. ",(0,r.kt)("inlineCode",{parentName:"p"},'CMD [ "hello.handler" ]')," means that we will call the ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," function in ",(0,r.kt)("inlineCode",{parentName:"p"},"hello.js")," whenever our serverless function is called. Recall that we have defined and exported the handler function in the previous steps through ",(0,r.kt)("inlineCode",{parentName:"p"},"exports.handler = ...")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"hello.js"),"."),(0,r.kt)("h3",{id:"optional-test-the-docker-image-locally"},"Optional: test the Docker image locally"),(0,r.kt)("p",null,"Docker images built from AWS Lambda's base images can be tested locally following ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/images-test.html"},"this guide"),". Local testing requires ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/aws/aws-lambda-runtime-interface-emulator"},"AWS Lambda Runtime Interface Emulator (RIE)"),", which is already installed in all of AWS Lambda's base images. To test your image, first, start the Docker container by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 9000:8080  myfunction:latest\n")),(0,r.kt)("p",null,"This command sets a function endpoint on your local machine at ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:9000/2015-03-31/functions/function/invocations"),"."),(0,r.kt)("p",null,"Then, from a separate terminal window, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -XPOST \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{}'\n")),(0,r.kt)("p",null,"And you should get your expected output in the terminal."),(0,r.kt)("p",null,"If you don't want to use a base image from AWS Lambda, you can also use your own base image and install RIC and/or RIE while building your Docker image. Just follow ",(0,r.kt)("strong",{parentName:"p"},"Create an image from an alternative base image")," section from ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/images-create.html"},"this guide"),"."),(0,r.kt)("p",null,"That's it! After building your Docker image, you can deploy it to AWS Lambda following steps outlined in the repository ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/tensorflow/README.md#deploy"},"README"),". Now your serverless function is ready to rock!"),(0,r.kt)("h2",{id:"example-2-ai-inference"},"Example 2: AI inference"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/tree/tensorflow"},"second demo")," application allows users to upload an image and then invoke a serverless function to classify the main subject on the image."),(0,r.kt)("p",null,"It is in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/tree/tensorflow"},"the same GitHub repo")," as the previous example but in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tensorflow")," branch. The backend serverless function for image classification is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"api/functions/image-classification")," folder in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tensorflow")," branch. The ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main.rs")," file contains the Rust program\u2019s source code. The Rust program reads image data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"STDIN"),", and then outputs the text output to the ",(0,r.kt)("inlineCode",{parentName:"p"},"STDOUT"),". It utilizes the WasmEdge Tensorflow API to run the AI inference."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn main() {\n  // Step 1: Load the TFLite model\n  let model_data: &[u8] = include_bytes!("models/mobilenet_v1_1.0_224/mobilenet_v1_1.0_224_quant.tflite");\n  let labels = include_str!("models/mobilenet_v1_1.0_224/labels_mobilenet_quant_v1_224.txt");\n\n  // Step 2: Read image from STDIN\n  let mut buf = Vec::new();\n  io::stdin().read_to_end(&mut buf).unwrap();\n\n  // Step 3: Resize the input image for the tensorflow model\n  let flat_img = wasmedge_tensorflow_interface::load_jpg_image_to_rgb8(&buf, 224, 224);\n\n  // Step 4: AI inference\n  let mut session = wasmedge_tensorflow_interface::Session::new(&model_data, wasmedge_tensorflow_interface::ModelType::TensorFlowLite);\n  session.add_input("input", &flat_img, &[1, 224, 224, 3])\n         .run();\n  let res_vec: Vec<u8> = session.get_output("MobilenetV1/Predictions/Reshape_1");\n\n  // Step 5: Find the food label that responds to the highest probability in res_vec\n  // ... ...\n  let mut label_lines = labels.lines();\n  for _i in 0..max_index {\n    label_lines.next();\n  }\n\n  // Step 6: Generate the output text\n  let class_name = label_lines.next().unwrap().to_string();\n  if max_value > 50 {\n    println!("It {} a <a href=\'https://www.google.com/search?q={}\'>{}</a> in the picture", confidence.to_string(), class_name, class_name);\n  } else {\n    println!("It does not appears to be any food item in the picture.");\n  }\n}\n')),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo")," tool to build the Rust program into WebAssembly bytecode or native code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd api/functions/image-classification/\ncargo build --release --target wasm32-wasi\n")),(0,r.kt)("p",null,"Copy the build artifacts to the ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp target/wasm32-wasi/release/classify.wasm ../../\n")),(0,r.kt)("p",null,"Again, the ",(0,r.kt)("inlineCode",{parentName:"p"},"api/pre.sh")," script installs WasmEdge runtime and its Tensorflow dependencies in this application. It also compiles the ",(0,r.kt)("inlineCode",{parentName:"p"},"classify.wasm")," bytecode program to the ",(0,r.kt)("inlineCode",{parentName:"p"},"classify.so")," native shared library at the time of deployment."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/tensorflow/api/hello.js"},(0,r.kt)("inlineCode",{parentName:"a"},"api/hello.js"))," script loads the WasmEdge runtime, starts the compiled WebAssembly program in WasmEdge, and passes the uploaded image data via ",(0,r.kt)("inlineCode",{parentName:"p"},"STDIN"),". Notice ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/tensorflow/api/hello.js"},(0,r.kt)("inlineCode",{parentName:"a"},"api/hello.js"))," runs the compiled ",(0,r.kt)("inlineCode",{parentName:"p"},"classify.so")," file generated by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/blob/tensorflow/api/pre.sh"},(0,r.kt)("inlineCode",{parentName:"a"},"api/pre.sh"))," for better performance. The handler function is similar to our previous example, and is omitted here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { spawn } = require('child_process');\nconst path = require('path');\n\nfunction _runWasm(reqBody) {\n  return new Promise(resolve => {\n    const wasmedge = spawn(\n      path.join(__dirname, 'wasmedge-tensorflow-lite'),\n      [path.join(__dirname, 'classify.so')],\n      {env: {'LD_LIBRARY_PATH': __dirname}}\n    );\n\n    let d = [];\n    wasmedge.stdout.on('data', (data) => {\n      d.push(data);\n    });\n\n    wasmedge.on('close', (code) => {\n      resolve(d.join(''));\n    });\n\n    wasmedge.stdin.write(reqBody);\n    wasmedge.stdin.end('');\n  });\n}\n\nexports.handler = ... // _runWasm(reqBody) is called in the handler\n")),(0,r.kt)("p",null,"You can build your Docker image and deploy the function in the same way as outlined in the previous example. Now you have created a web app for subject classification!"),(0,r.kt)("p",null,"Next, it's your turn to use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/aws-lambda-wasm-runtime/tree/main"},"aws-lambda-wasm-runtime repo")," as a template to develop Rust serverless function on AWS Lambda. Looking forward to your great work."))}u.isMDXComponent=!0}}]);