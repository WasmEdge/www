"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"developSidebar":[{"type":"link","label":"\u5f00\u53d1 Wasm \u5e94\u7528\u7a0b\u5e8f","href":"/docs/zh/develop/overview","docId":"develop/overview"},{"type":"category","label":"Getting Started with WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Quick start on Linux","href":"/docs/zh/develop/getting-started/quick_start","docId":"develop/getting-started/quick_start"},{"type":"link","label":"Quick start with Docker","href":"/docs/zh/develop/getting-started/quick_start_docker","docId":"develop/getting-started/quick_start_docker"},{"type":"link","label":"Quick start with Red Hat","href":"/docs/zh/develop/getting-started/quick_start_redhat","docId":"develop/getting-started/quick_start_redhat"}],"href":"/docs/zh/category/getting-started-with-wasmedge"},{"type":"category","label":"What is WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge Features","href":"/docs/zh/develop/wasmedge/features","docId":"develop/wasmedge/features"},{"type":"category","label":"WasmEdge Extensions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WebAssembly specs","href":"/docs/zh/develop/wasmedge/extensions/proposals","docId":"develop/wasmedge/extensions/proposals"},{"type":"link","label":"WasmEdge extensions","href":"/docs/zh/develop/wasmedge/extensions/unique_extensions","docId":"develop/wasmedge/extensions/unique_extensions"}],"href":"/docs/zh/category/wasmedge-extensions"},{"type":"link","label":"Component Model","href":"/docs/zh/develop/wasmedge/component_model","docId":"develop/wasmedge/component_model"}],"href":"/docs/zh/category/what-is-wasmedge"},{"type":"category","label":"Building and running WasmEdge apps","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Install and uninstall WasmEdge","href":"/docs/zh/develop/build-and-run/install","docId":"develop/build-and-run/install"},{"type":"link","label":"The wasmedge CLI","href":"/docs/zh/develop/build-and-run/cli","docId":"develop/build-and-run/cli"},{"type":"link","label":"The AoT Compiler","href":"/docs/zh/develop/build-and-run/aot","docId":"develop/build-and-run/aot"},{"type":"link","label":"Docker + Wasm","href":"/docs/zh/develop/build-and-run/docker_wasm","docId":"develop/build-and-run/docker_wasm"}],"href":"/docs/zh/category/building-and-running-wasmedge-apps"},{"type":"category","label":"Develop Wasm Apps in Rust","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"4.0 Set up Software for Building and Compiling Rust Programs","href":"/docs/zh/develop/rust/setup","docId":"develop/rust/setup"},{"type":"link","label":"4.1 Hello world","href":"/docs/zh/develop/rust/hello_world","docId":"develop/rust/hello_world"},{"type":"link","label":"4.2 Access OS services","href":"/docs/zh/develop/rust/os","docId":"develop/rust/os"},{"type":"category","label":"4.3 HTTP services","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"4.3.1 Client","href":"/docs/zh/develop/rust/http_service/client","docId":"develop/rust/http_service/client"},{"type":"link","label":"4.3.1 Server","href":"/docs/zh/develop/rust/http_service/server","docId":"develop/rust/http_service/server"}],"href":"/docs/zh/category/43-http-services"},{"type":"category","label":"4.4 Socket networking","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"4.4.1 Client","href":"/docs/zh/develop/rust/socket_networking/client","docId":"develop/rust/socket_networking/client"},{"type":"link","label":"4.4.1 Server","href":"/docs/zh/develop/rust/socket_networking/server","docId":"develop/rust/socket_networking/server"}],"href":"/docs/zh/category/44-socket-networking"},{"type":"link","label":"4.5 Networking for HTTPS","href":"/docs/zh/develop/rust/https-service","docId":"develop/rust/https-service"},{"type":"category","label":"4.7 AI Inference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"4.7.1 PyTorch","href":"/docs/zh/develop/rust/ai_inference/pytorch","docId":"develop/rust/ai_inference/pytorch"},{"type":"link","label":"4.7.2 TensorFlow Lite","href":"/docs/zh/develop/rust/ai_inference/tensorflow_lite","docId":"develop/rust/ai_inference/tensorflow_lite"},{"type":"link","label":"4.7.3 OpenVINO","href":"/docs/zh/develop/rust/ai_inference/openvino","docId":"develop/rust/ai_inference/openvino"}],"href":"/docs/zh/category/47-ai-inference"},{"type":"link","label":"4.7 MySQL-based Database Driver","href":"/docs/zh/develop/rust/my_sql_driver","docId":"develop/rust/my_sql_driver"},{"type":"link","label":"4.8 Use WasmEdge\'s Dapr SDK to Connect Dapr Sidecar","href":"/docs/zh/develop/rust/dapr","docId":"develop/rust/dapr"},{"type":"link","label":"4.8 Crypto for WASI","href":"/docs/zh/develop/rust/wasicrypto","docId":"develop/rust/wasicrypto"},{"type":"link","label":"4.9 Command interface","href":"/docs/zh/develop/rust/command","docId":"develop/rust/command"},{"type":"link","label":"4.10 Bindgen of Rust Functions","href":"/docs/zh/develop/rust/bindgen","docId":"develop/rust/bindgen"},{"type":"link","label":"4.11 Server-side rendering","href":"/docs/zh/develop/rust/ssr","docId":"develop/rust/ssr"}],"href":"/docs/zh/category/develop-wasm-apps-in-rust"},{"type":"category","label":"Develop Wasm Apps in JavaScript","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"5.1 Introduction","href":"/docs/zh/develop/javascript/intro","docId":"develop/javascript/intro"},{"type":"link","label":"5.3.1 Networking","href":"/docs/zh/develop/javascript/networking","docId":"develop/javascript/networking"},{"type":"link","label":"5.2 Quick Start with JavaScript on WasmEdge","href":"/docs/zh/develop/javascript/hello_world","docId":"develop/javascript/hello_world"},{"type":"link","label":"5.4 Node.js support","href":"/docs/zh/develop/javascript/nodejs","docId":"develop/javascript/nodejs"},{"type":"link","label":"5.5 ES6 Modules","href":"/docs/zh/develop/javascript/es6","docId":"develop/javascript/es6"},{"type":"link","label":"5.6 Built-in modules","href":"/docs/zh/develop/javascript/modules","docId":"develop/javascript/modules"},{"type":"link","label":"5.7 NodeJS and NPM modules","href":"/docs/zh/develop/javascript/npm","docId":"develop/javascript/npm"},{"type":"link","label":"5.8 Native JS API in Rust","href":"/docs/zh/develop/javascript/rust","docId":"develop/javascript/rust"},{"type":"link","label":"5.9 TensorFlow","href":"/docs/zh/develop/javascript/tensorflow","docId":"develop/javascript/tensorflow"},{"type":"link","label":"5.10 Example: Running SSR in WasmEdge","href":"/docs/zh/develop/javascript/ssr","docId":"develop/javascript/ssr"}],"href":"/docs/zh/category/develop-wasm-apps-in-javascript"},{"type":"category","label":"Develop Wasm Apps in C/C++","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"6.1 Hello World","href":"/docs/zh/develop/c/hello_world","docId":"develop/c/hello_world"},{"type":"link","label":"6.2 Networking Socket","href":"/docs/zh/develop/c/networking","docId":"develop/c/networking"},{"type":"link","label":"6.3 Thread","href":"/docs/zh/develop/c/threads","docId":"develop/c/threads"},{"type":"link","label":"6.4 SIMD","href":"/docs/zh/develop/c/simd","docId":"develop/c/simd"}],"href":"/docs/zh/category/develop-wasm-apps-in-cc"},{"type":"category","label":"Develop Wasm Apps in Go","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"7.1 TinyGo","href":"/docs/zh/develop/go/hello_world","docId":"develop/go/hello_world"}],"href":"/docs/zh/category/develop-wasm-apps-in-go"},{"type":"category","label":"Deploy WasmEdge apps in Kubernetes","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"8.1 Introduction","href":"/docs/zh/develop/deploy/intro","docId":"develop/deploy/intro"},{"type":"link","label":"8.2 Docker + Wasm","href":"/docs/zh/develop/deploy/docker_wasm","docId":"develop/deploy/docker_wasm"},{"type":"link","label":"8.3 Podman","href":"/docs/zh/develop/deploy/podman","docId":"develop/deploy/podman"},{"type":"category","label":"Low level runtime support","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"8.5.2 Deploy with crun","href":"/docs/zh/develop/deploy/oci-runtime/crun","docId":"develop/deploy/oci-runtime/crun"},{"type":"link","label":"8.5.3 Deploy with youki","href":"/docs/zh/develop/deploy/oci-runtime/youki","docId":"develop/deploy/oci-runtime/youki"},{"type":"link","label":"8.5.4 Deploy with quark","href":"/docs/zh/develop/deploy/oci-runtime/quark","docId":"develop/deploy/oci-runtime/quark"}],"href":"/docs/zh/category/low-level-runtime-support"},{"type":"link","label":"8.5 Using WasmEdge in Docker","href":"/docs/zh/develop/deploy/using-wasmedge-in-docker","docId":"develop/deploy/using-wasmedge-in-docker"},{"type":"category","label":"High level runtime support","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"8.6.1 Deploy with containerd\'s runwasi","href":"/docs/zh/develop/deploy/cri-runtime/containerd","docId":"develop/deploy/cri-runtime/containerd"},{"type":"link","label":"8.6.2 containerd + crun","href":"/docs/zh/develop/deploy/cri-runtime/containerd-crun","docId":"develop/deploy/cri-runtime/containerd-crun"},{"type":"link","label":"8.6.3 CRI-O + crun","href":"/docs/zh/develop/deploy/cri-runtime/crio-crun","docId":"develop/deploy/cri-runtime/crio-crun"}],"href":"/docs/zh/category/high-level-runtime-support"},{"type":"category","label":"Use Cases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"8.6.1 Kubernetes + containerd + crun","href":"/docs/zh/develop/deploy/kubernetes/kubernetes-containerd-crun","docId":"develop/deploy/kubernetes/kubernetes-containerd-crun"},{"type":"link","label":"8.6.2 Kubernetes + CRI-O + crun","href":"/docs/zh/develop/deploy/kubernetes/kubernetes-cri-o","docId":"develop/deploy/kubernetes/kubernetes-cri-o"},{"type":"link","label":"8.6.3 Kubernetes + Containerd + Runwasi","href":"/docs/zh/develop/deploy/kubernetes/kubernetes-containerd-runwasi","docId":"develop/deploy/kubernetes/kubernetes-containerd-runwasi"},{"type":"link","label":"8.6.4 OpenYurt","href":"/docs/zh/develop/deploy/kubernetes/openyurt","docId":"develop/deploy/kubernetes/openyurt"},{"type":"link","label":"8.6.5 SuperEdge","href":"/docs/zh/develop/deploy/kubernetes/superedge","docId":"develop/deploy/kubernetes/superedge"},{"type":"link","label":"8.6.6 KubeEdge","href":"/docs/zh/develop/deploy/kubernetes/kubedge","docId":"develop/deploy/kubernetes/kubedge"},{"type":"link","label":"8.6.7 Kind","href":"/docs/zh/develop/deploy/kubernetes/kind","docId":"develop/deploy/kubernetes/kind"},{"type":"link","label":"8.6.8 Knative","href":"/docs/zh/develop/deploy/kubernetes/knative","docId":"develop/deploy/kubernetes/knative"},{"type":"link","label":"8.6.9 OpenFunction","href":"/docs/zh/develop/deploy/kubernetes/openfunction","docId":"develop/deploy/kubernetes/openfunction"},{"type":"link","label":"8.6.10 Kwasm","href":"/docs/zh/develop/deploy/kubernetes/kwasm","docId":"develop/deploy/kubernetes/kwasm"}],"href":"/docs/zh/category/use-cases"}],"href":"/docs/zh/category/deploy-wasmedge-apps-in-kubernetes"}],"embedSidebar":[{"type":"link","label":"Embed Wasm Functions in Your Apps","href":"/docs/zh/embed/overview","docId":"embed/overview"},{"type":"category","label":"Quick Start","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"1 Install Notes","href":"/docs/zh/embed/quick-start/install","docId":"embed/quick-start/install"},{"type":"link","label":"2 Create a Wasm app using Rust and wasmedge-bindgen","href":"/docs/zh/embed/quick-start/wasm-app-in-rust","docId":"embed/quick-start/wasm-app-in-rust"},{"type":"link","label":"2 Embed the Wasm app into your Go Host app","href":"/docs/zh/embed/quick-start/embed-wasm-apps-go","docId":"embed/quick-start/embed-wasm-apps-go"}],"href":"/docs/zh/category/quick-start"},{"type":"category","label":"Passing Complex Data","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"3.1 WasmEdge-Bindgen Introduction","href":"/docs/zh/embed/data/intro","docId":"embed/data/intro"},{"type":"link","label":"3.2 Rust Host application with wasmedge-bindgen","href":"/docs/zh/embed/data/rust","docId":"embed/data/rust"},{"type":"link","label":"3.3 Go Host application with wasmedge-bindgen","href":"/docs/zh/embed/data/go","docId":"embed/data/go"}],"href":"/docs/zh/category/passing-complex-data"},{"type":"link","label":"Developing components using witc","href":"/docs/zh/embed/witc","docId":"embed/witc"},{"type":"category","label":"C SDK for Embedding Wasm Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"4.1 WasmEdge C SDK Introduction","href":"/docs/zh/embed/c/intro","docId":"embed/c/intro"},{"type":"link","label":"4.2 Use WasmEdge Library","href":"/docs/zh/embed/c/library","docId":"embed/c/library"},{"type":"link","label":"4.3 Host Functions","href":"/docs/zh/embed/c/host_function","docId":"embed/c/host_function"},{"type":"link","label":"4.4 Customized External References","href":"/docs/zh/embed/c/externref","docId":"embed/c/externref"},{"type":"link","label":"4.5 Multiple WASM Module Example","href":"/docs/zh/embed/c/multiple_modules","docId":"embed/c/multiple_modules"},{"type":"category","label":"API Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"4.6.1  0.12.0 API Documentation","href":"/docs/zh/embed/c/reference/0.12.0","docId":"embed/c/reference/0.12.0"},{"type":"link","label":"4.6.2 Upgrade to WasmEdge 0.12.0","href":"/docs/zh/embed/c/reference/upgrade_to_0.12.0","docId":"embed/c/reference/upgrade_to_0.12.0"},{"type":"link","label":"4.6.3 C API 0.11.2 Documentation","href":"/docs/zh/embed/c/reference/0.11.2","docId":"embed/c/reference/0.11.2"},{"type":"link","label":"4.6.4 Upgrade to WasmEdge 0.11.0","href":"/docs/zh/embed/c/reference/upgrade_to_0.11.0","docId":"embed/c/reference/upgrade_to_0.11.0"},{"type":"link","label":"4.6.5 C API 0.10.1 Documentation","href":"/docs/zh/embed/c/reference/0.10.1","docId":"embed/c/reference/0.10.1"},{"type":"link","label":"4.6.6 Upgrade to WasmEdge 0.10.0","href":"/docs/zh/embed/c/reference/upgrade_to_0.10.0","docId":"embed/c/reference/upgrade_to_0.10.0"},{"type":"link","label":"4.6.7 C API 0.9.1 Documentation","href":"/docs/zh/embed/c/reference/0.9.1","docId":"embed/c/reference/0.9.1"}],"href":"/docs/zh/category/api-reference"}],"href":"/docs/zh/category/c-sdk-for-embedding-wasm-functions"},{"type":"category","label":"Rust SDK for Embedding Wasm Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"5.1 WasmEdge Rust SDK Introduction","href":"/docs/zh/embed/rust/intro","docId":"embed/rust/intro"},{"type":"link","label":"5.2 Embed Wasm Apps","href":"/docs/zh/embed/rust/app","docId":"embed/rust/app"},{"type":"link","label":"5.3 Embed Wasm Functions and Async Functions","href":"/docs/zh/embed/rust/function","docId":"embed/rust/function"},{"type":"link","label":"5.4 Pass Complex Data","href":"/docs/zh/embed/rust/complex_data","docId":"embed/rust/complex_data"},{"type":"link","label":"5.5 AI Inference with Pytorch","href":"/docs/zh/embed/rust/ai","docId":"embed/rust/ai"},{"type":"link","label":"5.6 Asyncfy","href":"/docs/zh/embed/rust/asyncfy","docId":"embed/rust/asyncfy"},{"type":"link","label":"4.7 API Reference","href":"/docs/zh/embed/rust/reference","docId":"embed/rust/reference"}],"href":"/docs/zh/category/rust-sdk-for-embedding-wasm-functions"},{"type":"category","label":"Go SDK for Embedding Wasm Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"6.1 WasmEdge Go SDK Introduction","href":"/docs/zh/embed/go/intro","docId":"embed/go/intro"},{"type":"link","label":"6.2 Embed a standalone WASM app","href":"/docs/zh/embed/go/app","docId":"embed/go/app"},{"type":"link","label":"6.3 Embed Wasm Functions","href":"/docs/zh/embed/go/function","docId":"embed/go/function"},{"type":"link","label":"6.4 Pass complex parameters to Wasm functions","href":"/docs/zh/embed/go/passing_data","docId":"embed/go/passing_data"},{"type":"link","label":"6.5 AI Inference with TensorFlow","href":"/docs/zh/embed/go/ai","docId":"embed/go/ai"},{"type":"link","label":"6.6 Embed a bindgen function","href":"/docs/zh/embed/go/bindgen","docId":"embed/go/bindgen"},{"type":"category","label":"API Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"6.7.1 Go API 0.12.0 API Documentation","href":"/docs/zh/embed/go/reference/0.12.0","docId":"embed/go/reference/0.12.0"},{"type":"link","label":"6.7.2 Upgrade to WasmEdge-Go v0.12.0","href":"/docs/zh/embed/go/reference/upgrade_to_0.12.0","docId":"embed/go/reference/upgrade_to_0.12.0"},{"type":"link","label":"6.7.3 Go API 0.11.2 Documentation","href":"/docs/zh/embed/go/reference/0.11.2","docId":"embed/go/reference/0.11.2"},{"type":"link","label":"6.7.4 Upgrade to WasmEdge 0.11.0","href":"/docs/zh/embed/go/reference/upgrade_to_0.11.0","docId":"embed/go/reference/upgrade_to_0.11.0"},{"type":"link","label":"6.7.6 Go API 0.10.1  Documentation","href":"/docs/zh/embed/go/reference/0.10.1","docId":"embed/go/reference/0.10.1"},{"type":"link","label":"6.7.6 Upgrade to WasmEdge-Go 0.10.0","href":"/docs/zh/embed/go/reference/upgrade_to_0.10.0","docId":"embed/go/reference/upgrade_to_0.10.0"},{"type":"link","label":"6.7.7 Go API 0.9.1 Documentation","href":"/docs/zh/embed/go/reference/0.9.1","docId":"embed/go/reference/0.9.1"}],"href":"/docs/zh/category/api-reference-1"}],"href":"/docs/zh/category/go-sdk-for-embedding-wasm-functions"},{"type":"category","label":"Java SDK for Embedding Wasm Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"6.1 WasmEdge Java SDK Introduction","href":"/docs/zh/embed/java/intro","docId":"embed/java/intro"}],"href":"/docs/zh/category/java-sdk-for-embedding-wasm-functions"},{"type":"category","label":"C++ SDK for Embedding Wasm Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"9.1 WasmEdge C++ SDK Introduction","href":"/docs/zh/embed/c++/intro","docId":"embed/c++/intro"}],"href":"/docs/zh/category/c-sdk-for-embedding-wasm-functions-1"},{"type":"category","label":"Python SDK for Embedding Wasm Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"10.1 WasmEdge Python SDK Introduction","href":"/docs/zh/embed/python/intro","docId":"embed/python/intro"}],"href":"/docs/zh/category/python-sdk-for-embedding-wasm-functions"},{"type":"category","label":"Use Cases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"UDF in the libSQL database","href":"/docs/zh/embed/use-case/libsql","docId":"embed/use-case/libsql"},{"type":"link","label":"YoMo framework","href":"/docs/zh/embed/use-case/yomo","docId":"embed/use-case/yomo"}],"href":"/docs/zh/category/use-cases-1"}],"contributeSidebar":[{"type":"link","label":"Contribute and Extend WasmEdge","href":"/docs/zh/contribute/overview","docId":"contribute/overview"},{"type":"category","label":"Build WasmEdge from source","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Build WasmEdge from source","href":"/docs/zh/contribute/source/build_from_src","docId":"contribute/source/build_from_src"},{"type":"link","label":"Docker Images for Building WasmEdge","href":"/docs/zh/contribute/source/docker","docId":"contribute/source/docker"},{"type":"category","label":"Build WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"2.2.1 Build on Linux","href":"/docs/zh/contribute/source/os/linux","docId":"contribute/source/os/linux"},{"type":"link","label":"2.2.2 Build on macOS","href":"/docs/zh/contribute/source/os/macos","docId":"contribute/source/os/macos"},{"type":"link","label":"2.2.3 Build on Windows 10","href":"/docs/zh/contribute/source/os/windows","docId":"contribute/source/os/windows"},{"type":"category","label":"Build and Run WasmEdge on Android","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"2.2.4.1 Build WasmEdge for Android","href":"/docs/zh/contribute/source/os/android/build","docId":"contribute/source/os/android/build"},{"type":"link","label":"2.2.4.2 CLI Tools","href":"/docs/zh/contribute/source/os/android/cli","docId":"contribute/source/os/android/cli"},{"type":"link","label":"2.2.4.3 Call WasmEdge functions from an NDK native app","href":"/docs/zh/contribute/source/os/android/ndk","docId":"contribute/source/os/android/ndk"},{"type":"link","label":"2.2.4.4 Call WasmEdge functions from an Android APK app","href":"/docs/zh/contribute/source/os/android/apk","docId":"contribute/source/os/android/apk"}],"href":"/docs/zh/category/build-and-run-wasmedge-on-android"},{"type":"link","label":"2.2.5 Build on OpenWRT","href":"/docs/zh/contribute/source/os/openwrt","docId":"contribute/source/os/openwrt"},{"type":"link","label":"2.2.6 Build on RISC-V 64","href":"/docs/zh/contribute/source/os/riscv64","docId":"contribute/source/os/riscv64"},{"type":"link","label":"2.2.7 Build on OpenHarmony","href":"/docs/zh/contribute/source/os/openharmony","docId":"contribute/source/os/openharmony"},{"type":"link","label":"2.2.8 Build on seL4 RTOS","href":"/docs/zh/contribute/source/os/sel4","docId":"contribute/source/os/sel4"},{"type":"link","label":"2.2.9 Build on Raspberry Pi","href":"/docs/zh/contribute/source/os/raspberrypi","docId":"contribute/source/os/raspberrypi"}],"href":"/docs/zh/category/build-wasmedge"},{"type":"category","label":"WasmEdge Plugin","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"2.3.1 Build with WASI-Crypto Plugin","href":"/docs/zh/contribute/source/plugin/wasi_crypto","docId":"contribute/source/plugin/wasi_crypto"},{"type":"link","label":"2.3.2 Build with WASI-nn Plugin","href":"/docs/zh/contribute/source/plugin/was_nn","docId":"contribute/source/plugin/was_nn"},{"type":"link","label":"2.3.3 Build with WasmEdge-httpsReq Plugin","href":"/docs/zh/contribute/source/plugin/httpsreq","docId":"contribute/source/plugin/httpsreq"},{"type":"link","label":"2.3.4 Build with eBPF Plugin","href":"/docs/zh/contribute/source/plugin/ebpf","docId":"contribute/source/plugin/ebpf"},{"type":"link","label":"2.3.5 Build with Rusttls Plugin","href":"/docs/zh/contribute/source/plugin/rusttls","docId":"contribute/source/plugin/rusttls"},{"type":"link","label":"2.3.6 Build WasmEdge With WasmEdge-Process Plug-in","href":"/docs/zh/contribute/source/plugin/process","docId":"contribute/source/plugin/process"}],"href":"/docs/zh/category/wasmedge-plugin"}],"href":"/docs/zh/category/build-wasmedge-from-source"},{"type":"category","label":"WasmEdge Plugin System","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"3.1 WasmEdge Plug-in System Introduction","href":"/docs/zh/contribute/plugin/intro","docId":"contribute/plugin/intro"},{"type":"link","label":"3.2 Develop WasmEdge Plug-in in C API","href":"/docs/zh/contribute/plugin/develop_plugin_c","docId":"contribute/plugin/develop_plugin_c"},{"type":"link","label":"3.3 Develop WasmEdge Plug-in in C++ API","href":"/docs/zh/contribute/plugin/develop_plugin_cpp","docId":"contribute/plugin/develop_plugin_cpp"}],"href":"/docs/zh/category/wasmedge-plugin-system"},{"type":"link","label":"Testing","href":"/docs/zh/contribute/test","docId":"contribute/test"},{"type":"link","label":"Fuzzing","href":"/docs/zh/contribute/fuzzing","docId":"contribute/fuzzing"},{"type":"link","label":"WasmEdge Internal","href":"/docs/zh/contribute/internal","docId":"contribute/internal"},{"type":"link","label":"Installer System explanation","href":"/docs/zh/contribute/installer","docId":"contribute/installer"},{"type":"link","label":"Contributing Steps","href":"/docs/zh/contribute/","docId":"contribute/contribute"},{"type":"link","label":"Release Process","href":"/docs/zh/contribute/release","docId":"contribute/release"},{"type":"link","label":"Join WasmEdge Community","href":"/docs/zh/contribute/community","docId":"contribute/community"}]},"docs":{"contribute/community":{"id":"contribute/community","title":"Join WasmEdge Community","description":"Everyone is welcome to join the WasmEdge community.","sidebar":"contributeSidebar"},"contribute/contribute":{"id":"contribute/contribute","title":"Contributing Steps","description":"Setup Development Environment","sidebar":"contributeSidebar"},"contribute/fuzzing":{"id":"contribute/fuzzing","title":"Fuzzing","description":"Work in Progress","sidebar":"contributeSidebar"},"contribute/installer":{"id":"contribute/installer","title":"Installer System explanation","description":"Overview","sidebar":"contributeSidebar"},"contribute/internal":{"id":"contribute/internal","title":"WasmEdge Internal","description":"Overview of WasmEdge Execution Flow","sidebar":"contributeSidebar"},"contribute/overview":{"id":"contribute/overview","title":"Contribute and Extend WasmEdge","description":"Contribution is always welcome! The WebAssembly ecosystem is still in its early days. Hosted by CNCF, WasmEdge aims to become an open source \u201creference implementation\u201d of WebAssembly and its edge-related extensions. WasmEdge is developed in the open, and is constantly being improved by our users, contributors, and maintainers. It is because of you that we can bring great software to the community.We\'re looking forward to working together with you!","sidebar":"contributeSidebar"},"contribute/plugin/develop_plugin_c":{"id":"contribute/plugin/develop_plugin_c","title":"3.2 Develop WasmEdge Plug-in in C API","description":"WasmEdge provides a C++ based API for registering extension modules and host functions. While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, the plugin API allows such extensions to be incorporated into WasmEdge\'s own building and releasing process.","sidebar":"contributeSidebar"},"contribute/plugin/develop_plugin_cpp":{"id":"contribute/plugin/develop_plugin_cpp","title":"3.3 Develop WasmEdge Plug-in in C++ API","description":"We recommend developers to develop plug-ins in WasmEdge C API.","sidebar":"contributeSidebar"},"contribute/plugin/intro":{"id":"contribute/plugin/intro","title":"3.1 WasmEdge Plug-in System Introduction","description":"While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, developers should implement the host functions before compilation.","sidebar":"contributeSidebar"},"contribute/release":{"id":"contribute/release","title":"Release Process","description":"Create the releasing process issue of the new version","sidebar":"contributeSidebar"},"contribute/source/build_from_src":{"id":"contribute/source/build_from_src","title":"Build WasmEdge from source","description":"Please follow this guide to build and test WasmEdge from the source code.","sidebar":"contributeSidebar"},"contribute/source/docker":{"id":"contribute/source/docker","title":"Docker Images for Building WasmEdge","description":"WasmEdge supports a wide range of Linux distributions dated back to 2014. The official release contains statically linked binaries and libraries for older Linux systems.","sidebar":"contributeSidebar"},"contribute/source/os/android/apk":{"id":"contribute/source/os/android/apk","title":"2.2.4.4 Call WasmEdge functions from an Android APK app","description":"In this section, we will show you how to build a \\"regular\\" Android app (i.e., an APK file that can be installed on an Android device). The APK app embeds a WasmEdge Runtime. It can call WebAssembly functions through the embedded WasmEdge. The benefit is that developers can safely embed high-performance functions written in several different languages (e.g., Rust, JS, Grain, TinyGo etc) into a Kotlin application.","sidebar":"contributeSidebar"},"contribute/source/os/android/build":{"id":"contribute/source/os/android/build","title":"2.2.4.1 Build WasmEdge for Android","description":"The WasmEdge Runtime releases come with pre-built binaries for the Android OS. Why WasmEdge on Android?","sidebar":"contributeSidebar"},"contribute/source/os/android/cli":{"id":"contribute/source/os/android/cli","title":"2.2.4.2 CLI Tools","description":"In this section, we will show you how to use WasmEdge CLI tools on Android devices. We will showcase a full WasmEdge demo to perform image classification (Tensorflow-based AI inference) on an Android device.","sidebar":"contributeSidebar"},"contribute/source/os/android/ndk":{"id":"contribute/source/os/android/ndk","title":"2.2.4.3 Call WasmEdge functions from an NDK native app","description":"In this section, we will demonstrate how to build an Android native application using C and the Android SDK. The native application uses the WasmEdge C SDK to embed the WasmEdge Runtime, and call WASM functions through WasmEdge.","sidebar":"contributeSidebar"},"contribute/source/os/linux":{"id":"contribute/source/os/linux","title":"2.2.1 Build on Linux","description":"Get the Source Code","sidebar":"contributeSidebar"},"contribute/source/os/macos":{"id":"contribute/source/os/macos","title":"2.2.2 Build on macOS","description":"Currently, WasmEdge project on MacOS supports both Intel and M1 models. However, we only test and develop on Catalina, Big Sur, and Monterey.","sidebar":"contributeSidebar"},"contribute/source/os/openharmony":{"id":"contribute/source/os/openharmony","title":"2.2.7 Build on OpenHarmony","description":"WIP. For Chinese speakers, please check out this instruction.","sidebar":"contributeSidebar"},"contribute/source/os/openwrt":{"id":"contribute/source/os/openwrt","title":"2.2.5 Build on OpenWRT","description":"Please follow this tutorial to build and test WasmEdge in OpenWrt(x86_64) from source code.","sidebar":"contributeSidebar"},"contribute/source/os/raspberrypi":{"id":"contribute/source/os/raspberrypi","title":"2.2.9 Build on Raspberry Pi","description":"Raspberry Pi uses 64-bit processors starting from the 3 Model B. So WasmEdge can be executed on Raspberry Pi as well. You can choose any 64-bit Linux distribution, such as Raspbian, Ubuntu or Manjaro for ARM. This document has been tested on the Manjaro for ARM distribution and the hardware is the Raspberry Pi 3 Model B.","sidebar":"contributeSidebar"},"contribute/source/os/riscv64":{"id":"contribute/source/os/riscv64","title":"2.2.6 Build on RISC-V 64","description":"Prepare the Environment","sidebar":"contributeSidebar"},"contribute/source/os/sel4":{"id":"contribute/source/os/sel4","title":"2.2.8 Build on seL4 RTOS","description":"Video demo | Build logs | Build artifact","sidebar":"contributeSidebar"},"contribute/source/os/windows":{"id":"contribute/source/os/windows","title":"2.2.3 Build on Windows 10","description":"You can also find the details here.","sidebar":"contributeSidebar"},"contribute/source/plugin/ebpf":{"id":"contribute/source/plugin/ebpf","title":"2.3.4 Build with eBPF Plugin","description":"WIP","sidebar":"contributeSidebar"},"contribute/source/plugin/httpsreq":{"id":"contribute/source/plugin/httpsreq","title":"2.3.3 Build with WasmEdge-httpsReq Plugin","description":"Prerequisites","sidebar":"contributeSidebar"},"contribute/source/plugin/process":{"id":"contribute/source/plugin/process","title":"2.3.6 Build WasmEdge With WasmEdge-Process Plug-in","description":"Prerequisites","sidebar":"contributeSidebar"},"contribute/source/plugin/rusttls":{"id":"contribute/source/plugin/rusttls","title":"2.3.5 Build with Rusttls Plugin","description":"WIP","sidebar":"contributeSidebar"},"contribute/source/plugin/was_nn":{"id":"contribute/source/plugin/was_nn","title":"2.3.2 Build with WASI-nn Plugin","description":"Prerequisites","sidebar":"contributeSidebar"},"contribute/source/plugin/wasi_crypto":{"id":"contribute/source/plugin/wasi_crypto","title":"2.3.1 Build with WASI-Crypto Plugin","description":"Prerequisites","sidebar":"contributeSidebar"},"contribute/test":{"id":"contribute/test","title":"Testing","description":"Work in Progress","sidebar":"contributeSidebar"},"develop/build-and-run/aot":{"id":"develop/build-and-run/aot","title":"The AoT Compiler","description":"One of the most important features of WasmEdge is the AoT compiler. The wasmedgec can compile any wasm file into native machine code (i.e., the AOT compiler). For the pure WebAssembly, the wasmedge tool will execute the WASM in interpreter mode. After compiling with the wasmedgec AOT compiler, the wasmedge tool can execute the WASM in AOT mode which is much faster.","sidebar":"developSidebar"},"develop/build-and-run/cli":{"id":"develop/build-and-run/cli","title":"The wasmedge CLI","description":"After intalling WasmEdge, you can use the wasmedge CLI to execute a compiled wasm file. We will cover how to run Wasm files with WasmEdge on your own machine and Docker images.","sidebar":"developSidebar"},"develop/build-and-run/docker_wasm":{"id":"develop/build-and-run/docker_wasm","title":"Docker + Wasm","description":"The Docker Desktop distributes with the WasmEdge Runtime embedded. That allows developers to build, share and run very lightweight containers (i.e., a scratch empty container with only the .wasm file without any Linux OS libraries or files) through Docker tools.","sidebar":"developSidebar"},"develop/build-and-run/install":{"id":"develop/build-and-run/install","title":"Install and uninstall WasmEdge","description":"In this chapter, we will discuss ways to install and uninstall the WasmEdge Runtime on various OSes and platforms.","sidebar":"developSidebar"},"develop/c/hello_world":{"id":"develop/c/hello_world","title":"6.1 Hello World","description":"This chapter will take Hello World as an example to show how to compile a C program to Wasm bytecode and run in WasmEdge.","sidebar":"developSidebar"},"develop/c/networking":{"id":"develop/c/networking","title":"6.2 Networking Socket","description":"Work in Progress","sidebar":"developSidebar"},"develop/c/simd":{"id":"develop/c/simd","title":"6.4 SIMD","description":"128-bit packed Single Instruction Multiple Data (SIMD) instructions provide simultaneous computations over packed data in just one instruction. It\'s commonly used to improve performance for multimedia applications. With the SIMD proposal, the modules can benefit from using these commonly used instructions in modern hardware to gain more speedup.","sidebar":"developSidebar"},"develop/c/threads":{"id":"develop/c/threads","title":"6.3 Thread","description":"Work in Progress","sidebar":"developSidebar"},"develop/deploy/cri-runtime/containerd":{"id":"develop/deploy/cri-runtime/containerd","title":"8.6.1 Deploy with containerd\'s runwasi","description":"Work in Progress","sidebar":"developSidebar"},"develop/deploy/cri-runtime/containerd-crun":{"id":"develop/deploy/cri-runtime/containerd-crun","title":"8.6.2 containerd + crun","description":"Quick start","sidebar":"developSidebar"},"develop/deploy/cri-runtime/crio-crun":{"id":"develop/deploy/cri-runtime/crio-crun","title":"8.6.3 CRI-O + crun","description":"Quick start","sidebar":"developSidebar"},"develop/deploy/docker_wasm":{"id":"develop/deploy/docker_wasm","title":"8.2 Docker + Wasm","description":"Docker announced its support for WebAssembly in partnership with WasmEdge. Now we can use one single command line docker compose up to run Wasm Apps.","sidebar":"developSidebar"},"develop/deploy/intro":{"id":"develop/deploy/intro","title":"8.1 Introduction","description":"WasmEdge could be integrated with the existing cloud native infra seamlessly. So developers can leverage container tools such as Kubernetes, Docker and CRI-O to deploy, manage, and run lightweight WebAssembly applications. In this chapter, we will demonstrate how Kubernetes ecosystem tools work with WasmEdge WebAssembly applications.","sidebar":"developSidebar"},"develop/deploy/kubernetes/kind":{"id":"develop/deploy/kubernetes/kind","title":"8.6.7 Kind","description":"KinD is a Kubernetes distribution that runs inside Docker and is well suited for local development or integration testing. It runs containerd as CRI and crun as OCI Runtime.","sidebar":"developSidebar"},"develop/deploy/kubernetes/knative":{"id":"develop/deploy/kubernetes/knative","title":"8.6.8 Knative","description":"Knative is a platform-agnostic solution for running serverless deployments.","sidebar":"developSidebar"},"develop/deploy/kubernetes/kubedge":{"id":"develop/deploy/kubernetes/kubedge","title":"8.6.6 KubeEdge","description":"KubeEdge is an open source system for extending native containerized application orchestration capabilities to hosts at Edge.","sidebar":"developSidebar"},"develop/deploy/kubernetes/kubernetes-containerd-crun":{"id":"develop/deploy/kubernetes/kubernetes-containerd-crun","title":"8.6.1 Kubernetes + containerd + crun","description":"Quick start","sidebar":"developSidebar"},"develop/deploy/kubernetes/kubernetes-containerd-runwasi":{"id":"develop/deploy/kubernetes/kubernetes-containerd-runwasi","title":"8.6.3 Kubernetes + Containerd + Runwasi","description":"Work in Progress","sidebar":"developSidebar"},"develop/deploy/kubernetes/kubernetes-cri-o":{"id":"develop/deploy/kubernetes/kubernetes-cri-o","title":"8.6.2 Kubernetes + CRI-O + crun","description":"Quick start","sidebar":"developSidebar"},"develop/deploy/kubernetes/kwasm":{"id":"develop/deploy/kubernetes/kwasm","title":"8.6.10 Kwasm","description":"Kwasm is a Kubernetes Operator that adds WebAssembly support to your Kubernetes nodes.","sidebar":"developSidebar"},"develop/deploy/kubernetes/openfunction":{"id":"develop/deploy/kubernetes/openfunction","title":"8.6.9 OpenFunction","description":"WIP","sidebar":"developSidebar"},"develop/deploy/kubernetes/openyurt":{"id":"develop/deploy/kubernetes/openyurt","title":"8.6.4 OpenYurt","description":"OpenYurt is the intelligent edge computing platform which aims to extend the Cloud Native ecosystem to edge computing and IoT scenarios.","sidebar":"developSidebar"},"develop/deploy/kubernetes/superedge":{"id":"develop/deploy/kubernetes/superedge","title":"8.6.5 SuperEdge","description":"SuperEdge is an open-source container management system for edge computing. It extends native Kubernetes to the edge in a non-intrusive way.","sidebar":"developSidebar"},"develop/deploy/oci-runtime/crun":{"id":"develop/deploy/oci-runtime/crun","title":"8.5.2 Deploy with crun","description":"The crun project has WasmEdge support baked in. This chapter will walk you through deploying Wasm images with crun.","sidebar":"developSidebar"},"develop/deploy/oci-runtime/quark":{"id":"develop/deploy/oci-runtime/quark","title":"8.5.4 Deploy with quark","description":"Work in Progress","sidebar":"developSidebar"},"develop/deploy/oci-runtime/youki":{"id":"develop/deploy/oci-runtime/youki","title":"8.5.3 Deploy with youki","description":"youki is an OCI container runtime written in Rust. youki has WasmEdge baked in. This chapter will walk you through deploying Wasm images with youki.","sidebar":"developSidebar"},"develop/deploy/podman":{"id":"develop/deploy/podman","title":"8.3 Podman","description":"Fedora Platform","sidebar":"developSidebar"},"develop/deploy/using-wasmedge-in-docker":{"id":"develop/deploy/using-wasmedge-in-docker","title":"8.5 Using WasmEdge in Docker","description":"What is the WasmEdge DockerSlim","sidebar":"developSidebar"},"develop/getting-started/quick_start":{"id":"develop/getting-started/quick_start","title":"Quick start on Linux","description":"In this guide, we will walk you through how to quickly install and run the WasmEdge Runtime on a generic Linux distribution (such as Ubuntu, Debian, Raspberry OS or WSL on Windows). Comprehensive and OS-specific installation instructions can be found here.","sidebar":"developSidebar"},"develop/getting-started/quick_start_docker":{"id":"develop/getting-started/quick_start_docker","title":"Quick start with Docker","description":"In this guide, we will walk you through how to quickly run WasmEdge apps in Docker Desktop. There is no additional dependencies as the entire development and runtime environments are managed by Docker Desktop.","sidebar":"developSidebar"},"develop/getting-started/quick_start_redhat":{"id":"develop/getting-started/quick_start_redhat","title":"Quick start with Red Hat","description":"In this guide, we will walk you through how to quickly run WasmEdge apps in Fedora / CentOS / Red Hat Linux / OpenShift systems. There is no additional dependencies as the entire development and runtime environments are managed by OpenSift / Podman.","sidebar":"developSidebar"},"develop/go/hello_world":{"id":"develop/go/hello_world","title":"7.1 TinyGo","description":"The best way to run Go programs in WasmEdge is to compile Go source code to WebAssembly using TinyGo. In this article, we will show you how.","sidebar":"developSidebar"},"develop/javascript/es6":{"id":"develop/javascript/es6","title":"5.5 ES6 Modules","description":"The WasmEdge QuickJS runtime supports ES6 modules. In fact, the rollup commands we used in the React SSR examples convert and bundle CommonJS and NPM modules into ES6 modules so that they can be executed in WasmEdge QuickJS. This article will show you how to use ES6 module in WasmEdge.","sidebar":"developSidebar"},"develop/javascript/hello_world":{"id":"develop/javascript/hello_world","title":"5.2 Quick Start with JavaScript on WasmEdge","description":"Prerequisites","sidebar":"developSidebar"},"develop/javascript/intro":{"id":"develop/javascript/intro","title":"5.1 Introduction","description":"WebAssembly started as a \\"JavaScript alternative for browsers\\". The idea is to run high-performance applications compiled from languages like C/C++ or Rust safely in browsers. In the browser, WebAssembly runs side by side with JavaScript.","sidebar":"developSidebar"},"develop/javascript/modules":{"id":"develop/javascript/modules","title":"5.6 Built-in modules","description":"The WasmEdge QuickJS runtime supports ES6 and NPM modules for application developers. However, those approaches are too cumbersome for system developers. They need an easier way to add multiple JavaScript modules and APIs into the runtime without having to go through build tools like rollup.js. The WasmEdge QuickJS modules system allow developers to just drop JavaScript files into a modules folder, and have the JavaScript functions defined in the files immediately available to all JavaScript programs in the runtime. A good use case for this modules system is to support Node.js APIs in WasmEdge.","sidebar":"developSidebar"},"develop/javascript/networking":{"id":"develop/javascript/networking","title":"5.3.1 Networking","description":"The QuickJS WasmEdge Runtime supports Node.js\'s http and fetch APIs via the WasmEdge networking socket extension. That enables WasmEdge developers to create HTTP server and client, as well as TCP/IP server and client, applications in JavaScript.","sidebar":"developSidebar"},"develop/javascript/nodejs":{"id":"develop/javascript/nodejs","title":"5.4 Node.js support","description":"Many existing JavaScript apps simply use Node.js built-in APIs. In order to support and reuse these JavaScript apps, we are in the process of implementing many Node.JS APIs for WasmEdge QuickJS. The goal is to have unmodified Node.js programs running in WasmEdge QuickJS.","sidebar":"developSidebar"},"develop/javascript/npm":{"id":"develop/javascript/npm","title":"5.7 NodeJS and NPM modules","description":"With rollup.js, we can run CommonJS (CJS) and NodeJS (NPM) modules in WasmEdge too.","sidebar":"developSidebar"},"develop/javascript/rust":{"id":"develop/javascript/rust","title":"5.8 Native JS API in Rust","description":"For JavaScript developers, incorporating Rust functions into JavaScript APIs is useful. That enables developers to write programs in \\"pure JavaScript\\" and yet still take advantage of the high performance Rust functions. With the WasmEdge Runtime, you can do exactly that.","sidebar":"developSidebar"},"develop/javascript/ssr":{"id":"develop/javascript/ssr","title":"5.10 Example: Running SSR in WasmEdge","description":"React is very popular JavaScript web UI framework. A React application is \\"compiled\\" into an HTML and JavaScript static web site. The web UI is rendered through the generated JavaScript code. However, it is often too slow and resource consuming to execute the complex generated JavaScript entirely in the browser to build the interactive HTML DOM objects. React Server Side Rendering (SSR) delegates the JavaScript UI rendering to a server, and have the server stream rendered HTML DOM objects to the browser. The WasmEdge JavaScript runtime provides a lightweight and high performance container to run React SSR functions on edge servers.","sidebar":"developSidebar"},"develop/javascript/tensorflow":{"id":"develop/javascript/tensorflow","title":"5.9 TensorFlow","description":"The WasmEdge-QuickJs supports the WasmEdge TensorFlow lite inference extension so that your JavaScript can run an ImageNet model for image classification. This article will show you how to use the TensorFlow Rust SDK for WasmEdge from your javascript program. You will first download the WasmEdge QuickJS Runtime with tensorflow support built-in.","sidebar":"developSidebar"},"develop/overview":{"id":"develop/overview","title":"\u5f00\u53d1 Wasm \u5e94\u7528\u7a0b\u5e8f","description":"WasmEdge \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u3001\u9ad8\u6027\u80fd\u548c\u53ef\u6269\u5c55\u7684 WebAssembly \u8fd0\u884c\u65f6\uff0c\u9002\u7528\u4e8e\u4e91\u539f\u751f\u3001\u8fb9\u7f18\u548c\u53bb\u4e2d\u5fc3\u5316\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4e3a serverless \u5e94\u7528\u7a0b\u5e8f\u3001\u5d4c\u5165\u5f0f\u51fd\u6570\u3001\u5fae\u670d\u52a1\u3001UDF\u3001\u667a\u80fd\u5408\u7ea6\u548c\u7269\u8054\u7f51\u8bbe\u5907\u63d0\u4f9b\u5b89\u5168\u8fd0\u884c\u73af\u5883\u3002WasmEdge \u76ee\u524d\u662f CNCF\uff08\u4e91\u539f\u751f\u8ba1\u7b97\u57fa\u91d1\u4f1a\uff09\u7684\u6c99\u76d2\u9879\u76ee\u3002","sidebar":"developSidebar"},"develop/rust/ai_inference/openvino":{"id":"develop/rust/ai_inference/openvino","title":"4.7.3 OpenVINO","description":"We will use this example project to show how to do AI inference with an OpenVINO model in WasmEdge and Rust.","sidebar":"developSidebar"},"develop/rust/ai_inference/pytorch":{"id":"develop/rust/ai_inference/pytorch","title":"4.7.1 PyTorch","description":"We will use this example project to show how to do AI inference with a PyTorch model in WasmEdge and Rust.","sidebar":"developSidebar"},"develop/rust/ai_inference/tensorflow_lite":{"id":"develop/rust/ai_inference/tensorflow_lite","title":"4.7.2 TensorFlow Lite","description":"We will use this example project to show how to do AI inference with a TensorFlow Lite model in WasmEdge and Rust.","sidebar":"developSidebar"},"develop/rust/bindgen":{"id":"develop/rust/bindgen","title":"4.10 Bindgen of Rust Functions","description":"If your Rust program has a main() function, you could compile it into WebAssembly, and run it using the wasmedge CLI tool as a standalone application. However, a far more common use case is to compile a Rust function into WebAssembly, and then call it from a host application. That is known as an embedded WASM function. The host application uses WasmEdge language SDKs (e.g., Go, Rust, C, Python (WIP) and Java (WIP)) to call those WASM functions compiled from Rust source code. In this chapter, we will cover a little about WasmEdge-bindgen and you can find more information here","sidebar":"developSidebar"},"develop/rust/command":{"id":"develop/rust/command","title":"4.9 Command interface","description":"WASI enables WebAssembly programs to call standard library functions in the host operating system. It does so through a fine-grained security model known as \u201ccapability-based security\u201d. The WebAssembly VM owner can grant access to host system resources when the VM starts up. The program cannot access any resources (e.g., file folders) that are not explicitly allowed.","sidebar":"developSidebar"},"develop/rust/dapr":{"id":"develop/rust/dapr","title":"4.8 Use WasmEdge\'s Dapr SDK to Connect Dapr Sidecar","description":"Second State launched a new WebAssembly-based SDK for the Dapr API, which provides an easy way for Rust-based microservices in WasmEdge to interact with Dapr APIs and sidecar services.","sidebar":"developSidebar"},"develop/rust/hello_world":{"id":"develop/rust/hello_world","title":"4.1 Hello world","description":"Before we started, make sure you have Rust and WasmEdge installed.","sidebar":"developSidebar"},"develop/rust/http_service/client":{"id":"develop/rust/http_service/client","title":"4.3.1 Client","description":"WasmEdge allows Rust developers to use APIs they are already familiar with to access the Internet via the HTTP or HTTPS protocols. In this chapter, we will cover simple synchronous clients, asynchronous clients, as well as clients based on low level hyper and socket APIs. For HTTP servers in WasmEdge, please see the next chapter.","sidebar":"developSidebar"},"develop/rust/http_service/server":{"id":"develop/rust/http_service/server","title":"4.3.1 Server","description":"In order for WasmEdge to become a cloud-native runtime for microservices, it needs to support HTTP servers. By its very nature, the HTTP server is always asynchronous. In this chapter, we will cover simple HTTP servers based on the wrap API, as well as low level hyper and socket APIs.","sidebar":"developSidebar"},"develop/rust/https-service":{"id":"develop/rust/https-service","title":"4.5 Networking for HTTPS","description":"The WasmEdge WASI socket API supports HTTP networking in Wasm apps. In order to achieve the goal of supporting HTTPS requests with the same API as an HTTP request, we now create a WasmEdge-HttpsReq plug-in using the OpenSSL library. In this chapter, we will give the example of HTTPS requests and explain the design.","sidebar":"developSidebar"},"develop/rust/my_sql_driver":{"id":"develop/rust/my_sql_driver","title":"4.7 MySQL-based Database Driver","description":"Database connection is necessary for today\'s enterprise development. WasmEdge provides MySQL-based drivers for Rust developer, enabling developers to build database applications in Rust and then running in WasmEdge.","sidebar":"developSidebar"},"develop/rust/os":{"id":"develop/rust/os","title":"4.2 Access OS services","description":"The WASI (WebAssembly Systems Interface) standard is designed to allow WebAssembly applications to access operating system services.","sidebar":"developSidebar"},"develop/rust/setup":{"id":"develop/rust/setup","title":"4.0 Set up Software for Building and Compiling Rust Programs","description":"In the following chapters, we will show how to build and compile Rust programs into Wasm bytecode and then run them in WasmEdge.","sidebar":"developSidebar"},"develop/rust/socket_networking/client":{"id":"develop/rust/socket_networking/client","title":"4.4.1 Client","description":"The wasmedgewasisocket crate enables Rust developers to create networking applications and compile them into WebAssembly for WasmEdge Runtime. One of the key features of WasmEdge is that it supports non-blocking sockets. That allows even a single threaded WASM application to handle concurrent network requests. For example, while the program is waiting for data to stream in from one connection, it can start or handle another connection.","sidebar":"developSidebar"},"develop/rust/socket_networking/server":{"id":"develop/rust/socket_networking/server","title":"4.4.1 Server","description":"As we described in the client chapter, with the WasmEdge socket API, it is also possible for Rust developers to work directly on the socket level. In order for WasmEdge to become a cloud-native runtime for microservices, it needs to support HTTP servers. So, in this chapter, we will discussan HTTP server example and a non-blocking HTTP server example.","sidebar":"developSidebar"},"develop/rust/ssr":{"id":"develop/rust/ssr","title":"4.11 Server-side rendering","description":"Frontend web frameworks allow developers to create web apps in a high level language and component model. The web app is built into a static web site to be rendered in the browser. While many frontend web frameworks are based on JavaScript, such as React and Vue, Rust-based frameworks are also emerging as the Rust language gains traction among developers. Those web frameworks render the HTML DOM UI using the WebAssembly, which is compiled from Rust source code. They use wasm-bindgen to tie the Rust to the HTML DOM.","sidebar":"developSidebar"},"develop/rust/wasicrypto":{"id":"develop/rust/wasicrypto","title":"4.8 Crypto for WASI","description":"While optimizing compilers could allow efficient implementation of cryptographic features in WebAssembly, there are several occasions as below where a host implementation is more desirable. WASI-crypto aims to fill those gaps by defining a standard interface as a set of APIs.","sidebar":"developSidebar"},"develop/wasmedge/component_model":{"id":"develop/wasmedge/component_model","title":"Component Model","description":"The component model for Wasm would dramatically improve Wasm module\u2019s reusability and composability. It will allow better access from one Wasm module to other modules and systems, including the operating system APIs (eg, networking).","sidebar":"developSidebar"},"develop/wasmedge/extensions/proposals":{"id":"develop/wasmedge/extensions/proposals","title":"WebAssembly specs","description":"WebAssembly features","sidebar":"developSidebar"},"develop/wasmedge/extensions/unique_extensions":{"id":"develop/wasmedge/extensions/unique_extensions","title":"WasmEdge extensions","description":"A challenge for running Wasm apps on the server side is the lack of support for Linux APIs and common application libraries.","sidebar":"developSidebar"},"develop/wasmedge/features":{"id":"develop/wasmedge/features","title":"WasmEdge Features","description":"WasmEdge (a sandbox project under CNCF) is a safe, fast, lightweight, portable, and extensible WebAssembly runtime.","sidebar":"developSidebar"},"embed/c/externref":{"id":"embed/c/externref","title":"4.4 Customized External References","description":"External References denotes an opaque and unforgettable reference to a host object. A new externref type can be passed into a Wasm module or returned from it. The Wasm module cannot reveal an externref value\'s bit pattern, nor create a fake host reference by an integer value.","sidebar":"embedSidebar"},"embed/c/host_function":{"id":"embed/c/host_function","title":"4.3 Host Functions","description":"Host functions are the functions outside WebAssembly and passed to WASM modules as imports.","sidebar":"embedSidebar"},"embed/c/intro":{"id":"embed/c/intro","title":"4.1 WasmEdge C SDK Introduction","description":"The WasmEdge C API denotes an interface to embed the WasmEdge runtime into a C program. The following are the quick start guide for working with the C APIs of WasmEdge. For the details of the WasmEdge C API, please refer to the full documentation. Before programming with the WasmEdge C API, please install WasmEdge first.","sidebar":"embedSidebar"},"embed/c/library":{"id":"embed/c/library","title":"4.2 Use WasmEdge Library","description":"When programming with WasmEdge C API, developers should include the required headers and link with the WasmEdge Library.","sidebar":"embedSidebar"},"embed/c/multiple_modules":{"id":"embed/c/multiple_modules","title":"4.5 Multiple WASM Module Example","description":"For those WASM modules export their functions, the other WASM modules can import them as a library.","sidebar":"embedSidebar"},"embed/c/reference/0.10.1":{"id":"embed/c/reference/0.10.1","title":"4.6.5 C API 0.10.1 Documentation","description":"WasmEdge C API denotes an interface to access the WasmEdge runtime at version 0.10.1. The following are the guides to working with the C APIs of WasmEdge.","sidebar":"embedSidebar"},"embed/c/reference/0.11.2":{"id":"embed/c/reference/0.11.2","title":"4.6.3 C API 0.11.2 Documentation","description":"WasmEdge C API denotes an interface to access the WasmEdge runtime. The following are the guides to working with the C APIs of WasmEdge.","sidebar":"embedSidebar"},"embed/c/reference/0.12.0":{"id":"embed/c/reference/0.12.0","title":"4.6.1  0.12.0 API Documentation","description":"WasmEdge C API denotes an interface to access the WasmEdge runtime. The following are the guides to working with the C APIs of WasmEdge.","sidebar":"embedSidebar"},"embed/c/reference/0.9.1":{"id":"embed/c/reference/0.9.1","title":"4.6.7 C API 0.9.1 Documentation","description":"WasmEdge C API denotes an interface to access the WasmEdge runtime at version 0.9.1. The following are the guides to working with the C APIs of WasmEdge.","sidebar":"embedSidebar"},"embed/c/reference/upgrade_to_0.10.0":{"id":"embed/c/reference/upgrade_to_0.10.0","title":"4.6.6 Upgrade to WasmEdge 0.10.0","description":"Due to the WasmEdge C API breaking changes, this document shows the guideline of programming with WasmEdge C API to upgrade from the 0.9.1 to the 0.10.0 version.","sidebar":"embedSidebar"},"embed/c/reference/upgrade_to_0.11.0":{"id":"embed/c/reference/upgrade_to_0.11.0","title":"4.6.4 Upgrade to WasmEdge 0.11.0","description":"Due to the WasmEdge C API breaking changes, this document shows the guideline for programming with WasmEdge C API to upgrade from the 0.10.1 to the 0.11.0 version.","sidebar":"embedSidebar"},"embed/c/reference/upgrade_to_0.12.0":{"id":"embed/c/reference/upgrade_to_0.12.0","title":"4.6.2 Upgrade to WasmEdge 0.12.0","description":"Due to the WasmEdge C API breaking changes, this document shows the guideline for programming with WasmEdge C API to upgrade from the 0.11.2 to the 0.12.0 version.","sidebar":"embedSidebar"},"embed/c++/intro":{"id":"embed/c++/intro","title":"9.1 WasmEdge C++ SDK Introduction","description":"Work in Progress","sidebar":"embedSidebar"},"embed/data/go":{"id":"embed/data/go","title":"3.3 Go Host application with wasmedge-bindgen","description":"WIP","sidebar":"embedSidebar"},"embed/data/intro":{"id":"embed/data/intro","title":"3.1 WasmEdge-Bindgen Introduction","description":"Passing complex data like string is difficult for WebAssembly since Wasm does not have a string data type. That\'s why we have the WasmEdge-Bindgen project. The Wasmedge-Bindgen project provides Rust macros for functions to accept and return complex data types, and then for functions in the host to call such Rust functions running in WasmEdge.","sidebar":"embedSidebar"},"embed/data/rust":{"id":"embed/data/rust","title":"3.2 Rust Host application with wasmedge-bindgen","description":"WIP","sidebar":"embedSidebar"},"embed/go/ai":{"id":"embed/go/ai","title":"6.5 AI Inference with TensorFlow","description":"In this section, we will show you how to create a Tensorflow inference function in Rust for image classification, and then embed it into a Go application. The project source code is available here.","sidebar":"embedSidebar"},"embed/go/app":{"id":"embed/go/app","title":"6.2 Embed a standalone WASM app","description":"The WasmEdge Go SDK can embed standalone WebAssembly applications \u2014 ie a Rust application with a main() function compiled into WebAssembly.","sidebar":"embedSidebar"},"embed/go/bindgen":{"id":"embed/go/bindgen","title":"6.6 Embed a bindgen function","description":"In this example, we will demonstrate how to call a few simple WebAssembly functions from a Go app. The functions are written in Rust, and require complex call parameters and return values. The #[wasmedge_bindgen] macro is needed for the compiler tools to auto-generate the correct code to pass call parameters from Go to WebAssembly.","sidebar":"embedSidebar"},"embed/go/function":{"id":"embed/go/function","title":"6.3 Embed Wasm Functions","description":"In this example, we will demonstrate how to call a few simple WebAssembly functions from a Go app. The functions are written in Rust, and require complex call parameters and return values. The #[wasmedge_bindgen] macro is needed for the compiler tools to auto-generate the correct code to pass call parameters from Go to WebAssembly.","sidebar":"embedSidebar"},"embed/go/intro":{"id":"embed/go/intro","title":"6.1 WasmEdge Go SDK Introduction","description":"The following are the guide to work with the WasmEdge Go API. You can embed the WasmEdge into your go application through the WasmEdge Go API.","sidebar":"embedSidebar"},"embed/go/passing_data":{"id":"embed/go/passing_data","title":"6.4 Pass complex parameters to Wasm functions","description":"An issue with the WebAssembly spec is that it only supports a very limited number of data types. If you want to embed a WebAssembly function with complex call parameters or return values, you will need to manage memory pointers both on Go SDK and WebAssembly function sides.","sidebar":"embedSidebar"},"embed/go/reference/0.10.1":{"id":"embed/go/reference/0.10.1","title":"6.7.6 Go API 0.10.1  Documentation","description":"The following are the guides to develop with the WasmEdge-Go SDK.","sidebar":"embedSidebar"},"embed/go/reference/0.11.2":{"id":"embed/go/reference/0.11.2","title":"6.7.3 Go API 0.11.2 Documentation","description":"The following are the guides to develop with the WasmEdge-Go SDK.","sidebar":"embedSidebar"},"embed/go/reference/0.12.0":{"id":"embed/go/reference/0.12.0","title":"6.7.1 Go API 0.12.0 API Documentation","description":"The following are the guides to working with the WasmEdge-Go SDK.","sidebar":"embedSidebar"},"embed/go/reference/0.9.1":{"id":"embed/go/reference/0.9.1","title":"6.7.7 Go API 0.9.1 Documentation","description":"The following are the guides to develop with the WasmEdge-Go SDK at WasmEdge version 0.9.1 and WasmEdge-Go version v0.9.2.","sidebar":"embedSidebar"},"embed/go/reference/upgrade_to_0.10.0":{"id":"embed/go/reference/upgrade_to_0.10.0","title":"6.7.6 Upgrade to WasmEdge-Go 0.10.0","description":"Due to the WasmEdge-Go API breaking changes, this document shows the guideline of programming with WasmEdge-Go API to upgrade from the v0.9.2 to the v0.10.0 version.","sidebar":"embedSidebar"},"embed/go/reference/upgrade_to_0.11.0":{"id":"embed/go/reference/upgrade_to_0.11.0","title":"6.7.4 Upgrade to WasmEdge 0.11.0","description":"Due to the WasmEdge C API breaking changes, this document shows the guideline for programming with WasmEdge C API to upgrade from the 0.10.1 to the 0.11.0 version.","sidebar":"embedSidebar"},"embed/go/reference/upgrade_to_0.12.0":{"id":"embed/go/reference/upgrade_to_0.12.0","title":"6.7.2 Upgrade to WasmEdge-Go v0.12.0","description":"Due to the WasmEdge-Go API breaking changes, this document shows the guideline of programming with WasmEdge-Go API to upgrade from the v0.11.2 to the v0.12.0 version.","sidebar":"embedSidebar"},"embed/java/intro":{"id":"embed/java/intro","title":"6.1 WasmEdge Java SDK Introduction","description":"Work in Progress","sidebar":"embedSidebar"},"embed/overview":{"id":"embed/overview","title":"Embed Wasm Functions in Your Apps","description":"As we mentioned before, the most important use case for WasmEdge is to safely execute user-defined or community-contributed code as plug-ins in a software product. It enables third-party developers, vendors, suppliers, and community members to extend and customize the software product.","sidebar":"embedSidebar"},"embed/python/intro":{"id":"embed/python/intro","title":"10.1 WasmEdge Python SDK Introduction","description":"Work in Progress","sidebar":"embedSidebar"},"embed/quick-start/embed-wasm-apps-go":{"id":"embed/quick-start/embed-wasm-apps-go","title":"2 Embed the Wasm app into your Go Host app","description":"In the previous chapter, we learned how to  create a Wasm app using Rust and wasmedge-bindgen tool. In this chapter, I will walk you through how to embed the compiled Wasm app into your Go Host app.","sidebar":"embedSidebar"},"embed/quick-start/install":{"id":"embed/quick-start/install","title":"1 Install Notes","description":"To use a kind of WasmEdge language SDK, you must install WasmEdge itself first. Please be noted,he version of WasmEdge\'s language SDKs should be the same as the version of WasmEdge. For example, If you want to use WasmEdge Go SDK 0.11.2, then your WasmEdge version must be 0.11.2 as well.","sidebar":"embedSidebar"},"embed/quick-start/wasm-app-in-rust":{"id":"embed/quick-start/wasm-app-in-rust","title":"2 Create a Wasm app using Rust and wasmedge-bindgen","description":"In the previous chapter, we learned how to install WasmEdge and WasmEdge Go SDK. In this chapter, we will learn how to create a Wasm app using Rust and wasmedge-bindgen tool.","sidebar":"embedSidebar"},"embed/rust/ai":{"id":"embed/rust/ai","title":"5.5 AI Inference with Pytorch","description":"","sidebar":"embedSidebar"},"embed/rust/app":{"id":"embed/rust/app","title":"5.2 Embed Wasm Apps","description":"https://github.com/second-state/wasmedge-rustsdk-examples/blob/main/README.md#example-1-run-a-wasm-app-from-host","sidebar":"embedSidebar"},"embed/rust/asyncfy":{"id":"embed/rust/asyncfy","title":"5.6 Asyncfy","description":"WIP","sidebar":"embedSidebar"},"embed/rust/complex_data":{"id":"embed/rust/complex_data","title":"5.4 Pass Complex Data","description":"WIP. See an example here//github.com/second-state/wasmedge-rustsdk-examples/blob/main/README.md#example-4-1-define-a-host-function-with-string-arguments","sidebar":"embedSidebar"},"embed/rust/function":{"id":"embed/rust/function","title":"5.3 Embed Wasm Functions and Async Functions","description":"https://github.com/second-state/wasmedge-rustsdk-examples/blob/main/README.md#example-4-define-and-register-a-host-function","sidebar":"embedSidebar"},"embed/rust/intro":{"id":"embed/rust/intro","title":"5.1 WasmEdge Rust SDK Introduction","description":"- WasmEdge Rust SDK","sidebar":"embedSidebar"},"embed/rust/reference":{"id":"embed/rust/reference","title":"4.7 API Reference","description":"Check out the wasmedge-sdk crate for more information.","sidebar":"embedSidebar"},"embed/use-case/libsql":{"id":"embed/use-case/libsql","title":"UDF in the libSQL database","description":"libSQL is a fork of the popular SQLite database. One of the key enhancements libSQL brings is UDF (User Defined Functions) support. Through Wasm-based UDFs, users can add their own processing logic to the database, and then process the data in and out of the database on the fly. libSQL uses WasmEdge to run these UDFs. In this article, I will show you how.","sidebar":"embedSidebar"},"embed/use-case/yomo":{"id":"embed/use-case/yomo","title":"YoMo framework","description":"YoMo is a programming framework enabling developers to build a distributed cloud system (Geo-Distributed Cloud System). YoMo\'s communication layer is made on top of the QUIC protocol, which brings high-speed data transmission. In addition, it has a built-in Streaming Serverless \\"streaming function\\", which significantly improves the development experience of distributed cloud systems. The distributed cloud system built by YoMo provides an ultra-high-speed communication mechanism between near-field computing power and terminals. It has a wide range of use cases in Metaverse, VR/AR, IoT, etc.","sidebar":"embedSidebar"},"embed/witc":{"id":"embed/witc","title":"Developing components using witc","description":"Work in Progress","sidebar":"embedSidebar"}}}')}}]);