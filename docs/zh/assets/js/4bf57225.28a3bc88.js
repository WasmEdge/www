"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[740],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=o,m=c["".concat(d,".").concat(g)]||c[g]||u[g]||a;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},63558:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:2},i="PostgreSQL driver",s={unversionedId:"develop/rust/database/postgres_driver",id:"develop/rust/database/postgres_driver",title:"PostgreSQL driver",description:"A database connection is necessary for today's enterprise development. WasmEdge provides a PostgreSQL driver for Rust developers, enabling developers to build database applications in Rust and then running in WasmEdge.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/develop/rust/database/postgres_driver.md",sourceDirName:"develop/rust/database",slug:"/develop/rust/database/postgres_driver",permalink:"/docs/zh/develop/rust/database/postgres_driver",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/develop/rust/database/postgres_driver.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"developSidebar",previous:{title:"MySQL driver",permalink:"/docs/zh/develop/rust/database/my_sql_driver"},next:{title:"Redis driver",permalink:"/docs/zh/develop/rust/database/redis_driver"}},d={},p=[{value:"Run the example",id:"run-the-example",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code explanation",id:"code-explanation",level:2}],l={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"postgresql-driver"},"PostgreSQL driver"),(0,o.kt)("p",null,"A database connection is necessary for today's enterprise development. WasmEdge provides a PostgreSQL driver for Rust developers, enabling developers to build database applications in Rust and then running in WasmEdge."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Before we start, ",(0,o.kt)("a",{parentName:"p",href:"/docs/zh/develop/rust/setup"},"you need to have Rust and WasmEdge installed"),".\nMake sure that you read the ",(0,o.kt)("a",{parentName:"p",href:"../setup#special-notes"},"special notes on networking apps")," especially if you are compiling Rust programs on a Mac.")),(0,o.kt)("h2",{id:"run-the-example"},"Run the example"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/wasmedge-db-examples/tree/main/postgres"},"wasmedge-db-example/postgres")," is a PostgreSQL connector example written in Rust."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/WasmEdge/wasmedge-db-examples\ncd wasmedge-db-examples/postgres\n\n# Compile the rust code into WASM\nRUSTFLAGS="--cfg wasmedge --cfg tokio_unstable" cargo build --target wasm32-wasi --release\n\n# Execute SQL statements against a PostgreSQL database at postgres://user:passwd@localhost/testdb\nwasmedge --env "DATABASE_URL=postgres://user:passwd@localhost/testdb" target/wasm32-wasi/release/crud.wasm\n')),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"In order to compile the ",(0,o.kt)("inlineCode",{parentName:"p"},"tokio-postgres")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tokio")," crates, we will need to apply patches to add WasmEdge-specific socket APIs to those crates in ",(0,o.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'[patch.crates-io]\ntokio = { git = "https://github.com/second-state/wasi_tokio.git", branch = "v1.36.x" }\nsocket2 = { git = "https://github.com/second-state/socket2.git", branch = "v0.5.x" }\ntokio-postgres = { git = "https://github.com/second-state/rust-postgres.git" }\n\n[dependencies]\ntokio-postgres = "0.7"\ntokio = { version = "1", features = [\n    "io-util",\n    "fs",\n    "net",\n    "time",\n    "rt",\n    "macros",\n] }\n')),(0,o.kt)("h2",{id:"code-explanation"},"Code explanation"),(0,o.kt)("p",null,"We first use a Rust struct to represent the database table."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug)]\nstruct Order {\n    order_id: i32,\n    production_id: i32,\n    quantity: i32,\n    amount: f32,\n    shipping: f32,\n    tax: f32,\n    shipping_address: String,\n}\n\nimpl Order {\n    fn new(\n        order_id: i32,\n        production_id: i32,\n        quantity: i32,\n        amount: f32,\n        shipping: f32,\n        tax: f32,\n        shipping_address: String,\n    ) -> Self {\n        Self {\n            order_id,\n            production_id,\n            quantity,\n            amount,\n            shipping,\n            tax,\n            shipping_address,\n        }\n    }\n}\n")),(0,o.kt)("p",null,"Then, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"tokio-postgres")," API to access the database through its connection URL.\nThe code below shows how to perform basic CRUD operations using SQL commands."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[tokio::main(flavor = "current_thread")]\nasync fn main() -> Result<(), Error> {\n    // Connect to the database.\n    let (client, connection) = tokio_postgres::connect(&*get_url(), NoTls).await?;\n\n    // The connection object performs the actual communication with the database,\n    // so spawn it off to run on its own.\n    tokio::spawn(async move {\n        if let Err(e) = connection.await {\n            eprintln!("connection error: {}", e);\n        }\n    });\n\n    client.execute("CREATE TABLE IF NOT EXISTS orders (order_id INT, production_id INT, quantity INT, amount REAL, shipping REAL, tax REAL, shipping_address VARCHAR(256));", &[]).await?;\n\n    let orders = vec![\n        Order::new(1, 12, 2, 56.0, 15.0, 2.0, String::from("Mataderos 2312")),\n        Order::new(2, 15, 3, 256.0, 30.0, 16.0, String::from("1234 NW Bobcat")),\n        Order::new(3, 11, 5, 536.0, 50.0, 24.0, String::from("20 Havelock")),\n        Order::new(4, 8, 8, 126.0, 20.0, 12.0, String::from("224 Pandan Loop")),\n        Order::new(5, 24, 1, 46.0, 10.0, 2.0, String::from("No.10 Jalan Besar")),\n    ];\n\n    for order in orders.iter() {\n        client.execute(\n            "INSERT INTO orders (order_id, production_id, quantity, amount, shipping, tax, shipping_address) VALUES ($1, $2, $3, $4, $5, $6, $7)",\n            &[&order.order_id, &order.production_id, &order.quantity, &order.amount, &order.shipping, &order.tax, &order.shipping_address]\n        ).await?;\n    }\n\n    let rows = client.query("SELECT * FROM orders;", &[]).await?;\n    for row in rows.iter() {\n        let order_id : i32 = row.get(0);\n        println!("order_id {}", order_id);\n\n        let production_id : i32 = row.get(1);\n        println!("production_id {}", production_id);\n\n        let quantity : i32 = row.get(2);\n        println!("quantity {}", quantity);\n\n        let amount : f32 = row.get(3);\n        println!("amount {}", amount);\n\n        let shipping : f32 = row.get(4);\n        println!("shipping {}", shipping);\n\n        let tax : f32 = row.get(5);\n        println!("tax {}", tax);\n\n        let shipping_address : &str = row.get(6);\n        println!("shipping_address {}", shipping_address);\n    }\n\n    client.execute("DELETE FROM orders;", &[]).await?;\n\n    Ok(())\n}\n')))}u.isMDXComponent=!0}}]);