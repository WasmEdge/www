"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[6511],{3905:(e,n,i)=>{i.d(n,{Zo:()=>u,kt:()=>m});var t=i(67294);function o(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function a(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function r(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?a(Object(i),!0).forEach((function(n){o(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,t,o=function(e,n){if(null==e)return{};var i,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||(o[i]=e[i]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var g=t.createContext({}),s=function(e){var n=t.useContext(g),i=n;return e&&(i="function"==typeof e?e(n):r(r({},n),e)),i},u=function(e){var n=s(e.components);return t.createElement(g.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var i=e.components,o=e.mdxType,a=e.originalType,g=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(i),c=o,m=p["".concat(g,".").concat(c)]||p[c]||d[c]||a;return i?t.createElement(m,r(r({ref:n},u),{},{components:i})):t.createElement(m,r({ref:n},u))}));function m(e,n){var i=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=i.length,r=new Array(a);r[0]=c;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<a;s++)r[s]=i[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,i)}c.displayName="MDXCreateElement"},16091:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>g,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var t=i(87462),o=(i(67294),i(3905));const a={sidebar_position:1},r="Build WasmEdge With WASI-Logging Plug-in",l={unversionedId:"contribute/source/plugin/wasi_logging",id:"contribute/source/plugin/wasi_logging",title:"Build WasmEdge With WASI-Logging Plug-in",description:"WASI-Logging allows WebAssembly applications to log messages in a standardized way. This becomes particularly helpful when debugging applications or understanding the flow of execution within them. The WASI-Logging plug-in is designed to be straightforward to use, enabling developers to focus more on their application logic and less on logging mechanics.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/contribute/source/plugin/wasi_logging.md",sourceDirName:"contribute/source/plugin",slug:"/contribute/source/plugin/wasi_logging",permalink:"/docs/zh/contribute/source/plugin/wasi_logging",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/contribute/source/plugin/wasi_logging.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"contributeSidebar",previous:{title:"Build with WASI-Crypto Plug-in",permalink:"/docs/zh/contribute/source/plugin/wasi_crypto"},next:{title:"Build with WASI-nn Plug-in",permalink:"/docs/zh/contribute/source/plugin/wasi_nn"}},g={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Build WasmEdge with WASI-Logging Plug-in",id:"build-wasmedge-with-wasi-logging-plug-in-1",level:2},{value:"Loading WASI-Logging Plug-in",id:"loading-wasi-logging-plug-in",level:2},{value:"Using WASI-Logging in Your Applications",id:"using-wasi-logging-in-your-applications",level:2}],u={toc:s},p="wrapper";function d(e){let{components:n,...i}=e;return(0,o.kt)(p,(0,t.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"build-wasmedge-with-wasi-logging-plug-in"},"Build WasmEdge With WASI-Logging Plug-in"),(0,o.kt)("p",null,"WASI-Logging allows WebAssembly applications to log messages in a standardized way. This becomes particularly helpful when debugging applications or understanding the flow of execution within them. The WASI-Logging plug-in is designed to be straightforward to use, enabling developers to focus more on their application logic and less on logging mechanics."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"The prerequisite of the Wasi-Logging plug-in is the same as the WasmEdge building environment on the ",(0,o.kt)("a",{parentName:"p",href:"/docs/zh/contribute/source/os/linux"},"Linux")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/zh/contribute/source/os/macos"},"MacOS")," platforms."),(0,o.kt)("h2",{id:"build-wasmedge-with-wasi-logging-plug-in-1"},"Build WasmEdge with WASI-Logging Plug-in"),(0,o.kt)("p",null,"To enable the WASI-Logging Plug-in, developers need to build the WasmEdge from source with the cmake option ",(0,o.kt)("inlineCode",{parentName:"p"},"-DWASMEDGE_PLUGIN_WASI_LOGGING=ON"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd <path/to/your/wasmedge/source/folder>\nmkdir -p build && cd build\ncmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_WASI_LOGGING=ON .. && make -j\n# For the WASI-Logging plug-in, you should install this project.\ncmake --install .\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If the built ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmedge")," CLI tool cannot find the WASI-Logging plug-in, you can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_PATH")," environment variable to the plug-in installation path (",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge"),", or the built plug-in path ",(0,o.kt)("inlineCode",{parentName:"p"},"build/plugins/wasi_logging"),") to try to fix this issue. You should find ",(0,o.kt)("inlineCode",{parentName:"p"},"libwasmedgePluginWasiLogging.so")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_PATH"))),(0,o.kt)("p",null,"Then you will have an executable ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmedge")," runtime under ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," and the WASI-Logging plugin under ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/libwasmedgePluginWasiLogging.so")," after installation."),(0,o.kt)("h2",{id:"loading-wasi-logging-plug-in"},"Loading WASI-Logging Plug-in"),(0,o.kt)("p",null,"If the built ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmedge")," CLI tool cannot find the WASI-Logging plug-in, set the ",(0,o.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_PATH")," environment variable to the plug-in installation path (such as ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/"),", or the built plug-in path ",(0,o.kt)("inlineCode",{parentName:"p"},"build/plugins/wasi_logging/"),") to resolve this issue 1."),(0,o.kt)("p",null,"After installation, the ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmedge")," runtime will be located under ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," and the WASI-Logging plug-in under ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/libwasmedgePluginWasiLogging.so"),"."),(0,o.kt)("h2",{id:"using-wasi-logging-in-your-applications"},"Using WASI-Logging in Your Applications"),(0,o.kt)("p",null,"You can use the WASI-Logging plug-in in your WebAssembly applications to log messages in a standardized way."),(0,o.kt)("p",null,"For more information, you can refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/tree/master/plugins/wasi_logging"},"GitHub repository"),"."))}d.isMDXComponent=!0}}]);