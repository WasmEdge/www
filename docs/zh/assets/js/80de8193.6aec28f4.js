"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[1898],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(t),c=r,g=m["".concat(l,".").concat(c)]||m[c]||d[c]||i;return t?a.createElement(g,s(s({ref:n},u),{},{components:t})):a.createElement(g,s({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=c;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[m]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5881:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:2},s="6.2 Embed Wasm Apps",o={unversionedId:"embed/go/app",id:"embed/go/app",title:"6.2 Embed Wasm Apps",description:"The WasmEdge Go SDK can embed standalone WebAssembly applications \u2014 ie a Rust application with a main() function compiled into WebAssembly.",source:"@site/docs/embed/go/app.md",sourceDirName:"embed/go",slug:"/embed/go/app",permalink:"/book/zh/embed/go/app",draft:!1,editUrl:"https://github.com/alabulei1/book/docs/embed/go/app.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"embedSidebar",previous:{title:"6.1 WasmEdge Go SDK Introduction",permalink:"/book/zh/embed/go/intro"},next:{title:"6.3 Embed Wasm Functions",permalink:"/book/zh/embed/go/function"}},l={},p=[],u={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"62-embed-wasm-apps"},"6.2 Embed Wasm Apps"),(0,r.kt)("h1",{id:"embed-a-standalone-wasm-app"},"Embed a standalone WASM app"),(0,r.kt)("p",null,"The WasmEdge Go SDK can ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/tree/master/go_ReadFile"},"embed standalone WebAssembly applications")," \u2014 ie a Rust application with a ",(0,r.kt)("inlineCode",{parentName:"p"},"main()")," function compiled into WebAssembly."),(0,r.kt)("p",null,"Our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples/tree/master/go_ReadFile/rust_readfile"},"demo Rust application")," reads from a file. Note that the WebAssembly program's input and output data are now passed by the STDIN and STDOUT."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::env;\nuse std::fs::File;\nuse std::io::{self, BufRead};\n\nfn main() {\n  // Get the argv.\n  let args: Vec<String> = env::args().collect();\n  if args.len() <= 1 {\n    println!("Rust: ERROR - No input file name.");\n    return;\n  }\n\n  // Open the file.\n  println!("Rust: Opening input file \\"{}\\"...", args[1]);\n  let file = match File::open(&args[1]) {\n    Err(why) => {\n      println!("Rust: ERROR - Open file \\"{}\\" failed: {}", args[1], why);\n      return;\n    },\n    Ok(file) => file,\n  };\n\n  // Read lines.\n  let reader = io::BufReader::new(file);\n  let mut texts:Vec<String> = Vec::new();\n  for line in reader.lines() {\n    if let Ok(text) = line {\n      texts.push(text);\n    }\n  }\n  println!("Rust: Read input file \\"{}\\" succeeded.", args[1]);\n\n  // Get stdin to print lines.\n  println!("Rust: Please input the line number to print the line of file.");\n  let stdin = io::stdin();\n  for line in stdin.lock().lines() {\n    let input = line.unwrap();\n    match input.parse::<usize>() {\n      Ok(n) => if n > 0 && n <= texts.len() {\n        println!("{}", texts[n - 1]);\n      } else {\n        println!("Rust: ERROR - Line \\"{}\\" is out of range.", n);\n      },\n      Err(e) => println!("Rust: ERROR - Input \\"{}\\" is not an integer: {}", input, e),\n    }\n  }\n  println!("Rust: Process end.");\n}\n')),(0,r.kt)("p",null,"Compile the application into WebAssembly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd rust_readfile\ncargo build --target wasm32-wasi\n# The output file will be target/wasm32-wasi/debug/rust_readfile.wasm\n")),(0,r.kt)("p",null,"The Go source code to run the WebAssembly function in WasmEdge is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "os"\n  "github.com/second-state/WasmEdge-go/wasmedge"\n)\n\nfunc main() {\n  wasmedge.SetLogErrorLevel()\n\n  var conf = wasmedge.NewConfigure(wasmedge.REFERENCE_TYPES)\n  conf.AddConfig(wasmedge.WASI)\n  var vm = wasmedge.NewVMWithConfig(conf)\n  var wasi = vm.GetImportModule(wasmedge.WASI)\n  wasi.InitWasi(\n    os.Args[1:],     // The args\n    os.Environ(),    // The envs\n    []string{".:."}, // The mapping directories\n  )\n\n  // Instantiate wasm. _start refers to the main() function\n  vm.RunWasmFile(os.Args[1], "_start")\n\n  vm.Release()\n  conf.Release()\n}\n')),(0,r.kt)("p",null,"Next, let's build the Go application with the WasmEdge Go SDK."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/second-state/WasmEdge-go/wasmedge@v{{ wasmedge_version }}\ngo build\n")),(0,r.kt)("p",null,"Run the Golang application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ ./read_file rust_readfile/target/wasm32-wasi/debug/rust_readfile.wasm file.txt\nRust: Opening input file "file.txt"...\nRust: Read input file "file.txt" succeeded.\nRust: Please input the line number to print the line of file.\n# Input "5" and press Enter.\n5\n# The output will be the 5th line of `file.txt`:\nabcDEF___!@#$%^\n# To terminate the program, send the EOF (Ctrl + D).\n^D\n# The output will print the terminate message:\nRust: Process end.\n')),(0,r.kt)("p",null,"More examples can be found at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/second-state/WasmEdge-go-examples"},"the WasmEdge-go-examples GitHub repo.")))}m.isMDXComponent=!0}}]);