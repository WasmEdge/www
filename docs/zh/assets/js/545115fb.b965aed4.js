"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[2329],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=d(n),g=r,p=l["".concat(c,".").concat(g)]||l[g]||m[g]||o;return n?a.createElement(p,s(s({ref:t},u),{},{components:n})):a.createElement(p,s({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},56300:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:1},s="WasmEdge C++ SDK Introduction",i={unversionedId:"embed/c++/intro",id:"embed/c++/intro",title:"WasmEdge C++ SDK Introduction",description:"The WasmEdge C++ SDK is a collection of headers and libraries that allow you to build and deploy WebAssembly (Wasm) modules for execution on WasmEdge devices. It includes a CMake project and a set of command-line tools that you can use to build and deploy your Wasm modules.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/embed/c++/intro.md",sourceDirName:"embed/c++",slug:"/embed/c++/intro",permalink:"/docs/zh/embed/c++/intro",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/embed/c++/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"embedSidebar",previous:{title:"C++ SDK for Embedding WasmEdge",permalink:"/docs/zh/category/c-sdk-for-embedding-wasmedge-1"},next:{title:"Python SDK for Embedding WasmEdge",permalink:"/docs/zh/category/python-sdk-for-embedding-wasmedge"}},c={},d=[{value:"Quick Start Guide",id:"quick-start-guide",level:2},{value:"Quick Start Guide in AOT compiler",id:"quick-start-guide-in-aot-compiler",level:2}],u={toc:d},l="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"wasmedge-c-sdk-introduction"},"WasmEdge C++ SDK Introduction"),(0,r.kt)("p",null,"The WasmEdge C++ SDK is a collection of headers and libraries that allow you to build and deploy WebAssembly (Wasm) modules for execution on WasmEdge devices. It includes a CMake project and a set of command-line tools that you can use to build and deploy your Wasm modules."),(0,r.kt)("h2",{id:"quick-start-guide"},"Quick Start Guide"),(0,r.kt)("p",null,"To get started with WasmEdge, follow these steps:"),(0,r.kt)("p",null,"Install the WasmEdge C/C++ SDK: Download C++ SDK from the WasmEdge ",(0,r.kt)("a",{parentName:"p",href:"https://wasmedge.org/docs/embed/quick-start/install"},"website")," and follow the instructions to install it on your development machine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <wasmedge/wasmedge.h>\n#include <iostream>\n\nint main(int argc, char** argv) {\n  /* Create the configure context and add the WASI support. */\n  /* This step is not necessary unless you need WASI support. */\n  WasmEdge_ConfigureContext* conf_cxt = WasmEdge_ConfigureCreate();\n  WasmEdge_ConfigureAddHostRegistration(conf_cxt, WasmEdge_HostRegistration_Wasi);\n  /* The configure and store context to the VM creation can be NULL. */\n  WasmEdge_VMContext* vm_cxt = WasmEdge_VMCreate(conf_cxt, nullptr);\n\n  /* The parameters and returns arrays. */\n  WasmEdge_Value params[1] = { WasmEdge_ValueGenI32(40) };\n  WasmEdge_Value returns[1];\n  /* Function name. */\n  WasmEdge_String func_name = WasmEdge_StringCreateByCString("fib");\n  /* Run the WASM function from file. */\n  WasmEdge_Result res = WasmEdge_VMRunWasmFromFile(vm_cxt, argv[1], func_name, params, 1, returns, 1);\n\n  if (WasmEdge_ResultOK(res)) {\n    std::cout << "Get result: " << WasmEdge_ValueGetI32(returns[0]) << std::endl;\n  } else {\n    std::cout << "Error message: " << WasmEdge_ResultGetMessage(res) << std::endl;\n  }\n\n  /* Resources deallocations. */\n  WasmEdge_VMDelete(vm_cxt);\n  WasmEdge_ConfigureDelete(conf_cxt);\n  WasmEdge_StringDelete(func_name);\n  return 0;\n}\n')),(0,r.kt)("p",null,"You can use the -I flag to specify the include directories and the -L and -l flags to specify the library directories and library names, respectively. Then you can compile the code and run: ( the 40th fibonacci number is 102334155)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gcc example.cpp -x c++ -I/path/to/wasmedge/include -L/path/to/wasmedge/lib -lwasmedge -o example\n")),(0,r.kt)("p",null,"To run the ",(0,r.kt)("inlineCode",{parentName:"p"},"example")," executable that was created in the previous step, you can use the following command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./example\n")),(0,r.kt)("h2",{id:"quick-start-guide-in-aot-compiler"},"Quick Start Guide in AOT compiler"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <wasmedge/wasmedge.h>\n#include <stdio.h>\n\nint main(int argc, const char* argv[]) {\n  // Create the configure context and add the WASI support.\n  // This step is not necessary unless you need WASI support.\n  wasmedge_configure_context* conf_cxt = wasmedge_configure_create();\n  wasmedge_configure_add_host_registration(conf_cxt, WASMEDGE_HOST_REGISTRATION_WASI);\n\n  // Create the VM context in AOT mode.\n  wasmedge_vm_context* vm_cxt = wasmedge_vm_create_aot(conf_cxt, NULL);\n\n  // The parameters and returns arrays.\n  wasmedge_value params[1] = { wasmedge_value_gen_i32(32) };\n  wasmedge_value returns[1];\n  // Function name.\n  wasmedge_string func_name = wasmedge_string_create_by_cstring("fib");\n  // Run the WASM function from file.\n  wasmedge_result res = wasmedge_vm_run_wasm_from_file(vm_cxt, argv[1], func_name, params, 1, returns, 1);\n\n  if (wasmedge_result_ok(res)) {\n    printf("Get result: %d\\n", wasmedge_value_get_i32(returns[0]));\n  } else {\n    printf("Error message: %s\\n", wasmedge_result_get_message(res));\n  }\n\n  // Resources deallocations.\n  wasmedge_vm_delete(vm_cxt);\n  wasmedge_configure_delete(conf_cxt);\n  wasmedge_string_delete(func_name);\n  return 0;\n}\n')),(0,r.kt)("p",null,"In this example, the wasmedge_vm_create_aot function is used to create a wasmedge_vm_context object in AOT mode, which is then passed as the second argument to the wasmedge_vm_run_wasm_from_file function to execute the Wasm module in AOT mode."))}m.isMDXComponent=!0}}]);