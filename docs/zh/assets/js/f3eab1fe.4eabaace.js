"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[8864],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(t),g=a,c=d["".concat(s,".").concat(g)]||d[g]||m[g]||l;return t?i.createElement(c,r(r({ref:n},p),{},{components:t})):i.createElement(c,r({ref:n},p))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:a,r[1]=o;for(var u=2;u<l;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},62224:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var i=t(87462),a=(t(67294),t(3905));const l={sidebar_position:3},r="Using Plug-ins to Extend the Runtime in Go",o={unversionedId:"embed/use-case/plugin/go_sdk",id:"embed/use-case/plugin/go_sdk",title:"Using Plug-ins to Extend the Runtime in Go",description:"The WasmEdge plug-ins are the shared libraries to provide the WasmEdge runtime to load and create host module instances. With the plug-ins, the WasmEdge runtime can be extended more easily.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/embed/use-case/plugin/go_sdk.md",sourceDirName:"embed/use-case/plugin",slug:"/embed/use-case/plugin/go_sdk",permalink:"/docs/zh/embed/use-case/plugin/go_sdk",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/embed/use-case/plugin/go_sdk.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"embedSidebar",previous:{title:"Using Plug-ins to Extend the Runtime in Rust",permalink:"/docs/zh/embed/use-case/plugin/rust_sdk"}},s={},u=[{value:"Loading Plug-ins from Paths",id:"loading-plug-ins-from-paths",level:2},{value:"Listing Loaded Plug-ins",id:"listing-loaded-plug-ins",level:2},{value:"Getting Plug-in Context by Name",id:"getting-plug-in-context-by-name",level:2},{value:"Creating Module Instances from Plug-ins",id:"creating-module-instances-from-plug-ins",level:2},{value:"Automatic Module Creation and Mocking",id:"automatic-module-creation-and-mocking",level:2},{value:"Handling Missing Plug-ins and Error Messages",id:"handling-missing-plug-ins-and-error-messages",level:2}],p={toc:u},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-plug-ins-to-extend-the-runtime-in-go"},"Using Plug-ins to Extend the Runtime in Go"),(0,a.kt)("p",null,"The WasmEdge plug-ins are the shared libraries to provide the WasmEdge runtime to load and create host module instances. With the plug-ins, the WasmEdge runtime can be extended more easily."),(0,a.kt)("h2",{id:"loading-plug-ins-from-paths"},"Loading Plug-ins from Paths"),(0,a.kt)("p",null,"Developers can start using WasmEdge plug-ins by loading them from specific paths. To load plug-ins from the default paths, the following API can be used:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"wasmedge.LoadPluginDefaultPaths()\n")),(0,a.kt)("p",null,"Once this API is called, plug-ins from the default paths will be loaded. The default paths include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The path specified in the ",(0,a.kt)("inlineCode",{parentName:"li"},"WASMEDGE_PLUGIN_PATH")," environment variable."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"../plugin/")," directory relative to the WasmEdge installation path."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"./wasmedge/")," directory under the library path if WasmEdge is installed in a system directory (e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"/usr")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"/usr/local"),").")),(0,a.kt)("p",null,"Developers can also load plug-ins from specific paths using this API:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'wasmedge.LoadPluginFromPath("PATH_TO_PLUGIN/plugin.so")\n')),(0,a.kt)("h2",{id:"listing-loaded-plug-ins"},"Listing Loaded Plug-ins"),(0,a.kt)("p",null,"Once plug-ins are loaded, developers can list the loaded plug-in names using the following approach:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'wasmedge.LoadPluginDefaultPaths()\npluginnames := wasmedge.ListPlugins()\nfor _, name := range pluginnames {\n  fmt.Println("Loaded plug-in name: ", name)\n}\n')),(0,a.kt)("h2",{id:"getting-plug-in-context-by-name"},"Getting Plug-in Context by Name"),(0,a.kt)("p",null,"Developers can obtain the plug-in context by its name using the following method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Assume that wasi_crypto plug-in is installed in the default plug-in path.\nwasmedge.LoadPluginDefaultPaths()\nplugincrypto := wasmedge.FindPlugin("wasi_crypto")\n')),(0,a.kt)("h2",{id:"creating-module-instances-from-plug-ins"},"Creating Module Instances from Plug-ins"),(0,a.kt)("p",null,"With the plug-in context, developers can create module instances by providing the module name:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Assume that the `plugincrypto` is the object to the wasi_crypto plug-in.\n\n// List the available host modules in the plug-in.\nmodules := plugincrypto.ListModule()\nfor _, name := range modules {\n  fmt.Println("Available module: ", name)\n}\n// Will print here for the WASI-Crypto plug-in here:\n//   wasi_ephemeral_crypto_asymmetric_common\n//   wasi_ephemeral_crypto_common\n//   wasi_ephemeral_crypto_kx\n//   wasi_ephemeral_crypto_signatures\n//   wasi_ephemeral_crypto_symmetric\n\n// Create a module instance from the plug-in by the module name.\nmodinst := plugincrypto.CreateModule("wasi_ephemeral_crypto_common")\n\nmodinst.Release()\n')),(0,a.kt)("p",null,"There may be several plug-ins in the default plug-in paths if users ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh/contribute/installer#plugins"},"installed WasmEdge plug-ins by the installer"),"."),(0,a.kt)("p",null,"Before using the plug-ins, developers should ",(0,a.kt)("a",{parentName:"p",href:"#loading-plug-ins-from-paths"},"Loading Plug-ins from Paths"),"."),(0,a.kt)("h2",{id:"automatic-module-creation-and-mocking"},"Automatic Module Creation and Mocking"),(0,a.kt)("p",null,"Upon creating a ",(0,a.kt)("inlineCode",{parentName:"p"},"VM")," context, the WasmEdge runtime will automatically create and register the modules of loaded plug-ins. In cases where specific plug-ins are not loaded, WasmEdge will provide mock implementations for certain host modules. These mocked modules include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasi_ephemeral_crypto_asymmetric_common")," (for the ",(0,a.kt)("inlineCode",{parentName:"li"},"WASI-Crypto"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasi_ephemeral_crypto_common")," (for the ",(0,a.kt)("inlineCode",{parentName:"li"},"WASI-Crypto"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasi_ephemeral_crypto_kx")," (for the ",(0,a.kt)("inlineCode",{parentName:"li"},"WASI-Crypto"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasi_ephemeral_crypto_signatures")," (for the ",(0,a.kt)("inlineCode",{parentName:"li"},"WASI-Crypto"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasi_ephemeral_crypto_symmetric")," (for the ",(0,a.kt)("inlineCode",{parentName:"li"},"WASI-Crypto"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasi_ephemeral_nn")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasi_snapshot_preview1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge_httpsreq")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge_process")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasi:logging/logging")," (for the ",(0,a.kt)("inlineCode",{parentName:"li"},"WASI-Logging"),")")),(0,a.kt)("h2",{id:"handling-missing-plug-ins-and-error-messages"},"Handling Missing Plug-ins and Error Messages"),(0,a.kt)("p",null,"When the WASM want to invoke these host functions but the corresponding plug-in not installed, WasmEdge will print the error message and return an error."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Load the plug-ins in the default paths first.\nwasmedge.LoadPluginDefaultPaths()\n\n// Create the VM object with the WASI configuration.\nconf := wasmedge.NewConfigure(wasmedge.WASI)\nvm := wasmedge.NewVMWithConfig(conf)\nconf.Release()\n\n// The following API can retrieve the registered modules in the VM objects, includes the built-in WASI and the plug-ins.\n// This API will return `NULL` if the module instance not found.\n\n// The `wasimodule` will not be `nil` because the configuration was set.\nwasimodule := vm.GetRegisteredModule("wasi_snapshot_preview1")\n\n// The `wasinnmodule` will not be `nil` even if the wasi_nn plug-in is not installed, because the VM context will mock and register the host modules.\nwasinnmodule := vm.GetRegisteredModule("wasi_ephemeral_nn")\n\nvm.Release()\n')))}m.isMDXComponent=!0}}]);