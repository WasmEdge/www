"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[4686],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),u=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||a;return t?o.createElement(f,s(s({ref:n},d),{},{components:t})):o.createElement(f,s({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<a;u++)s[u]=t[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2005:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=t(7462),r=(t(7294),t(3905));const a={sidebar_position:7},s="TensorFlow Interface",i={unversionedId:"develop/rust/tensorflow",id:"develop/rust/tensorflow",title:"TensorFlow Interface",description:"Developers can use WASI-NN to inference the models. However, for the TensorFlow and TensorFlow-Lite users, the WASI-NN APIs are not so friendly to retrieve the input and output tensors. Therefore WasmEdge provides the TensorFlow related plug-in and rust SDK for inferencing models in WASM.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/develop/rust/tensorflow.md",sourceDirName:"develop/rust",slug:"/develop/rust/tensorflow",permalink:"/docs/zh/develop/rust/tensorflow",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/develop/rust/tensorflow.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"developSidebar",previous:{title:"OpenVINO Backend",permalink:"/docs/zh/develop/rust/wasinn/openvino"},next:{title:"Database drivers",permalink:"/docs/zh/category/database-drivers"}},l={},u=[{value:"Prerequisite",id:"prerequisite",level:2},{value:"Image Loading And Conversion",id:"image-loading-and-conversion",level:2},{value:"Inferring TensorFlow And TensorFlow-Lite Models",id:"inferring-tensorflow-and-tensorflow-lite-models",level:2},{value:"Create Session",id:"create-session",level:3},{value:"Prepare Input Tensors",id:"prepare-input-tensors",level:3},{value:"Run TensorFlow Models",id:"run-tensorflow-models",level:3},{value:"Convert Output Tensors",id:"convert-output-tensors",level:3},{value:"Build And Execution",id:"build-and-execution",level:2},{value:"Examples",id:"examples",level:2},{value:"Old WasmEdge TensorFlow extension",id:"old-wasmedge-tensorflow-extension",level:2}],d={toc:u},p="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tensorflow-interface"},"TensorFlow Interface"),(0,r.kt)("p",null,"Developers can use ",(0,r.kt)("a",{parentName:"p",href:"/category/neural-networks-for-wasi"},"WASI-NN")," to inference the models. However, for the TensorFlow and TensorFlow-Lite users, the WASI-NN APIs are not so friendly to retrieve the input and output tensors. Therefore WasmEdge provides the TensorFlow related plug-in and rust SDK for inferencing models in WASM."),(0,r.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,r.kt)("p",null,"Please make sure that you ",(0,r.kt)("a",{parentName:"p",href:"/docs/zh/develop/rust/setup"},"Rust and WasmEdge installed"),"."),(0,r.kt)("p",null,"Developers will add the ",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/wasmedge_tensorflow_interface"},(0,r.kt)("inlineCode",{parentName:"a"},"wasmedge_tensorflow_interface")," crate")," as a dependency to their ",(0,r.kt)("inlineCode",{parentName:"p"},"Rust -> Wasm")," applications. For example, add the following line to the application's ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nwasmedge_tensorflow_interface = "0.3.0"\n')),(0,r.kt)("p",null,"Developers will bring the functions of ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge_tensorflow_interface")," into scope within their ",(0,r.kt)("inlineCode",{parentName:"p"},"Rust -> Wasm")," application's code. For example, adding the following code to the top of their ",(0,r.kt)("inlineCode",{parentName:"p"},"main.rs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use wasmedge_tensorflow_interface;\n")),(0,r.kt)("h2",{id:"image-loading-and-conversion"},"Image Loading And Conversion"),(0,r.kt)("p",null,"In this crate, we provide several functions to decode and convert images into tensors by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge-Image")," host functions."),(0,r.kt)("p",null,"For using these funcions in WASM and executing in WasmEdge, users should ",(0,r.kt)("a",{parentName:"p",href:"/docs/zh/start/install#wasmedge-image-plug-in"},"install WasmEdge with WasmEdge-Image plug-in"),"."),(0,r.kt)("p",null,"For decoding the ",(0,r.kt)("inlineCode",{parentName:"p"},"JPEG")," images, there are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// Function to decode JPEG from buffer and resize to RGB8 format.\npub fn load_jpg_image_to_rgb8(img_buf: &[u8], w: u32, h: u32) -> Vec<u8>\n// Function to decode JPEG from buffer and resize to BGR8 format.\npub fn load_jpg_image_to_bgr8(img_buf: &[u8], w: u32, h: u32) -> Vec<u8>\n// Function to decode JPEG from buffer and resize to RGB32F format.\npub fn load_jpg_image_to_rgb32f(img_buf: &[u8], w: u32, h: u32) -> Vec<f32>\n// Function to decode JPEG from buffer and resize to BGR32F format.\npub fn load_jpg_image_to_rgb32f(img_buf: &[u8], w: u32, h: u32) -> Vec<f32>\n")),(0,r.kt)("p",null,"For decoding the ",(0,r.kt)("inlineCode",{parentName:"p"},"PNG")," images, there are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// Function to decode PNG from buffer and resize to RGB8 format.\npub fn load_png_image_to_rgb8(img_buf: &[u8], w: u32, h: u32) -> Vec<u8>\n// Function to decode PNG from buffer and resize to BGR8 format.\npub fn load_png_image_to_bgr8(img_buf: &[u8], w: u32, h: u32) -> Vec<u8>\n// Function to decode PNG from buffer and resize to RGB32F format.\npub fn load_png_image_to_rgb32f(img_buf: &[u8], w: u32, h: u32) -> Vec<f32>\n// Function to decode PNG from buffer and resize to BGR32F format.\npub fn load_png_image_to_rgb32f(img_buf: &[u8], w: u32, h: u32) -> Vec<f32>\n")),(0,r.kt)("p",null,"Developers can load, decode, and resize image as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut file_img = File::open("sample.jpg").unwrap();\nlet mut img_buf = Vec::new();\nfile_img.read_to_end(&mut img_buf).unwrap();\nlet flat_img = wasmedge_tensorflow_interface::load_jpg_image_to_rgb32f(&img_buf, 224, 224);\n// The flat_img is a vec<f32> which contains normalized image in rgb32f format and resized to 224x224.\n')),(0,r.kt)("h2",{id:"inferring-tensorflow-and-tensorflow-lite-models"},"Inferring TensorFlow And TensorFlow-Lite Models"),(0,r.kt)("p",null,"For using the ",(0,r.kt)("inlineCode",{parentName:"p"},"TFSession")," struct to inference the TensorFlow models and executing in WasmEdge, users should install the ",(0,r.kt)("a",{parentName:"p",href:"/docs/zh/start/install#wasmedge-tensorflow-plug-in"},"WasmEdge-TensorFlow plug-in with dependencies"),"."),(0,r.kt)("p",null,"For using the ",(0,r.kt)("inlineCode",{parentName:"p"},"TFLiteSession")," struct and to inference the TensorFlow-Lite models executing in WasmEdge, users should install the ",(0,r.kt)("a",{parentName:"p",href:"/docs/zh/start/install#wasmedge-tensorflow-lite-plug-in"},"WasmEdge-TensorFlowLite plug-in with dependencies"),"."),(0,r.kt)("h3",{id:"create-session"},"Create Session"),(0,r.kt)("p",null,"First, developers should create a session to load the TensorFlow or TensorFlow-Lite model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// The mod_buf is a vec<u8> which contains the model data.\nlet mut session = wasmedge_tensorflow_interface::TFSession::new(&mod_buf);\n")),(0,r.kt)("p",null,"The above function is create the session for TensorFlow frozen models. Developers can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"new_from_saved_model")," function to create from saved-models:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// The mod_path is a &str which is the path to saved-model directory.\n// The second argument is the list of tags.\nlet mut session = wasmedge_tensorflow_interface::TFSession::new_from_saved_model(model_path, &["serve"]);\n')),(0,r.kt)("p",null,"Or use the ",(0,r.kt)("inlineCode",{parentName:"p"},"TFLiteSession")," to create a session for inferring the ",(0,r.kt)("inlineCode",{parentName:"p"},"tflite")," models."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// The mod_buf is a vec<u8> which contains the model data.\nlet mut session = wasmedge_tensorflow_interface::TFLiteSession::new(&mod_buf);\n")),(0,r.kt)("h3",{id:"prepare-input-tensors"},"Prepare Input Tensors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// The flat_img is a vec<f32> which contains normalized image in rgb32f format.\nsession.add_input("input", &flat_img, &[1, 224, 224, 3])\n       .add_output("MobilenetV2/Predictions/Softmax");\n')),(0,r.kt)("h3",{id:"run-tensorflow-models"},"Run TensorFlow Models"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"session.run();\n")),(0,r.kt)("h3",{id:"convert-output-tensors"},"Convert Output Tensors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let res_vec: Vec<f32> = session.get_output("MobilenetV2/Predictions/Softmax");\n')),(0,r.kt)("h2",{id:"build-and-execution"},"Build And Execution"),(0,r.kt)("p",null,"After completing your code, you can follow the command to compile into WASM."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build --target=wasm32-wasi\n")),(0,r.kt)("p",null,"The output WASM file will be at ",(0,r.kt)("inlineCode",{parentName:"p"},"target/wasm32-wasi/debug/")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"target/wasm32-wasi/release"),"."),(0,r.kt)("p",null,"Please refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/zh/start/build-and-run/cli"},"WasmEdge CLI")," for WASM execution."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Work in progress. Will update soon."),(0,r.kt)("h2",{id:"old-wasmedge-tensorflow-extension"},"Old WasmEdge TensorFlow extension"),(0,r.kt)("p",null,"Work in progress. Will update soon."))}c.isMDXComponent=!0}}]);