"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[2992],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),c=l,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||a;return n?i.createElement(h,r(r({ref:t},u),{},{components:n})):i.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,r=new Array(a);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:l,r[1]=o;for(var p=2;p<a;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},99126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var i=n(87462),l=(n(67294),n(3905));const a={sidebar_position:7},r="Installer V2 Guide",o={unversionedId:"contribute/installer_v2",id:"contribute/installer_v2",title:"Installer V2 Guide",description:"Overview",source:"@site/docs/contribute/installer_v2.md",sourceDirName:"contribute",slug:"/contribute/installer_v2",permalink:"/docs/zh/contribute/installer_v2",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/contribute/installer_v2.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"contributeSidebar",previous:{title:"Installer Guide",permalink:"/docs/zh/contribute/installer"},next:{title:"Contributing Guide",permalink:"/docs/zh/contribute/"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Usage",id:"usage",level:2},{value:"Roles",id:"roles",level:2},{value:"<code>install_v2.sh</code>",id:"install_v2sh",level:3},{value:"Options",id:"options",level:2},{value:"Help Msg",id:"help-msg",level:3},{value:"Verbose",id:"verbose",level:3},{value:"Specify the version of WasmEdge to install",id:"specify-the-version-of-wasmedge-to-install",level:3},{value:"Installation path",id:"installation-path",level:3},{value:"Temporary directory",id:"temporary-directory",level:3},{value:"GGML/GGUF related options",id:"ggmlgguf-related-options",level:3},{value:"Install CUDA version of the GGUF plugin",id:"install-cuda-version-of-the-gguf-plugin",level:4},{value:"Specify the plugin version to install",id:"specify-the-plugin-version-to-install",level:4},{value:"Platform and OS",id:"platform-and-os",level:3},{value:"Machine and Arch",id:"machine-and-arch",level:3},{value:"Behavior",id:"behavior",level:2},{value:"Shell and it&#39;s configuration",id:"shell-and-its-configuration",level:3}],u={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"installer-v2-guide"},"Installer V2 Guide"),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"WasmEdge installer V2 is designed for installing the Core Tools (",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedge"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedge compile"),"), the Libraries (",(0,l.kt)("inlineCode",{parentName:"p"},"libwasmedge"),"),  and the WASI-NN GGML/GGUF Plugin.."),(0,l.kt)("h2",{id:"dependencies"},"Dependencies"),(0,l.kt)("p",null,"This is a pure shell script implementation. The only dependecies are ",(0,l.kt)("inlineCode",{parentName:"p"},"curl")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"wget")," for downloading the tarballs, and ",(0,l.kt)("inlineCode",{parentName:"p"},"tar")," for extracting them."),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install_v2.sh | bash -s -- ${OPTIONS}\n")),(0,l.kt)("h2",{id:"roles"},"Roles"),(0,l.kt)("h3",{id:"install_v2sh"},(0,l.kt)("inlineCode",{parentName:"h3"},"install_v2.sh")),(0,l.kt)("p",null,"The installer entry point."),(0,l.kt)("h2",{id:"options"},"Options"),(0,l.kt)("h3",{id:"help-msg"},"Help Msg"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Short Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"-h")),(0,l.kt)("li",{parentName:"ul"},"Full Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"--help")),(0,l.kt)("li",{parentName:"ul"},"Description: Show the help message and exit.")),(0,l.kt)("h3",{id:"verbose"},"Verbose"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Short Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"-V")),(0,l.kt)("li",{parentName:"ul"},"Full Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"--verbose")),(0,l.kt)("li",{parentName:"ul"},"Description: Enable verbosity debug")),(0,l.kt)("h3",{id:"specify-the-version-of-wasmedge-to-install"},"Specify the version of WasmEdge to install"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Short Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"-v VERSION")),(0,l.kt)("li",{parentName:"ul"},"Full Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"--version=VERSION")),(0,l.kt)("li",{parentName:"ul"},"Description: Install the given VERSION of WasmEdge"),(0,l.kt)("li",{parentName:"ul"},"Available Value: VERSION ",(0,l.kt)("inlineCode",{parentName:"li"},"{{ wasmedge_version }}")," or other valid release versions."),(0,l.kt)("li",{parentName:"ul"},"Note - If supplied an invalid or nonexistent version, the installer exits with an error.")),(0,l.kt)("h3",{id:"installation-path"},"Installation path"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Short Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"-p PATH")),(0,l.kt)("li",{parentName:"ul"},"Full Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"--path=PATH")),(0,l.kt)("li",{parentName:"ul"},"Description: Install WasmEdge into the given PATH. The default Path is ",(0,l.kt)("inlineCode",{parentName:"li"},"$HOME/.wasmedge"),"."),(0,l.kt)("li",{parentName:"ul"},"Note - Any paths other than the ones starting with ",(0,l.kt)("inlineCode",{parentName:"li"},"/usr")," are treated as non-system paths in the internals of the installer. The consequences are different directory structures for both.")),(0,l.kt)("h3",{id:"temporary-directory"},"Temporary directory"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Short Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"-t PATH")),(0,l.kt)("li",{parentName:"ul"},"Full Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"--tmpdir=PATH")),(0,l.kt)("li",{parentName:"ul"},"Description: Download the tarballs into the given PATH. The default Path is ",(0,l.kt)("inlineCode",{parentName:"li"},"/tmp"),"."),(0,l.kt)("li",{parentName:"ul"},"Note - If the ",(0,l.kt)("inlineCode",{parentName:"li"},"/tmp")," directory is not writable, the installer exits with an error. Please use this option to change the temporary directory.")),(0,l.kt)("h3",{id:"ggmlgguf-related-options"},"GGML/GGUF related options"),(0,l.kt)("h4",{id:"install-cuda-version-of-the-gguf-plugin"},"Install CUDA version of the GGUF plugin"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Short Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"-c cuda_version")),(0,l.kt)("li",{parentName:"ul"},"Full Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"--ggmlcuda=cuda_version[11/12]")),(0,l.kt)("li",{parentName:"ul"},"Description: Install the specified CUDA version of the GGUF plugin. E.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"11")," for cuda-11, ",(0,l.kt)("inlineCode",{parentName:"li"},"12")," for cuda-12."),(0,l.kt)("li",{parentName:"ul"},"Note - The installer will try to detect the CUDA version if not specified. However, if the detection failed, you can specify the version using this option.")),(0,l.kt)("h4",{id:"specify-the-plugin-version-to-install"},"Specify the plugin version to install"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Short Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"-b ggmlversion")),(0,l.kt)("li",{parentName:"ul"},"Full Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"--ggmlbn=ggmlversion")),(0,l.kt)("li",{parentName:"ul"},"Description: Install the specified GGUF plugin. E.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"b2963"),"."),(0,l.kt)("li",{parentName:"ul"},"Note - Please use this option when you really know what you are doing.")),(0,l.kt)("h3",{id:"platform-and-os"},"Platform and OS"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Short Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"-o OS")),(0,l.kt)("li",{parentName:"ul"},"Full Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"--os=OS")),(0,l.kt)("li",{parentName:"ul"},"Description: Install the given ",(0,l.kt)("inlineCode",{parentName:"li"},"OS")," version of WasmEdge. This value should be case insensitive to make the maximum compatibility."),(0,l.kt)("li",{parentName:"ul"},'Available Value (case insensitive): "Linux", "Darwin".')),(0,l.kt)("h3",{id:"machine-and-arch"},"Machine and Arch"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Short Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"-a ARCH")),(0,l.kt)("li",{parentName:"ul"},"Full Option: ",(0,l.kt)("inlineCode",{parentName:"li"},"--arch=ARCH")),(0,l.kt)("li",{parentName:"ul"},"Description: Install the ",(0,l.kt)("inlineCode",{parentName:"li"},"ARCH")," version of WasmEdge."),(0,l.kt)("li",{parentName:"ul"},'Available Value: "x86',"_",'64", "aarch64", "arm64".')),(0,l.kt)("h2",{id:"behavior"},"Behavior"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"WasmEdge installation appends all the files it installs to a file which is located in the installer directory named ",(0,l.kt)("inlineCode",{parentName:"li"},"env")," with its path as ",(0,l.kt)("inlineCode",{parentName:"li"},"$INSTALLATION_PATH/env"),".")),(0,l.kt)("h3",{id:"shell-and-its-configuration"},"Shell and it's configuration"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Source string in shell configuration is given as ",(0,l.kt)("inlineCode",{parentName:"li"},". $INSTALLATION_PATH/env")," so that it exports the necessary environment variables for WasmEdge."),(0,l.kt)("li",{parentName:"ul"},"Shell configuration file is appended with source string if it cannot find the source string in that file."),(0,l.kt)("li",{parentName:"ul"},"Currently, it detects only ",(0,l.kt)("inlineCode",{parentName:"li"},"Bash")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"zsh")," shells."),(0,l.kt)("li",{parentName:"ul"},"If the above shells are found, then their respective configuration files ",(0,l.kt)("inlineCode",{parentName:"li"},"$HOME/.bashrc")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"$HOME/.zshrc")," are updated along with ",(0,l.kt)("inlineCode",{parentName:"li"},"$HOME/.zprofile")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"$HOME/.bash_profile")," in the case of Linux."),(0,l.kt)("li",{parentName:"ul"},"In the case of ",(0,l.kt)("inlineCode",{parentName:"li"},"Darwin"),", only ",(0,l.kt)("inlineCode",{parentName:"li"},"$HOME/.zprofile")," is updated with the source string.")))}m.isMDXComponent=!0}}]);