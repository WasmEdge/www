"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[1198],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),l=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(d.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,g=u["".concat(d,".").concat(m)]||u[m]||c[m]||o;return t?a.createElement(g,s(s({ref:n},p),{},{components:t})):a.createElement(g,s({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},62352:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:1},s="MySQL driver",i={unversionedId:"develop/rust/database/my_sql_driver",id:"develop/rust/database/my_sql_driver",title:"MySQL driver",description:"The database connection is necessary for today's enterprise development. WasmEdge provides a MySQL driver for Rust developers, enabling developers to build database applications in Rust and then running in WasmEdge.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/develop/rust/database/my_sql_driver.md",sourceDirName:"develop/rust/database",slug:"/develop/rust/database/my_sql_driver",permalink:"/docs/zh/develop/rust/database/my_sql_driver",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/develop/rust/database/my_sql_driver.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"developSidebar",previous:{title:"Database drivers",permalink:"/docs/zh/category/database-drivers"},next:{title:"PostgreSQL driver",permalink:"/docs/zh/develop/rust/database/postgres_driver"}},d={},l=[{value:"Run the example",id:"run-the-example",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code example",id:"code-example",level:2}],p={toc:l},u="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mysql-driver"},"MySQL driver"),(0,r.kt)("p",null,"The database connection is necessary for today's enterprise development. WasmEdge provides a MySQL driver for Rust developers, enabling developers to build database applications in Rust and then running in WasmEdge."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Before we start, ",(0,r.kt)("a",{parentName:"p",href:"/docs/zh/develop/rust/setup"},"you need to have Rust and WasmEdge installed"),".\nMake sure that you read the ",(0,r.kt)("a",{parentName:"p",href:"../setup#special-notes-for-networking-apps"},"special notes on networking apps")," especially if you are compiling Rust programs on a Mac.")),(0,r.kt)("h2",{id:"run-the-example"},"Run the example"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/wasmedge-db-examples/tree/main/mysql_async"},"wasmedge-db-example/mysql_async")," is a MySQL connector example written in Rust."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/WasmEdge/wasmedge-db-examples\ncd wasmedge-db-examples/mysql_async\n\n# Compile the rust code into WASM\nRUSTFLAGS="--cfg wasmedge --cfg tokio_unstable" cargo build --target wasm32-wasip1 --release\n\n# Execute MySQL statements against a MySQL database at mysql://user:passwd@127.0.0.1:3306\nwasmedge --env "DATABASE_URL=mysql://user:passwd@127.0.0.1:3306/mysql" target/wasm32-wasip1/release/crud.wasm\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Since we have TLS enabled by default in this example, you will need the ",(0,r.kt)("a",{parentName:"p",href:"../setup#tls-on-macos"},"wasi-sdk version of clang")," for compiling it on MacOS.")),(0,r.kt)("p",null,"To use TLS, you will need to turn on the ",(0,r.kt)("inlineCode",{parentName:"p"},"default-rustls")," feature on the ",(0,r.kt)("inlineCode",{parentName:"p"},"mysql_async")," crate in ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),".\nThen, run the application as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'# Execute MySQL statements against an AWS RDS database that requires TLS\nwasmedge --env "DATABASE_SSL=1" --env "DATABASE_URL=mysql://user:passwd@mydb.123456789012.us-east-1.rds.amazonaws.com:3306/mysql" crud.wasm\n')),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"In order to compile the ",(0,r.kt)("inlineCode",{parentName:"p"},"mysql_async")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tokio")," crates, we will need to apply two patches to add\nWasmEdge-specific socket APIs to those crates. The following example shows that the TLS connection is enabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[patch.crates-io]\ntokio = { git = "https://github.com/second-state/wasi_tokio.git", branch = "v1.36.x" }\nsocket2 = { git = "https://github.com/second-state/socket2.git", branch = "v0.5.x" }\n\n[dependencies]\nmysql_async = { version = "0.34", default-features=false, features = [ "default-rustls" ], git="https://github.com/blackbeam/mysql_async.git" }\nzstd-sys = "=2.0.9"\ntokio = { version = "1", features = [ "io-util", "fs", "net", "time", "rt", "macros"] }\n')),(0,r.kt)("h2",{id:"code-example"},"Code example"),(0,r.kt)("p",null,"The following code shows how to connect to a MySQL database server, and then insert, update, and delete records using SQL\nstatements."),(0,r.kt)("p",null,"Connect to a MySQL database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    // Below we create a customized connection pool\n    let opts = Opts::from_url(&*get_url()).unwrap();\n    let mut builder = OptsBuilder::from_opts(opts);\n    if std::env::var("DATABASE_SSL").is_ok() {\n        builder = builder.ssl_opts(SslOpts::default());\n    }\n    // The connection pool will have a min of 5 and max of 10 connections.\n    let constraints = PoolConstraints::new(5, 10).unwrap();\n    let pool_opts = PoolOpts::default().with_constraints(constraints);\n\n    let pool = Pool::new(builder.pool_opts(pool_opts));\n    let mut conn = pool.get_conn().await.unwrap();\n')),(0,r.kt)("p",null,"Create a table on the connected database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    // create table if no tables exist\n    let result = r"SHOW TABLES LIKE \'orders\';"\n        .with(())\n        .map(&mut conn, |s: String| String::from(s))\n        .await?;\n\n    if result.len() == 0 {\n        // table doesn\'t exist, create a new one\n        r"CREATE TABLE orders (order_id INT, production_id INT, quantity INT, amount FLOAT, shipping FLOAT, tax FLOAT, shipping_address VARCHAR(20));".ignore(&mut conn).await?;\n        println!("create new table");\n    } else {\n        // delete all data from the table.\n        println!("delete all from orders");\n        r"DELETE FROM orders;".ignore(&mut conn).await?;\n    }\n')),(0,r.kt)("p",null,"Insert some records into the MySQL database using SQL."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    let orders = vec![\n        Order::new(1, 12, 2, 56.0, 15.0, 2.0, String::from("Mataderos 2312")),\n        Order::new(2, 15, 3, 256.0, 30.0, 16.0, String::from("1234 NW Bobcat")),\n        Order::new(3, 11, 5, 536.0, 50.0, 24.0, String::from("20 Havelock")),\n        Order::new(4, 8, 8, 126.0, 20.0, 12.0, String::from("224 Pandan Loop")),\n        Order::new(5, 24, 1, 46.0, 10.0, 2.0, String::from("No.10 Jalan Besar")),\n    ];\n\n    r"INSERT INTO orders (order_id, production_id, quantity, amount, shipping, tax, shipping_address)\n      VALUES (:order_id, :production_id, :quantity, :amount, :shipping, :tax, :shipping_address)"\n        .with(orders.iter().map(|order| {\n            params! {\n                "order_id" => order.order_id,\n                "production_id" => order.production_id,\n                "quantity" => order.quantity,\n                "amount" => order.amount,\n                "shipping" => order.shipping,\n                "tax" => order.tax,\n                "shipping_address" => &order.shipping_address,\n            }\n        }))\n        .batch(&mut conn)\n        .await?;\n')),(0,r.kt)("p",null,"Query the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    // query data\n    let loaded_orders = "SELECT * FROM orders"\n        .with(())\n        .map(\n            &mut conn,\n            |(order_id, production_id, quantity, amount, shipping, tax, shipping_address)| {\n                Order::new(\n                    order_id,\n                    production_id,\n                    quantity,\n                    amount,\n                    shipping,\n                    tax,\n                    shipping_address,\n                )\n            },\n        )\n        .await?;\n    dbg!(loaded_orders.len());\n    dbg!(loaded_orders);\n')),(0,r.kt)("p",null,"Delete some records from the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    // delete some data\n    r"DELETE FROM orders WHERE order_id=4;"\n        .ignore(&mut conn)\n        .await?;\n\n    // query data\n    let loaded_orders = "SELECT * FROM orders"\n        .with(())\n        .map(\n            &mut conn,\n            |(order_id, production_id, quantity, amount, shipping, tax, shipping_address)| {\n                Order::new(\n                    order_id,\n                    production_id,\n                    quantity,\n                    amount,\n                    shipping,\n                    tax,\n                    shipping_address,\n                )\n            },\n        )\n        .await?;\n    dbg!(loaded_orders.len());\n    dbg!(loaded_orders);\n')),(0,r.kt)("p",null,"Update records in the MySQL database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    // update some data\n    r"UPDATE orders\n    SET shipping_address = \'8366 Elizabeth St.\'\n    WHERE order_id = 2;"\n        .ignore(&mut conn)\n        .await?;\n    // query data\n    let loaded_orders = "SELECT * FROM orders"\n        .with(())\n        .map(\n            &mut conn,\n            |(order_id, production_id, quantity, amount, shipping, tax, shipping_address)| {\n                Order::new(\n                    order_id,\n                    production_id,\n                    quantity,\n                    amount,\n                    shipping,\n                    tax,\n                    shipping_address,\n                )\n            },\n        )\n        .await?;\n    dbg!(loaded_orders.len());\n    dbg!(loaded_orders);\n')),(0,r.kt)("p",null,"Close the database connection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"    drop(conn);\n    pool.disconnect().await.unwrap();\n")))}c.isMDXComponent=!0}}]);