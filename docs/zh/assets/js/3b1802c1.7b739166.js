"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[4107],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,g=p["".concat(s,".").concat(m)]||p[m]||c[m]||l;return n?r.createElement(g,a(a({ref:t},d),{},{components:n})):r.createElement(g,a({ref:t},d))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},67165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const l={sidebar_position:10},a="Build on IBM LinuxONE(s390x)",i={unversionedId:"contribute/source/os/s390x",id:"contribute/source/os/s390x",title:"Build on IBM LinuxONE(s390x)",description:"Please follow this tutorial to build and test WasmEdge on s390x hardware from source code.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/contribute/source/os/s390x.md",sourceDirName:"contribute/source/os",slug:"/contribute/source/os/s390x",permalink:"/docs/zh/contribute/source/os/s390x",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/contribute/source/os/s390x.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"contributeSidebar",previous:{title:"Build on Raspberry Pi",permalink:"/docs/zh/contribute/source/os/raspberrypi"},next:{title:"Build Plug-ins",permalink:"/docs/zh/category/build-plug-ins"}},s={},u=[{value:"Build WasmEdge",id:"build-wasmedge",level:2},{value:"Get Source code",id:"get-source-code",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"Compile",id:"compile",level:3},{value:"Run Tests",id:"run-tests",level:2},{value:"Building Supported Plugins",id:"building-supported-plugins",level:2}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"build-on-ibm-linuxones390x"},"Build on IBM LinuxONE(s390x)"),(0,o.kt)("p",null,"Please follow this tutorial to build and test WasmEdge on s390x hardware from source code."),(0,o.kt)("h2",{id:"build-wasmedge"},"Build WasmEdge"),(0,o.kt)("h3",{id:"get-source-code"},"Get Source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/WasmEdge/WasmEdge.git\n")),(0,o.kt)("h3",{id:"dependencies"},"Dependencies"),(0,o.kt)("p",null,"WasmEdge requires LLVM 18 at least and you may need to install the following dependencies yourself."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"As Ubuntu 22.04 and previous versions of Ubuntu do not include the llvm-18 package, you can instead use the official llvm repository to install llvm-18."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\nsudo ./llvm.sh 18\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get update\nsudo apt install -y software-properties-common cmake gcc g++\nsudo apt install -y llvm-18-dev liblld-18-dev\n")),(0,o.kt)("h3",{id:"compile"},"Compile"),(0,o.kt)("p",null,"Please refer to ",(0,o.kt)("a",{parentName:"p",href:"/docs/zh/contribute/source/build_from_src#cmake-building-options"},"here")," for the descriptions of all CMake options."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd WasmEdge\nmkdir -p build && cd build\ncmake -DCMAKE_BUILD_TYPE=Release .. && make -j\n")),(0,o.kt)("h2",{id:"run-tests"},"Run Tests"),(0,o.kt)("p",null,"The following tests are available only when the build option ",(0,o.kt)("inlineCode",{parentName:"p"},"WASMEDGE_BUILD_TESTS")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"ON"),"."),(0,o.kt)("p",null,"Users can use these tests to verify the correctness of WasmEdge binaries."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd <path/to/wasmedge/build_folder>\nLD_LIBRARY_PATH=$(pwd)/lib/api ctest\n")),(0,o.kt)("h2",{id:"building-supported-plugins"},"Building Supported Plugins"),(0,o.kt)("p",null,"Currently, the ",(0,o.kt)("a",{parentName:"p",href:"../plugin/wasi_nn#build-with-llamacpp-backend-on-linux"},"WASI-NN plugin")," is supported on s390x, using the GGML backend.\nBuilding the plugin with BLAS support is recommended. to build the plugin with BLAS support, first install the OpenBLAS library:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install libopenblas-dev\n")),(0,o.kt)("p",null,"Then, build WasmEdge with the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'cd <path/to/wasmedge/build_folder>\nmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_PLUGINS=ON -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="GGML" -DWASMEDGE_PLUGIN_WASI_NN_GGML_LLAMA_BLAS=ON ..\n')),(0,o.kt)("p",null,"A guide on converting models to big endian is available at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ggml-org/llama.cpp/blob/master/docs/build-s390x.md#getting-gguf-models"},"https://github.com/ggml-org/llama.cpp/blob/master/docs/build-s390x.md#getting-gguf-models")))}c.isMDXComponent=!0}}]);