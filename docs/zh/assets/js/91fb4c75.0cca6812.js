"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[7861],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),m=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=m(n),c=a,g=p["".concat(s,".").concat(c)]||p[c]||u[c]||r;return n?o.createElement(g,i(i({ref:t},d),{},{components:n})):o.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var m=2;m<r;m++)i[m]=n[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:2},i="Upgrade to WasmEdge-Go v0.12.0",l={unversionedId:"embed/go/reference/upgrade_to_0.12.0",id:"embed/go/reference/upgrade_to_0.12.0",title:"Upgrade to WasmEdge-Go v0.12.0",description:"Due to the WasmEdge-Go API breaking changes, this document shows the guideline of programming with WasmEdge-Go API to upgrade from the v0.11.2 to the v0.12.0 version.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/embed/go/reference/upgrade_to_0.12.0.md",sourceDirName:"embed/go/reference",slug:"/embed/go/reference/upgrade_to_0.12.0",permalink:"/docs/zh/embed/go/reference/upgrade_to_0.12.0",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/embed/go/reference/upgrade_to_0.12.0.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"embedSidebar",previous:{title:"Go API v0.12.0 Documentation",permalink:"/docs/zh/embed/go/reference/0.12.0"},next:{title:"Go API v0.11.2 Documentation",permalink:"/docs/zh/embed/go/reference/0.11.2"}},s={},m=[{value:"Concepts",id:"concepts",level:2},{value:"The <code>wasmedge.HostRegistration</code> const values for plug-ins are not necessary in VM objects",id:"the-wasmedgehostregistration-const-values-for-plug-ins-are-not-necessary-in-vm-objects",level:2},{value:"Creating the module instance from a plug-in",id:"creating-the-module-instance-from-a-plug-in",level:2},{value:"Retrieving the module instances from the VM context",id:"retrieving-the-module-instances-from-the-vm-context",level:2}],d={toc:m},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"upgrade-to-wasmedge-go-v0120"},"Upgrade to WasmEdge-Go v0.12.0"),(0,a.kt)("p",null,"Due to the WasmEdge-Go API breaking changes, this document shows the guideline of programming with WasmEdge-Go API to upgrade from the ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.11.2")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.12.0")," version."),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Removed the members of the ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmedge.HostRegistration")," related const values."),(0,a.kt)("p",{parentName:"li"},"The following const values are removed:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.WasmEdge_Process")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.WasiNN")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.WasiCrypto_Common")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.WasiCrypto_AsymmetricCommon")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.WasiCrypto_Kx")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.WasiCrypto_Signatures")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.WasiCrypto_Symmetric"))),(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmedge.VM")," objects will create and register the host modules automatically now. If the plug-ins are not loaded, the ",(0,a.kt)("inlineCode",{parentName:"p"},"VM")," objects will create and register the mock modules to prevent from import failed.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Removed the module instance creation functions of the plug-ins."),(0,a.kt)("p",{parentName:"li"},"The following APIs are removed:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.NewWasiNNModule()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.NewWasiCryptoCommonModule()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.NewWasiCryptoAsymmetricCommonModule()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.NewWasiCryptoKxModule()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.NewWasiCryptoSignaturesModule()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.NewWasiCryptoSymmetricModule()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wasmedge.NewWasmEdgeProcessModule()"))),(0,a.kt)("p",{parentName:"li"},"For the new examples for creating the module instances from plug-ins, please refer to ",(0,a.kt)("a",{parentName:"p",href:"#creating-the-module-instance-from-a-plug-in"},"the example below"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"New module instance retrieving API of ",(0,a.kt)("inlineCode",{parentName:"p"},"VM")," objects."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Added ",(0,a.kt)("inlineCode",{parentName:"li"},"(*wasmedge.VM).GetRegisteredModule()")," for retrieving registered named module in ",(0,a.kt)("inlineCode",{parentName:"li"},"VM")," objects quickly."),(0,a.kt)("li",{parentName:"ul"},"Added ",(0,a.kt)("inlineCode",{parentName:"li"},"(*wasmedge.VM).ListRegisteredModule()")," for listing registered named modules in ",(0,a.kt)("inlineCode",{parentName:"li"},"VM")," objects quickly.")))),(0,a.kt)("h2",{id:"the-wasmedgehostregistration-const-values-for-plug-ins-are-not-necessary-in-vm-objects"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"wasmedge.HostRegistration")," const values for plug-ins are not necessary in VM objects"),(0,a.kt)("p",null,"Before the version ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.11.2"),", developers should add the configurations when they want to load the plug-ins in VM:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Assume that wasi_crypto plug-in is installed in the default plug-in path.\nwasmedge.LoadPluginDefaultPaths()\n\nconf := wasmedge.NewConfigure(wasmedge.WASI)\ncomf.AddConfig(wasmedge.WasiCrypto_Common)\ncomf.AddConfig(wasmedge.WasiCrypto_AsymmetricCommon)\ncomf.AddConfig(wasmedge.WasiCrypto_Kx)\ncomf.AddConfig(wasmedge.WasiCrypto_Signatures)\ncomf.AddConfig(wasmedge.WasiCrypto_Symmetric)\nvm := wasmedge.NewVMWithConfig(conf)\nconf.Release()\n\nstore := vm.GetStore()\nmodulelist := store.ListModule()\nfor _, name := range modulelist {\n  fmt.Println(name)\n}\n// Will print:\n//   wasi_ephemeral_crypto_asymmetric_common\n//   wasi_ephemeral_crypto_common\n//   wasi_ephemeral_crypto_kx\n//   wasi_ephemeral_crypto_signatures\n//   wasi_ephemeral_crypto_symmetric\nvm.Release()\n")),(0,a.kt)("p",null,"After ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.12.0"),", the plug-ins will automatically loaded after the ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmedge.LoadPluginDefaultPaths()")," called or the specific path given into the ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmedge.LoadPluginFromPath()")," API."),(0,a.kt)("p",null,"For the plug-ins not installed, the mocked modules will be registered into ",(0,a.kt)("inlineCode",{parentName:"p"},"VM")," objects and will print the error message when invoking the host functions to notice the users to install the plug-in."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"wasmedge.LoadPluginDefaultPaths()\n// The `wasmedge.WASI` is still needed.\nconf := wasmedge.NewConfigure(wasmedge.WASI)\nvm := wasmedge.NewVMWithConfig(conf)\nconf.Release()\n\nmodulelist := vm.ListRegisteredModule()\nfor _, name := range modulelist {\n  fmt.Println(name)\n}\n// Will print:\n//   wasi_ephemeral_crypto_asymmetric_common\n//   wasi_ephemeral_crypto_common\n//   wasi_ephemeral_crypto_kx\n//   wasi_ephemeral_crypto_signatures\n//   wasi_ephemeral_crypto_symmetric\n//   wasi_ephemeral_nn\n//   wasi_snapshot_preview1\n//   wasmedge_httpsreq\n//   wasmedge_process\nvm.Release()\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: The ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmedge.WASI")," configuration is still needed if developers want to use the WASI.")),(0,a.kt)("h2",{id:"creating-the-module-instance-from-a-plug-in"},"Creating the module instance from a plug-in"),(0,a.kt)("p",null,"When developers didn't use the VM objects to load the plug-ins, they can use the creation functions before the ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.11.2")," versions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// Assume that wasi_crypto plug-in is installed in the default plug-in path.\nwasmedge.LoadPluginDefaultPaths()\n\ncryptocommonmod := wasmedge.NewWasiCryptoCommonModule()\n\ncryptocommonmod.Release()\n")),(0,a.kt)("p",null,"But it not make sense and not extensionable if developers should use different APIs for the different plug-ins."),(0,a.kt)("p",null,"After the ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.12.0")," version, the ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmedge.Plugin")," struct is added, and developers can use the general API to create the module instances:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Assume that wasi_crypto plug-in is installed in the default plug-in path.\nwasmedge.LoadPluginDefaultPaths()\n\ncryptoplugin := wasmedge.FindPlugin("wasi_crypto")\nif ctyptoplugin == nil {\n  fmt.Println("FAIL: Cannot find the wasi_crypto plugin.")\n  return\n}\n\ncryptocommonmod := cryptoplugin.CreateModule("wasi_crypto_common")\n\ncryptocommonmod.Release()\n')),(0,a.kt)("h2",{id:"retrieving-the-module-instances-from-the-vm-context"},"Retrieving the module instances from the VM context"),(0,a.kt)("p",null,"Before the version ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.11.2"),", developers can retrieve the ",(0,a.kt)("inlineCode",{parentName:"p"},"WASI")," or the modules from plug-ins with the ",(0,a.kt)("inlineCode",{parentName:"p"},"wasmedge.HostRegistration")," const values, or retrieve the registered modules from the ",(0,a.kt)("inlineCode",{parentName:"p"},"store")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Assume that wasi_crypto plug-in is installed in the default plug-in path.\nwasmedge.LoadPluginDefaultPaths()\nconf := wasmedge.NewConfigure(wasmedge.WASI)\ncomf.AddConfig(wasmedge.WasiCrypto_Common)\ncomf.AddConfig(wasmedge.WasiCrypto_AsymmetricCommon)\ncomf.AddConfig(wasmedge.WasiCrypto_Kx)\ncomf.AddConfig(wasmedge.WasiCrypto_Signatures)\ncomf.AddConfig(wasmedge.WasiCrypto_Symmetric)\nvm := wasmedge.NewVMWithConfig(conf)\nconf.Release()\n\n// Get the WASI module instance.\nwasimod := vm.GetImportModule(wasmedge.WASI)\n// Get the WASI-crypto-common module instance.\ncryptocommonmod := vm.GetImportModule(wasmedge.WasiCrypto_Common)\n\n// Get the registered module instance by name.\nstore := vm.GetStore()\ncryptokxmod := store.FindModule("wasi_ephemeral_crypto_kx")\n\nvm.Release()\n')),(0,a.kt)("p",null,"After the ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.12.0")," version, due to removing the plug-in related configurations and automatically registering the plug-ins into VM objects, developers cannot use the ",(0,a.kt)("inlineCode",{parentName:"p"},"(*wasmedge.VM).GetImportModule()")," API to retrieve the module instances except the built-in host modules (",(0,a.kt)("inlineCode",{parentName:"p"},"WASI")," currently)."),(0,a.kt)("p",null,"However, developers can use the new APIs to retrieve the registered module instances more quickly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Assume that wasi_crypto plug-in is installed in the default plug-in path.\nwasmedge.LoadPluginDefaultPaths()\n// Add the WASI configurations.\nconf := wasmedge.NewConfigure(wasmedge.WASI)\nvm := wasmedge.NewVMWithConfig(conf)\nconf.Release()\n\n// Get the WASI module instance.\nwasimod := vm.GetImportModule(wasmedge.WASI)\n// Get the registered WASI-crypto-common module instance by name.\ncryptocommonmod := vm.GetRegisteredModule("wasi_ephemeral_crypto_common")\n\nvm.Release()\n')))}u.isMDXComponent=!0}}]);