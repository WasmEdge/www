"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[5518],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:3},i="Redis driver",s={unversionedId:"develop/rust/database/redis_driver",id:"develop/rust/database/redis_driver",title:"Redis driver",description:"WasmEdge provides a Redis driver for Rust developers, enabling developers to build database applications in Rust and then running in WasmEdge.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/develop/rust/database/redis_driver.md",sourceDirName:"develop/rust/database",slug:"/develop/rust/database/redis_driver",permalink:"/docs/zh/develop/rust/database/redis_driver",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/develop/rust/database/redis_driver.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"developSidebar",previous:{title:"PostgreSQL driver",permalink:"/docs/zh/develop/rust/database/postgres_driver"},next:{title:"Qdrant driver",permalink:"/docs/zh/develop/rust/database/qdrant_driver"}},l={},d=[{value:"Run the example",id:"run-the-example",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code explanation",id:"code-explanation",level:2}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"redis-driver"},"Redis driver"),(0,a.kt)("p",null,"WasmEdge provides a Redis driver for Rust developers, enabling developers to build database applications in Rust and then running in WasmEdge."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Before we start, ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh/develop/rust/setup"},"you need to have Rust and WasmEdge installed"),".\nMake sure that you read the ",(0,a.kt)("a",{parentName:"p",href:"../setup#special-notes"},"special notes on networking apps")," especially if you are compiling Rust programs on a Mac.")),(0,a.kt)("h2",{id:"run-the-example"},"Run the example"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/wasmedge-db-examples/tree/main/redis"},"wasmedge-db-example/redis")," is a Redis connector example written in Rust."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/WasmEdge/wasmedge-db-examples\ncd wasmedge-db-examples/redis\n\n# Compile the rust code into WASM\nRUSTFLAGS="--cfg wasmedge --cfg tokio_unstable" cargo build --target wasm32-wasi --release\n\n# Execute Redis command against a Redis instance at redis://localhost/\nwasmedge --env "REDIS_URL=redis://localhost/" target/wasm32-wasi/release/wasmedge-redis-client-examples.wasm\n')),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"In order to compile the ",(0,a.kt)("inlineCode",{parentName:"p"},"redis")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"tokio")," crates, we will need to apply patches to add WasmEdge-specific socket APIs to those crates in ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'[patch.crates-io]\ntokio = { git = "https://github.com/second-state/wasi_tokio.git", branch = "v1.36.x" }\n\n[dependencies]\nanyhow = "1.0"\nchrono = { version = "0.4", features = ["serde"] }\ntokio = { version = "1", features = ["full"] }\nredis = { version = "0.25.4", default-features = false, features = [\n    "tokio-comp",\n] }\n')),(0,a.kt)("h2",{id:"code-explanation"},"Code explanation"),(0,a.kt)("p",null,"The following program uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"redis")," crate to access a Redis server through its connection URL.\nIt gets the current time, saves the timestamp object to the Redis server, and then reads it back for\ndisplay on the console."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[tokio::main(flavor = "current_thread")]\nasync fn main() -> Result<()> {\n    // connect to redis\n    let client = redis::Client::open(&*get_url()).unwrap();\n    let mut con = client.get_multiplexed_async_connection().await.unwrap();\n\n    let time = format!("{}", chrono::Utc::now());\n    // throw away the result, just make sure it does not fail\n    let _: () = con.set("current_time", time).await.unwrap();\n\n    // read back the key and return it.  Because the return value\n    // from the function is a result for String, this will automatically\n    // convert into one.\n    let value: String = con.get("current_time").await.unwrap();\n    println!("Successfully GET `time`: {}", value);\n\n    Ok(())\n}\n')))}u.isMDXComponent=!0}}]);