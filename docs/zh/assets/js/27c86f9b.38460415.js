"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[8029],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=i(n),m=a,b=u["".concat(c,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(b,l(l({ref:t},p),{},{components:n})):r.createElement(b,l({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var i=2;i<s;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_position:1},l="UDF in the libSQL database",o={unversionedId:"embed/use-case/libsql",id:"embed/use-case/libsql",title:"UDF in the libSQL database",description:"libSQL is a fork of the popular SQLite database. One of the key enhancements libSQL brings is UDF (User Defined Functions) support. Through Wasm-based UDFs, users can add their own processing logic to the database, and then process the data in and out of the database on the fly. libSQL uses WasmEdge to run these UDFs. In this article, I will show you how.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/embed/use-case/libsql.md",sourceDirName:"embed/use-case",slug:"/embed/use-case/libsql",permalink:"/docs/zh/embed/use-case/libsql",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/embed/use-case/libsql.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"embedSidebar",previous:{title:"Use Cases",permalink:"/docs/zh/category/use-cases-1"},next:{title:"YoMo framework",permalink:"/docs/zh/embed/use-case/yomo"}},c={},i=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"The encrypt and decrypt example",id:"the-encrypt-and-decrypt-example",level:2}],p={toc:i};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"udf-in-the-libsql-database"},"UDF in the libSQL database"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/libsql/libsql"},"libSQL")," is a fork of the popular ",(0,a.kt)("a",{parentName:"p",href:"https://www.sqlite.org/"},"SQLite")," database. One of the key enhancements libSQL brings is UDF (User Defined Functions) support. Through Wasm-based UDFs, users can add their own processing logic to the database, and then process the data in and out of the database on the fly. libSQL uses WasmEdge to run these UDFs. In this article, I will show you how. "),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"First, you will need to ",(0,a.kt)("a",{parentName:"p",href:"/docs/zh/develop/build-and-run/install"},"install WasmEdge runtime"),"."),(0,a.kt)("p",null,"Next, install the latest libSQL or build it from source."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/libsql/libsql\ncd libsql\n./configure --enable-wasm-runtime-wasmedge\nmake\n")),(0,a.kt)("h2",{id:"the-encrypt-and-decrypt-example"},"The encrypt and decrypt example"),(0,a.kt)("p",null,"Build the encrypt and decrypt example into wasm. Since WasmEdge supports WASI functions here, we will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"wasm32-wasi")," target."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/libsql/libsql_bindgen\ncd libsql_bindgen/examples/encrypt_decrypt\ncargo build --target wasm32-wasi --release\n")),(0,a.kt)("p",null,"Then, we can build a SQL file for creating the ",(0,a.kt)("inlineCode",{parentName:"p"},"encrypt")," function in a libSQL database."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'export FUNC_NAME=\'encrypt\'\necho "DROP FUNCTION IF EXISTS ${FUNC_NAME};" >> create_${FUNC_NAME}_udf.sql\necho -n "CREATE FUNCTION ${FUNC_NAME} LANGUAGE wasm AS X\'" >> create_${FUNC_NAME}_udf.sql\nxxd -p  ../../target/wasm32-wasi/release/libsql_encrypt_decrypt.wasm | tr -d "\\n" >> create_${FUNC_NAME}_udf.sql \necho "\';" >> create_${FUNC_NAME}_udf.sql\n')),(0,a.kt)("p",null,"Create another SQL file for the ",(0,a.kt)("inlineCode",{parentName:"p"},"decrypt")," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'export FUNC_NAME=\'decrypt\'\necho "DROP FUNCTION IF EXISTS ${FUNC_NAME};" >> create_${FUNC_NAME}_udf.sql\necho -n "CREATE FUNCTION ${FUNC_NAME} LANGUAGE wasm AS X\'" >> create_${FUNC_NAME}_udf.sql\nxxd -p  ../../target/wasm32-wasi/release/libsql_encrypt_decrypt.wasm | tr -d "\\n" >> create_${FUNC_NAME}_udf.sql \necho "\';" >> create_${FUNC_NAME}_udf.sql\n')),(0,a.kt)("p",null,"Now, you can add those UDFs to a libSQL instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./libsql\nlibsql> .init_wasm_func_table\nlibsql> .read create_encrypt_udf.sql\nlibsql> .read create_decrypt_udf.sql\n")),(0,a.kt)("p",null,"Finally, you can create a table and test it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"libsql> \n\nCREATE TABLE secrets(secret);\nINSERT INTO secrets (secret) VALUES (encrypt('my secret value: 1', 's3cretp4ss'));\nINSERT INTO secrets (secret) VALUES (encrypt('my even more secret value: 2', 's3cretp4ss'));\nINSERT INTO secrets (secret) VALUES (encrypt('classified value: 3', 's3cretp4ss'));\n\nSELECT secret, decrypt(secret, 'wrong-pass') from secrets;\nsecret                                        decrypt(secret, 'wrong-pass')\n--------------------------------------------  -----------------------------\nIyTvoTEnh9a/f6+pac3rLPToP9DkWqS7CEW8tan3mbQ=  [ACCESS DENIED]              \nbUQ4fEe6hPnsMx8ABOZO97CMr/wouGTByfUCEmFVZTs=  [ACCESS DENIED]              \no+m1w7UdoxBZxLumNW0VoMKSMFaC4o8N5uknAQZ/yFY=  [ACCESS DENIED] \n\nSELECT secret, decrypt(secret, 's3cretp4ss') from secrets;\nsecret                                        decrypt(secret, 's3cretp4ss')\n--------------------------------------------  -----------------------------\nIyTvoTEnh9a/f6+pac3rLPToP9DkWqS7CEW8tan3mbQ=  my secret value: 1           \nbUQ4fEe6hPnsMx8ABOZO97CMr/wouGTByfUCEmFVZTs=  my even more secret value: 2 \no+m1w7UdoxBZxLumNW0VoMKSMFaC4o8N5uknAQZ/yFY=  classified value: 3 \n")))}u.isMDXComponent=!0}}]);