"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[7308],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var r=a.createContext({}),l=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(r.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,r=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),g=l(n),u=o,c=g["".concat(r,".").concat(u)]||g[u]||p[u]||s;return n?a.createElement(c,i(i({ref:t},m),{},{components:n})):a.createElement(c,i({ref:t},m))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=u;var d={};for(var r in t)hasOwnProperty.call(t,r)&&(d[r]=t[r]);d.originalType=e,d[g]="string"==typeof e?e:o,i[1]=d;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const s={sidebar_position:5},i="4.4.5 Upgrade to WasmEdge 0.10.0",d={unversionedId:"embed/c/reference/upgrade_to_0.10.0",id:"embed/c/reference/upgrade_to_0.10.0",title:"4.4.5 Upgrade to WasmEdge 0.10.0",description:"Due to the WasmEdge C API breaking changes, this document shows the guideline of programming with WasmEdge C API to upgrade from the 0.9.1 to the 0.10.0 version.",source:"@site/docs/embed/c/reference/upgrade_to_0.10.0.md",sourceDirName:"embed/c/reference",slug:"/embed/c/reference/upgrade_to_0.10.0",permalink:"/book/embed/c/reference/upgrade_to_0.10.0",draft:!1,editUrl:"https://github.com/alabulei1/book/docs/embed/c/reference/upgrade_to_0.10.0.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"embedSidebar",previous:{title:"4.4.4 C API 0.10.1  Documentation",permalink:"/book/embed/c/reference/0.10.1"},next:{title:"4.5.6 C API 0.9.1 Documentation",permalink:"/book/embed/c/reference/0.9.1"}},r={},l=[{value:"Concepts",id:"concepts",level:2},{value:"WasmEdge VM changes",id:"wasmedge-vm-changes",level:2},{value:"WasmEdge Executor changes",id:"wasmedge-executor-changes",level:2},{value:"Instances retrievement",id:"instances-retrievement",level:2},{value:"Host functions",id:"host-functions",level:2}],m={toc:l};function g(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"445-upgrade-to-wasmedge-0100"},"4.4.5 Upgrade to WasmEdge 0.10.0"),(0,o.kt)("p",null,"Due to the WasmEdge C API breaking changes, this document shows the guideline of programming with WasmEdge C API to upgrade from the ",(0,o.kt)("inlineCode",{parentName:"p"},"0.9.1")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0")," version."),(0,o.kt)("h2",{id:"concepts"},"Concepts"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Merged the ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ImportObjectContext")," into the ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ModuleInstanceContext"),"."),(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ImportObjectContext")," which is for the host functions is merged into ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ModuleInstanceContext"),".\nDevelopers can use the related APIs to construct host modules."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectCreate()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceCreate()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectDelete()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceDelete()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectAddFunction()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceAddFunction()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectAddTable()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceAddTable()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectAddMemory()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceAddMemory()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectAddGlobal()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceAddGlobal()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectCreateWASI()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceCreateWASI()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectCreateWasmEdgeProcess()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceCreateWasmEdgeProcess()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectInitWASI()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceInitWASI()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ImportObjectInitWasmEdgeProcess()")," is changed to ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceInitWasmEdgeProcess()"),".")),(0,o.kt)("p",{parentName:"li"},"For the new host function examples, please refer to ",(0,o.kt)("a",{parentName:"p",href:"#host-functions"},"the example below"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Used the pointer to ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_FunctionInstanceContext")," instead of the index in the ",(0,o.kt)("inlineCode",{parentName:"p"},"FuncRef")," value type."),(0,o.kt)("p",{parentName:"li"},"For the better performance and security, the ",(0,o.kt)("inlineCode",{parentName:"p"},"FuncRef")," related APIs used the ",(0,o.kt)("inlineCode",{parentName:"p"},"const WasmEdge_FunctionInstanceContext *")," for the parameters and returns."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValueGenFuncRef()")," is changed to use the ",(0,o.kt)("inlineCode",{parentName:"li"},"const WasmEdge_FunctionInstanceContext *")," as it's argument."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValueGetFuncRef()")," is changed to return the ",(0,o.kt)("inlineCode",{parentName:"li"},"const WasmEdge_FunctionInstanceContext *"),"."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Supported multiple anonymous WASM module instantiation."),(0,o.kt)("p",{parentName:"li"},"In the version before ",(0,o.kt)("inlineCode",{parentName:"p"},"0.9.1"),", WasmEdge only supports 1 anonymous WASM module to be instantiated at one time. If developers instantiate a new WASM module, the old one will be replaced.\nAfter the ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0")," version, developers can instantiate multiple anonymous WASM module by ",(0,o.kt)("inlineCode",{parentName:"p"},"Executor")," and get the ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instance. But for the source code using the ",(0,o.kt)("inlineCode",{parentName:"p"},"VM")," APIs, the behavior is not changed.\nFor the new examples of instantiating multiple anonymous WASM modules, please refer to ",(0,o.kt)("a",{parentName:"p",href:"#wasmedge-executor-changes"},"the example below"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Behavior changed of ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_StoreContext"),"."),(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Function"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Table"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Memory"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"Global")," instances retrievement from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," is moved to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instance. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," only manage the module linking when instantiation and the named module searching after the ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0")," version."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListFunctionLength()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListFunctionRegisteredLength()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceListFunctionLength()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListTableLength()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListTableRegisteredLength()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceListTableLength()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListMemoryLength()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListMemoryRegisteredLength()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceListMemoryLength()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListGlobalLength()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListGlobalRegisteredLength()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceListGlobalLength()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListFunction()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListFunctionRegistered()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceListFunction()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListTable()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListTableRegistered()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceListTable()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListMemory()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListMemoryRegistered()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceListMemory()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListGlobal()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreListGlobalRegistered()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceListGlobal()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreFindFunction()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreFindFunctionRegistered()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceFindFunction()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreFindTable()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreFindTableRegistered()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceFindTable()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreFindMemory()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreFindMemoryRegistered()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceFindMemory()"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreFindGlobal()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_StoreFindGlobalRegistered()")," is replaced by ",(0,o.kt)("inlineCode",{parentName:"li"},"WasmEdge_ModuleInstanceFindGlobal()"),".")),(0,o.kt)("p",{parentName:"li"},"For the new examples of retrieving instances, please refer to ",(0,o.kt)("a",{parentName:"p",href:"#instances-retrievement"},"the example below"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ModuleInstanceContext"),"-based resource management."),(0,o.kt)("p",{parentName:"li"},"Except the creation of ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instance for the host functions, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Executor")," will output a ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instance after instantiation. No matter the anonymous or named modules, developers have the responsibility to destroy them by ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ModuleInstanceDelete()")," API.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," will link to the named ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instance after registering. After the destroyment of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instance, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," will unlink to that automatically; after the destroyment of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Store"),", the all ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instances the ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," linked to will unlink to that ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," automatically."))),(0,o.kt)("h2",{id:"wasmedge-vm-changes"},"WasmEdge VM changes"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"VM")," APIs are basically not changed, except the ",(0,o.kt)("inlineCode",{parentName:"p"},"ImportObject")," related APIs."),(0,o.kt)("p",null,"The following is the example of WASI initialization in WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.9.1")," C API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"WasmEdge_ConfigureContext *ConfCxt = WasmEdge_ConfigureCreate();\nWasmEdge_ConfigureAddHostRegistration(ConfCxt, WasmEdge_HostRegistration_Wasi);\nWasmEdge_VMContext *VMCxt = WasmEdge_VMCreate(ConfCxt, NULL);\n/* The following API can retrieve the pre-registration import objects from the VM context. */\n/* This API will return `NULL` if the corresponding pre-registration is not set into the configuration. */\nWasmEdge_ImportObjectContext *WasiObject =\n    WasmEdge_VMGetImportModuleContext(VMCxt, WasmEdge_HostRegistration_Wasi);\n/* Initialize the WASI. */\nWasmEdge_ImportObjectInitWASI(WasiObject, /* ... ignored */ );\n\n/* ... */\n\nWasmEdge_VMDelete(VMCxt);\nWasmEdge_ConfigureDelete(ConfCxt);\n")),(0,o.kt)("p",null,"Developers can change to use the WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0")," C API as follows, with only replacing the ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ImportObjectContext")," into ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ModuleInstanceContext"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"WasmEdge_ConfigureContext *ConfCxt = WasmEdge_ConfigureCreate();\nWasmEdge_ConfigureAddHostRegistration(ConfCxt, WasmEdge_HostRegistration_Wasi);\nWasmEdge_VMContext *VMCxt = WasmEdge_VMCreate(ConfCxt, NULL);\n/* The following API can retrieve the pre-registration module instances from the VM context. */\n/* This API will return `NULL` if the corresponding pre-registration is not set into the configuration. */\nWasmEdge_ModuleInstanceContext *WasiModule =\n    WasmEdge_VMGetImportModuleContext(VMCxt, WasmEdge_HostRegistration_Wasi);\n/* Initialize the WASI. */\nWasmEdge_ModuleInstanceInitWASI(WasiModule, /* ... ignored */ );\n\n/* ... */\n\nWasmEdge_VMDelete(VMCxt);\nWasmEdge_ConfigureDelete(ConfCxt);\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"VM")," provides a new API for getting the current instantiated anonymous ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instance.\nFor example, if developer want to get the exported ",(0,o.kt)("inlineCode",{parentName:"p"},"Global")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/* Assume that a WASM module is instantiated in `VMCxt`, and exports the "global_i32". */\nWasmEdge_StoreContext *StoreCxt = WasmEdge_VMGetStoreContext(VMCxt);\nWasmEdge_String GlobName = WasmEdge_StringCreateByCString("global_i32");\nWasmEdge_GlobalInstanceContext *GlobCxt = WasmEdge_StoreFindGlobal(StoreCxt, GlobName);\nWasmEdge_StringDelete(GlobName);\n')),(0,o.kt)("p",null,"After the WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0")," C API, developers can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_VMGetActiveModule()")," to get the module instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/* Assume that a WASM module is instantiated in `VMCxt`, and exports the "global_i32". */\nconst WasmEdge_ModuleInstanceContext *ModCxt = WasmEdge_VMGetActiveModule(VMCxt);\n/* The example of retrieving the global instance. */\nWasmEdge_String GlobName = WasmEdge_StringCreateByCString("global_i32");\nWasmEdge_GlobalInstanceContext *GlobCxt = WasmEdge_ModuleInstanceFindGlobal(ModCxt, GlobName);\nWasmEdge_StringDelete(GlobName);\n')),(0,o.kt)("h2",{id:"wasmedge-executor-changes"},"WasmEdge Executor changes"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Executor")," helps to instantiate a WASM module, register a WASM module into ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," with module name, register the host modules with host functions, or invoke functions."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"WASM module instantiation"),(0,o.kt)("p",{parentName:"li"},"In WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.9.1")," version, developers can instantiate a WASM module by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Executor")," API:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-c"},'WasmEdge_ASTModuleContext *ASTCxt;\n/*\n * Assume that `ASTCxt` is a loaded WASM from file or buffer and has passed the validation.\n * Assume that `ExecCxt` is a `WasmEdge_ExecutorContext`.\n * Assume that `StoreCxt` is a `WasmEdge_StoreContext`.\n */\nWasmEdge_Result Res = WasmEdge_ExecutorInstantiate(ExecCxt, StoreCxt, ASTCxt);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Instantiation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n}\n')),(0,o.kt)("p",{parentName:"li"},"Then the WASM module is instantiated into an anonymous module instance and handled by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Store"),".\nIf a new WASM module is instantiated by this API, the old instantiated module instance will be cleaned.\nAfter the WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0")," version, the instantiated anonymous module will be outputted and handled by caller, and not only 1 anonymous module instance can be instantiated.\nDevelopers have the responsibility to destroy the outputted module instances."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-c"},'WasmEdge_ASTModuleContext *ASTCxt1, *ASTCxt2;\n/*\n * Assume that `ASTCxt1` and `ASTCxt2` are loaded WASMs from different files or buffers,\n * and have both passed the validation.\n * Assume that `ExecCxt` is a `WasmEdge_ExecutorContext`.\n * Assume that `StoreCxt` is a `WasmEdge_StoreContext`.\n */\nWasmEdge_ModuleInstanceContext *ModCxt1 = NULL;\nWasmEdge_ModuleInstanceContext *ModCxt2 = NULL;\nWasmEdge_Result Res = WasmEdge_ExecutorInstantiate(ExecCxt, &ModCxt1, StoreCxt, ASTCxt1);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Instantiation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n}\nRes = WasmEdge_ExecutorInstantiate(ExecCxt, &ModCxt2, StoreCxt, ASTCxt2);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Instantiation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"WASM module registration with module name"),(0,o.kt)("p",{parentName:"li"},"When instantiating and registering a WASM module with module name, developers can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ExecutorRegisterModule()")," API before WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.9.1"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-c"},'WasmEdge_ASTModuleContext *ASTCxt;\n/*\n * Assume that `ASTCxt` is a loaded WASM from file or buffer and has passed the validation.\n * Assume that `ExecCxt` is a `WasmEdge_ExecutorContext`.\n * Assume that `StoreCxt` is a `WasmEdge_StoreContext`.\n */\n\n/* Register the WASM module into store with the export module name "mod". */\nWasmEdge_String ModName = WasmEdge_StringCreateByCString("mod");\nRes = WasmEdge_ExecutorRegisterModule(ExecCxt, StoreCxt, ASTCxt, ModName);\nWasmEdge_StringDelete(ModName);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("WASM registration failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n}\n')),(0,o.kt)("p",{parentName:"li"},"The same feature is implemented in WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0"),", but in different API ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ExecutorRegister()"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-c"},'WasmEdge_ASTModuleContext *ASTCxt;\n/*\n * Assume that `ASTCxt` is a loaded WASM from file or buffer and has passed the validation.\n * Assume that `ExecCxt` is a `WasmEdge_ExecutorContext`.\n * Assume that `StoreCxt` is a `WasmEdge_StoreContext`.\n */\n\n/* Register the WASM module into store with the export module name "mod". */\nWasmEdge_String ModName = WasmEdge_StringCreateByCString("mod");\n/* The output module instance. */\nWasmEdge_ModuleInstanceContext *ModCxt = NULL;\nRes = WasmEdge_ExecutorRegister(ExecCxt, &ModCxt, StoreCxt, ASTCxt, ModName);\nWasmEdge_StringDelete(ModName);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("WASM registration failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n}\n')),(0,o.kt)("p",{parentName:"li"},"Developers have the responsibility to destroy the outputted module instances.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Host module registration"),(0,o.kt)("p",{parentName:"li"},"In WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.9.1"),", developers can create a ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ImportObjectContext")," and register into ",(0,o.kt)("inlineCode",{parentName:"p"},"Store"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/* Create the import object with the export module name. */\nWasmEdge_String ModName = WasmEdge_StringCreateByCString("module");\nWasmEdge_ImportObjectContext *ImpObj = WasmEdge_ImportObjectCreate(ModName);\nWasmEdge_StringDelete(ModName);\n/*\n * ...\n * Add the host functions, tables, memories, and globals into the import object.\n */\n/* The import module context has already contained the export module name. */\nRes = WasmEdge_ExecutorRegisterImport(ExecCxt, StoreCxt, ImpObj);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Import object registration failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n}\n')),(0,o.kt)("p",{parentName:"li"},"After WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0"),", developers should use the ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ModuleInstanceContext")," instead:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/* Create the module instance with the export module name. */\nWasmEdge_String ModName = WasmEdge_StringCreateByCString("module");\nWasmEdge_ModuleInstanceContext *ModCxt = WasmEdge_ModuleInstanceCreate(ModName);\nWasmEdge_StringDelete(ModName);\n/*\n * ...\n * Add the host functions, tables, memories, and globals into the module instance.\n */\n/* The module instance context has already contained the export module name. */\nRes = WasmEdge_ExecutorRegisterImport(ExecCxt, StoreCxt, ModCxt);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Module instance registration failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n}\n')),(0,o.kt)("p",{parentName:"li"},"Developers have the responsibility to destroy the created module instances.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"WASM function invocation"),(0,o.kt)("p",{parentName:"li"},"This example uses the ",(0,o.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wasm"},"fibonacci.wasm"),", and the corresponding WAT file is at ",(0,o.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wat"},"fibonacci.wat"),".\nIn WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.9.1")," version, developers can invoke a WASM function with the export function name:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/* Create the store context. The store context holds the instances. */\nWasmEdge_StoreContext *StoreCxt = WasmEdge_StoreCreate();\n/* Result. */\nWasmEdge_Result Res;\n\n/* Create the loader context. The configure context can be NULL. */\nWasmEdge_LoaderContext *LoadCxt = WasmEdge_LoaderCreate(NULL);\n/* Create the validator context. The configure context can be NULL. */\nWasmEdge_ValidatorContext *ValidCxt = WasmEdge_ValidatorCreate(NULL);\n/* Create the executor context. The configure context and the statistics context can be NULL. */\nWasmEdge_ExecutorContext *ExecCxt = WasmEdge_ExecutorCreate(NULL, NULL);\n\n/* Load the WASM file or the compiled-WASM file and convert into the AST module context. */\nWasmEdge_ASTModuleContext *ASTCxt = NULL;\nRes = WasmEdge_LoaderParseFromFile(LoadCxt, &ASTCxt, "fibonacci.wasm");\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Loading phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Validate the WASM module. */\nRes = WasmEdge_ValidatorValidate(ValidCxt, ASTCxt);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Validation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Instantiate the WASM module into the store context. */\nRes = WasmEdge_ExecutorInstantiate(ExecCxt, StoreCxt, ASTCxt);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Instantiation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Invoke the function which is exported with the function name "fib". */\nWasmEdge_String FuncName = WasmEdge_StringCreateByCString("fib");\nWasmEdge_Value Params[1] = { WasmEdge_ValueGenI32(18) };\nWasmEdge_Value Returns[1];\nRes = WasmEdge_ExecutorInvoke(ExecCxt, StoreCxt, FuncName, Params, 1, Returns, 1);\nif (WasmEdge_ResultOK(Res)) {\n  printf("Get the result: %d\\n", WasmEdge_ValueGetI32(Returns[0]));\n} else {\n  printf("Execution phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n\nWasmEdge_ASTModuleDelete(ASTCxt);\nWasmEdge_LoaderDelete(LoadCxt);\nWasmEdge_ValidatorDelete(ValidCxt);\nWasmEdge_ExecutorDelete(ExecCxt);\nWasmEdge_StoreDelete(StoreCxt);\n')),(0,o.kt)("p",{parentName:"li"},"After the WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0"),", developers should retrieve the ",(0,o.kt)("inlineCode",{parentName:"p"},"Function")," instance by function name first."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/*\n * ...\n * Ignore the unchanged steps before validation. Please refer to the sample code above.\n */\nWasmEdge_ModuleInstanceContext *ModCxt = NULL;\n/* Instantiate the WASM module. */\nRes = WasmEdge_ExecutorInstantiate(ExecCxt, &ModCxt1, StoreCxt, ASTCxt);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Instantiation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Retrieve the function instance by name. */\nWasmEdge_String FuncName = WasmEdge_StringCreateByCString("fib");\nWasmEdge_FunctionInstanceContext *FuncCxt = WasmEdge_ModuleInstanceFindFunction(ModCxt, FuncName);\nWasmEdge_StringDelete(FuncName);\n/* Invoke the function. */\nWasmEdge_Value Params[1] = { WasmEdge_ValueGenI32(18) };\nWasmEdge_Value Returns[1];\nRes = WasmEdge_ExecutorInvoke(ExecCxt, FuncCxt, Params, 1, Returns, 1);\nif (WasmEdge_ResultOK(Res)) {\n  printf("Get the result: %d\\n", WasmEdge_ValueGetI32(Returns[0]));\n} else {\n  printf("Execution phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n\nWasmEdge_ModuleInstanceDelete(ModCxt);\nWasmEdge_ASTModuleDelete(ASTCxt);\nWasmEdge_LoaderDelete(LoadCxt);\nWasmEdge_ValidatorDelete(ValidCxt);\nWasmEdge_ExecutorDelete(ExecCxt);\nWasmEdge_StoreDelete(StoreCxt);\n')))),(0,o.kt)("h2",{id:"instances-retrievement"},"Instances retrievement"),(0,o.kt)("p",null,"This example uses the ",(0,o.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wasm"},"fibonacci.wasm"),", and the corresponding WAT file is at ",(0,o.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/examples/wasm/fibonacci.wat"},"fibonacci.wat"),"."),(0,o.kt)("p",null,"Before the WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.9.1")," versions, developers can retrieve all exported instances of named or anonymous modules from ",(0,o.kt)("inlineCode",{parentName:"p"},"Store"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/* Create the store context. The store context holds the instances. */\nWasmEdge_StoreContext *StoreCxt = WasmEdge_StoreCreate();\n/* Result. */\nWasmEdge_Result Res;\n\n/* Create the loader context. The configure context can be NULL. */\nWasmEdge_LoaderContext *LoadCxt = WasmEdge_LoaderCreate(NULL);\n/* Create the validator context. The configure context can be NULL. */\nWasmEdge_ValidatorContext *ValidCxt = WasmEdge_ValidatorCreate(NULL);\n/* Create the executor context. The configure context and the statistics context can be NULL. */\nWasmEdge_ExecutorContext *ExecCxt = WasmEdge_ExecutorCreate(NULL, NULL);\n\n/* Load the WASM file or the compiled-WASM file and convert into the AST module context. */\nWasmEdge_ASTModuleContext *ASTCxt = NULL;\nRes = WasmEdge_LoaderParseFromFile(LoadCxt, &ASTCxt, "fibonacci.wasm");\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Loading phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Validate the WASM module. */\nRes = WasmEdge_ValidatorValidate(ValidCxt, ASTCxt);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Validation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Example: register and instantiate the WASM module with the module name "module_fib". */\nWasmEdge_String ModName = WasmEdge_StringCreateByCString("module_fib");\nRes = WasmEdge_ExecutorRegisterModule(ExecCxt, StoreCxt, ASTCxt, ModName);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Instantiation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Example: Instantiate the WASM module into the store context. */\nRes = WasmEdge_ExecutorInstantiate(ExecCxt, StoreCxt, ASTCxt);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Instantiation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\nWasmEdge_StringDelete(ModName);\n\n/* Now, developers can retrieve the exported instances from the store. */\n/* Take the exported functions as example. This WASM exports the function "fib". */\nWasmEdge_String FuncName = WasmEdge_StringCreateByCString("fib");\nWasmEdge_FunctionInstanceContext *FoundFuncCxt;\n/* Find the function "fib" from the instantiated anonymous module. */\nFoundFuncCxt = WasmEdge_StoreFindFunction(StoreCxt, FuncName);\n/* Find the function "fib" from the registered module "module_fib". */\nModName = WasmEdge_StringCreateByCString("module_fib");\nFoundFuncCxt = WasmEdge_StoreFindFunctionRegistered(StoreCxt, ModName, FuncName);\nWasmEdge_StringDelete(ModName);\nWasmEdge_StringDelete(FuncName);\n\nWasmEdge_ASTModuleDelete(ASTCxt);\nWasmEdge_LoaderDelete(LoadCxt);\nWasmEdge_ValidatorDelete(ValidCxt);\nWasmEdge_ExecutorDelete(ExecCxt);\nWasmEdge_StoreDelete(StoreCxt);\n')),(0,o.kt)("p",null,"After the WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0"),", developers can instantiate several anonymous ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instances, and should retrieve the exported instances from named or anonymous ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")," instances:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/* Create the store context. The store context is the object to link the modules for imports and exports. */\nWasmEdge_StoreContext *StoreCxt = WasmEdge_StoreCreate();\n/* Result. */\nWasmEdge_Result Res;\n\n/* Create the loader context. The configure context can be NULL. */\nWasmEdge_LoaderContext *LoadCxt = WasmEdge_LoaderCreate(NULL);\n/* Create the validator context. The configure context can be NULL. */\nWasmEdge_ValidatorContext *ValidCxt = WasmEdge_ValidatorCreate(NULL);\n/* Create the executor context. The configure context and the statistics context can be NULL. */\nWasmEdge_ExecutorContext *ExecCxt = WasmEdge_ExecutorCreate(NULL, NULL);\n\n/* Load the WASM file or the compiled-WASM file and convert into the AST module context. */\nWasmEdge_ASTModuleContext *ASTCxt = NULL;\nRes = WasmEdge_LoaderParseFromFile(LoadCxt, &ASTCxt, "fibonacci.wasm");\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Loading phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Validate the WASM module. */\nRes = WasmEdge_ValidatorValidate(ValidCxt, ASTCxt);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Validation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Example: register and instantiate the WASM module with the module name "module_fib". */\nWasmEdge_ModuleInstanceContext *NamedModCxt = NULL;\nWasmEdge_String ModName = WasmEdge_StringCreateByCString("module_fib");\nRes = WasmEdge_ExecutorRegister(ExecCxt, &NamedModCxt, StoreCxt, ASTCxt, ModName);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Instantiation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\n/* Example: Instantiate the WASM module and get the output module instance. */\nWasmEdge_ModuleInstanceContext *ModCxt = NULL;\nRes = WasmEdge_ExecutorInstantiate(ExecCxt, &ModCxt, StoreCxt, ASTCxt);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Instantiation phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n  return -1;\n}\nWasmEdge_StringDelete(ModName);\n\n/* Now, developers can retrieve the exported instances from the module instances. */\n/* Take the exported functions as example. This WASM exports the function "fib". */\nWasmEdge_String FuncName = WasmEdge_StringCreateByCString("fib");\nWasmEdge_FunctionInstanceContext *FoundFuncCxt;\n/* Find the function "fib" from the instantiated anonymous module. */\nFoundFuncCxt = WasmEdge_ModuleInstanceFindFunction(ModCxt, FuncName);\n/* Find the function "fib" from the registered module "module_fib". */\nFoundFuncCxt = WasmEdge_ModuleInstanceFindFunction(NamedModCxt, FuncName);\n/* Or developers can get the named module instance from the store: */\nModName = WasmEdge_StringCreateByCString("module_fib");\nconst WasmEdge_ModuleInstanceContext *ModCxtGot = WasmEdge_StoreFindModule(StoreCxt, ModName);\nWasmEdge_StringDelete(ModName);\nFoundFuncCxt = WasmEdge_ModuleInstanceFindFunction(ModCxtGot, FuncName);\nWasmEdge_StringDelete(FuncName);\n\nWasmEdge_ModuleInstanceDelete(NamedModCxt);\nWasmEdge_ModuleInstanceDelete(ModCxt);\nWasmEdge_ASTModuleDelete(ASTCxt);\nWasmEdge_LoaderDelete(LoadCxt);\nWasmEdge_ValidatorDelete(ValidCxt);\nWasmEdge_ExecutorDelete(ExecCxt);\nWasmEdge_StoreDelete(StoreCxt);\n')),(0,o.kt)("h2",{id:"host-functions"},"Host functions"),(0,o.kt)("p",null,"The difference of host functions are the replacement of ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ImportObjectContext"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/* Host function body definition. */\nWasmEdge_Result Add(void *Data, WasmEdge_MemoryInstanceContext *MemCxt,\n                    const WasmEdge_Value *In, WasmEdge_Value *Out) {\n  int32_t Val1 = WasmEdge_ValueGetI32(In[0]);\n  int32_t Val2 = WasmEdge_ValueGetI32(In[1]);\n  Out[0] = WasmEdge_ValueGenI32(Val1 + Val2);\n  return WasmEdge_Result_Success;\n}\n\n/* Create the import object. */\nWasmEdge_String ExportName = WasmEdge_StringCreateByCString("module");\nWasmEdge_ImportObjectContext *ImpObj = WasmEdge_ImportObjectCreate(ExportName);\nWasmEdge_StringDelete(ExportName);\n\n/* Create and add a function instance into the import object. */\nenum WasmEdge_ValType ParamList[2] = { WasmEdge_ValType_I32, WasmEdge_ValType_I32 };\nenum WasmEdge_ValType ReturnList[1] = { WasmEdge_ValType_I32 };\nWasmEdge_FunctionTypeContext *HostFType = \n    WasmEdge_FunctionTypeCreate(ParamList, 2, ReturnList, 1);\nWasmEdge_FunctionInstanceContext *HostFunc =\n    WasmEdge_FunctionInstanceCreate(HostFType, Add, NULL, 0);\n/*\n * The third parameter is the pointer to the additional data object.\n * Developers should guarantee the life cycle of the data, and it can be\n * `NULL` if the external data is not needed.\n */\nWasmEdge_FunctionTypeDelete(HostFType);\nWasmEdge_String FuncName = WasmEdge_StringCreateByCString("add");\nWasmEdge_ImportObjectAddFunction(ImpObj, FuncName, HostFunc);\nWasmEdge_StringDelete(FuncName);\n\n/*\n * The import objects should be deleted.\n * Developers should __NOT__ destroy the instances added into the import object contexts.\n */\nWasmEdge_ImportObjectDelete(ImpObj);\n')),(0,o.kt)("p",null,"Developers can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"WasmEdge_ModuleInstanceContext")," to upgrade to WasmEdge ",(0,o.kt)("inlineCode",{parentName:"p"},"0.10.0")," easily."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'/* Host function body definition. */\nWasmEdge_Result Add(void *Data, WasmEdge_MemoryInstanceContext *MemCxt,\n                    const WasmEdge_Value *In, WasmEdge_Value *Out) {\n  int32_t Val1 = WasmEdge_ValueGetI32(In[0]);\n  int32_t Val2 = WasmEdge_ValueGetI32(In[1]);\n  Out[0] = WasmEdge_ValueGenI32(Val1 + Val2);\n  return WasmEdge_Result_Success;\n}\n\n/* Create a module instance. */\nWasmEdge_String ExportName = WasmEdge_StringCreateByCString("module");\nWasmEdge_ModuleInstanceContext *HostModCxt = WasmEdge_ModuleInstanceCreate(ExportName);\nWasmEdge_StringDelete(ExportName);\n\n/* Create and add a function instance into the module instance. */\nenum WasmEdge_ValType ParamList[2] = { WasmEdge_ValType_I32, WasmEdge_ValType_I32 };\nenum WasmEdge_ValType ReturnList[1] = { WasmEdge_ValType_I32 };\nWasmEdge_FunctionTypeContext *HostFType = \n    WasmEdge_FunctionTypeCreate(ParamList, 2, ReturnList, 1);\nWasmEdge_FunctionInstanceContext *HostFunc =\n    WasmEdge_FunctionInstanceCreate(HostFType, Add, NULL, 0);\n/*\n * The third parameter is the pointer to the additional data object.\n * Developers should guarantee the life cycle of the data, and it can be\n * `NULL` if the external data is not needed.\n */\nWasmEdge_FunctionTypeDelete(HostFType);\nWasmEdge_String FuncName = WasmEdge_StringCreateByCString("add");\nWasmEdge_ModuleInstanceAddFunction(HostModCxt, FuncName, HostFunc);\nWasmEdge_StringDelete(FuncName);\n\n/*\n * The module instance should be deleted.\n * Developers should __NOT__ destroy the instances added into the module instance contexts.\n */\nWasmEdge_ModuleInstanceDelete(HostModCxt);\n')))}g.isMDXComponent=!0}}]);