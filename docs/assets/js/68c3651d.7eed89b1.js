"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[8426],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,f=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?o.createElement(f,l(l({ref:t},d),{},{components:n})):o.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:i,l[1]=a;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},76139:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var o=n(87462),i=(n(67294),n(3905));const r={sidebar_position:6},l="Build WasmEdge With WasmEdge-TensorflowLite Plug-in",a={unversionedId:"contribute/source/plugin/tensorflowlite",id:"contribute/source/plugin/tensorflowlite",title:"Build WasmEdge With WasmEdge-TensorflowLite Plug-in",description:"The WasmEdge-TensorflowLite plug-in is a software component that extends the functionality of the WasmEdge runtime to perform TensorFlow-Lite model inference. It allows WebAssembly applications to access TensorFlow-Lite functionality when executed on the WasmEdge runtime. The plugin provides a bridge between the WasmEdge runtime and the TensorFlow-Lite backend, allowing developers to execute machine learning models within WebAssembly applications.",source:"@site/docs/contribute/source/plugin/tensorflowlite.md",sourceDirName:"contribute/source/plugin",slug:"/contribute/source/plugin/tensorflowlite",permalink:"/docs/contribute/source/plugin/tensorflowlite",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/contribute/source/plugin/tensorflowlite.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"contributeSidebar",previous:{title:"Build WasmEdge With WasmEdge-Tensorflow Plug-in",permalink:"/docs/contribute/source/plugin/tensorflow"},next:{title:"Build with eBPF Plug-in",permalink:"/docs/contribute/source/plugin/ebpf"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Build WasmEdge with WasmEdge-TensorflowLite Plug-in",id:"build-wasmedge-with-wasmedge-tensorflowlite-plug-in-1",level:2},{value:"Install the TensorFlowLite Dependency",id:"install-the-tensorflowlite-dependency",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"build-wasmedge-with-wasmedge-tensorflowlite-plug-in"},"Build WasmEdge With WasmEdge-TensorflowLite Plug-in"),(0,i.kt)("p",null,"The WasmEdge-TensorflowLite plug-in is a software component that extends the functionality of the WasmEdge runtime to perform TensorFlow-Lite model inference. It allows WebAssembly applications to access TensorFlow-Lite functionality when executed on the WasmEdge runtime. The plugin provides a bridge between the WasmEdge runtime and the TensorFlow-Lite backend, allowing developers to execute machine learning models within WebAssembly applications."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"The prerequisites of the WasmEdge-TensorflowLite plug-in is the same as the WasmEdge building environment on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/contribute/source/os/linux"},"Linux platforms")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/contribute/source/os/macos"},"MacOS platforms"),"."),(0,i.kt)("h2",{id:"build-wasmedge-with-wasmedge-tensorflowlite-plug-in-1"},"Build WasmEdge with WasmEdge-TensorflowLite Plug-in"),(0,i.kt)("p",null,"To enable the WasmEdge WasmEdge-TensorflowLite, developers need to ",(0,i.kt)("a",{parentName:"p",href:"/docs/contribute/source/build_from_src"},"building the WasmEdge from source")," with the cmake option ",(0,i.kt)("inlineCode",{parentName:"p"},"-DWASMEDGE_PLUGIN_TENSORFLOWLITE=On"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd <path/to/your/wasmedge/source/folder>\ncmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_TENSORFLOWLITE=On\ncmake --build build\n# For the WasmEdge-TensorflowLite plug-in, you should install this project.\ncmake --install build\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If the built ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," CLI tool cannot find the WasmEdge-TensorflowLite plug-in, you can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"WASMEDGE_PLUGIN_PATH")," environment variable to the plug-in installation path (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/"),", or the built plug-in path ",(0,i.kt)("inlineCode",{parentName:"p"},"build/plugins/wasmedge_tensorflowlite/"),") to try to fix this issue.")),(0,i.kt)("p",null,"Then you will have an executable ",(0,i.kt)("inlineCode",{parentName:"p"},"wasmedge")," runtime under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," and the WasmEdge-TensorflowLite plug-in under ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib/wasmedge/libwasmedgePluginWasmEdgeTensorflowLite.so")," after installation."),(0,i.kt)("h2",{id:"install-the-tensorflowlite-dependency"},"Install the TensorFlowLite Dependency"),(0,i.kt)("p",null,"Installing the necessary ",(0,i.kt)("inlineCode",{parentName:"p"},"libtensorflowlite_c.so")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"libtensorflowlite_flex.so")," on both ",(0,i.kt)("inlineCode",{parentName:"p"},"Linux")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"MacOS")," platforms, we recommend the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -s -L -O --remote-name-all https://github.com/second-state/WasmEdge-tensorflow-deps/releases/download/TF-2.12.0-CC/WasmEdge-tensorflow-deps-TFLite-TF-2.12.0-CC-manylinux2014_x86_64.tar.gz\n# For the Linux aarch64 platforms, please use the `WasmEdge-tensorflow-deps-TFLite-TF-2.12.0-CC-manylinux2014_aarch64.tar.gz`.\n# For the MacOS x86_64 platforms, please use the `WasmEdge-tensorflow-deps-TFLite-TF-2.12.0-CC-darwin_x86_64.tar.gz`.\n# For the MacOS arm64 platforms, please use the `WasmEdge-tensorflow-deps-TFLite-TF-2.12.0-CC-darwin_arm64.tar.gz`.\ntar -zxf WasmEdge-tensorflow-deps-TFLite-TF-2.12.0-CC-manylinux2014_x86_64.tar.gz\nrm -f WasmEdge-tensorflow-deps-TFLite-TF-2.12.0-CC-manylinux2014_x86_64.tar.gz\n")),(0,i.kt)("p",null,"The shared library will be extracted in the current directory ",(0,i.kt)("inlineCode",{parentName:"p"},"./libtensorflowlite_c.so")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"./libtensorflowlite_flex.so")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"Linux")," platforms, or ",(0,i.kt)("inlineCode",{parentName:"p"},"./libtensorflowlite_c.dylib")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"./libtensorflowlite_flex.dylib")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"MacOS")," platforms."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"After building the plug-in, you can also find these shared libraries under the ",(0,i.kt)("inlineCode",{parentName:"p"},"build/_deps/wasmedge_tensorflow_lib_tflite-src/")," directory.")),(0,i.kt)("p",null,"Then you can move the library to the installation path:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mv libtensorflowlite_c.so /usr/local/lib\nmv libtensorflowlite_flex.so /usr/local/lib\n")),(0,i.kt)("p",null,"If on ",(0,i.kt)("inlineCode",{parentName:"p"},"MacOS")," platforms:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mv libtensorflowlite_c.dylib /usr/local/lib\nmv libtensorflowlite_flex.dylib /usr/local/lib\n")),(0,i.kt)("p",null,"Or set the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"export LD_LIBRARY_PATH=$(pwd):${LD_LIBRARY_PATH}"),"."),(0,i.kt)("p",null,"For more information, you can refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/tree/master/plugins/wasmedge_tensorflowlite"},"GitHub repository"),"."))}m.isMDXComponent=!0}}]);