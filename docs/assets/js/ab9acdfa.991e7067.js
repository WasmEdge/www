"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[5515],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,b=p["".concat(i,".").concat(d)]||p[d]||m[d]||s;return n?r.createElement(b,o(o({ref:t},u),{},{components:n})):r.createElement(b,o({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1356:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_position:1},o="Kubernetes + containerd + crun",l={unversionedId:"develop/deploy/kubernetes/kubernetes-containerd-crun",id:"develop/deploy/kubernetes/kubernetes-containerd-crun",title:"Kubernetes + containerd + crun",description:"Quick start",source:"@site/docs/develop/deploy/kubernetes/kubernetes-containerd-crun.md",sourceDirName:"develop/deploy/kubernetes",slug:"/develop/deploy/kubernetes/kubernetes-containerd-crun",permalink:"/docs/develop/deploy/kubernetes/kubernetes-containerd-crun",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/develop/deploy/kubernetes/kubernetes-containerd-crun.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"developSidebar",previous:{title:"Use Cases",permalink:"/docs/category/use-cases"},next:{title:"Kubernetes + CRI-O + crun",permalink:"/docs/develop/deploy/kubernetes/kubernetes-cri-o"}},i={},c=[{value:"Quick start",id:"quick-start",level:2},{value:"Install and start Kubernetes",id:"install-and-start-kubernetes",level:2},{value:"Run WebAssembly container images in Kubernetes",id:"run-webassembly-container-images-in-kubernetes",level:2},{value:"A simple WebAssembly app",id:"a-simple-webassembly-app",level:3},{value:"A WebAssembly-based HTTP service",id:"a-webassembly-based-http-service",level:3}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"kubernetes--containerd--crun"},"Kubernetes + containerd + crun"),(0,a.kt)("h2",{id:"quick-start"},"Quick start"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasmedge-containers-examples/"},"GitHub repo")," contains scripts and Github Actions for running our example apps on Kubernetes + containerd + crun."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Simple WebAssembly example ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/kubernetes_containerd/README.md"},"Quick start")," | ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/.github/workflows/kubernetes-containerd.yml"},"Github Actions")),(0,a.kt)("li",{parentName:"ul"},"WebAssembly-based HTTP service ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/kubernetes_containerd/http_server/README.md"},"Quick start")," | ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/.github/workflows/kubernetes-containerd-server.yml"},"Github Actions"))),(0,a.kt)("p",null,"In the rest of this section, we will explain the steps in detail."),(0,a.kt)("p",null,"We will assume that you have already ",(0,a.kt)("a",{parentName:"p",href:"/docs/develop/deploy/cri-runtime/containerd-crun"},"installed and configured containerd")," to work with WasmEdge container images."),(0,a.kt)("h2",{id:"install-and-start-kubernetes"},"Install and start Kubernetes"),(0,a.kt)("p",null,"Run the following commands from a terminal window. It sets up Kubernetes for local development."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Install go\n$ wget https://golang.org/dl/go1.17.1.linux-amd64.tar.gz\n$ sudo rm -rf /usr/local/go\n$ sudo tar -C /usr/local -xzf go1.17.1.linux-amd64.tar.gz\n$ source /home/${USER}/.profile\n\n# Clone k8s\n$ git clone https://github.com/kubernetes/kubernetes.git\n$ cd kubernetes\n$ git checkout v1.22.2\n\n# Install etcd with hack script in k8s\n$ sudo CGROUP_DRIVER=systemd CONTAINER_RUNTIME=remote CONTAINER_RUNTIME_ENDPOINT='unix:///var/run/crio/crio.sock' ./hack/install-etcd.sh\n$ export PATH=\"/home/${USER}/kubernetes/third_party/etcd:${PATH}\"\n$ sudo cp third_party/etcd/etcd* /usr/local/bin/\n\n# After run the above command, you can find the following files: /usr/local/bin/etcd  /usr/local/bin/etcdctl  /usr/local/bin/etcdutl\n\n# Build and run k8s with containerd\n$ sudo apt-get install -y build-essential\n$ sudo CGROUP_DRIVER=systemd CONTAINER_RUNTIME=remote CONTAINER_RUNTIME_ENDPOINT='unix:///var/run/crio/crio.sock' ./hack/local-up-cluster.sh\n\n... ...\nLocal Kubernetes cluster is running. Press Ctrl-C to shut it down.\n")),(0,a.kt)("p",null,"Do NOT close your terminal window. Kubernetes is running!"),(0,a.kt)("h2",{id:"run-webassembly-container-images-in-kubernetes"},"Run WebAssembly container images in Kubernetes"),(0,a.kt)("p",null,"Finally, we can run WebAssembly programs in Kubernetes as containers in pods. In this section, we will start from ",(0,a.kt)("strong",{parentName:"p"},"another terminal window")," and start using the cluster."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export KUBERNETES_PROVIDER=local\n\nsudo cluster/kubectl.sh config set-cluster local --server=https://localhost:6443 --certificate-authority=/var/run/kubernetes/server-ca.crt\nsudo cluster/kubectl.sh config set-credentials myself --client-key=/var/run/kubernetes/client-admin.key --client-certificate=/var/run/kubernetes/client-admin.crt\nsudo cluster/kubectl.sh config set-context local --cluster=local --user=myself\nsudo cluster/kubectl.sh config use-context local\nsudo cluster/kubectl.sh\n")),(0,a.kt)("p",null,"Let's check the status to make sure that the cluster is running."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ sudo cluster/kubectl.sh cluster-info\n\n# Expected output\nCluster "local" set.\nUser "myself" set.\nContext "local" created.\nSwitched to context "local".\nKubernetes control plane is running at https://localhost:6443\nCoreDNS is running at https://localhost:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\nTo further debug and diagnose cluster problems, use \'kubectl cluster-info dump\'.\n')),(0,a.kt)("h3",{id:"a-simple-webassembly-app"},"A simple WebAssembly app"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/simple_wasi_app.md"},"A separate article")," explains how to compile, package, and publish a simple WebAssembly WASI program as a container image to Docker hub. Run the WebAssembly-based image from Docker Hub in the Kubernetes cluster as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'sudo cluster/kubectl.sh run -it --rm --restart=Never wasi-demo --image=wasmedge/example-wasi:latest --annotations="module.wasm.image/variant=compat-smart" --overrides=\'{"kind":"Pod", "apiVersion":"v1", "spec": {"hostNetwork": true}}\' /wasi_example_main.wasm 50000000\n')),(0,a.kt)("p",null,"The output from the containerized application is printed into the console."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Random number: 401583443\nRandom bytes: [192, 226, 162, 92, 129, 17, 186, 164, 239, 84, 98, 255, 209, 79, 51, 227, 103, 83, 253, 31, 78, 239, 33, 218, 68, 208, 91, 56, 37, 200, 32, 12, 106, 101, 241, 78, 161, 16, 240, 158, 42, 24, 29, 121, 78, 19, 157, 185, 32, 162, 95, 214, 175, 46, 170, 100, 212, 33, 27, 190, 139, 121, 121, 222, 230, 125, 251, 21, 210, 246, 215, 127, 176, 224, 38, 184, 201, 74, 76, 133, 233, 129, 48, 239, 106, 164, 190, 29, 118, 71, 79, 203, 92, 71, 68, 96, 33, 240, 228, 62, 45, 196, 149, 21, 23, 143, 169, 163, 136, 206, 214, 244, 26, 194, 25, 101, 8, 236, 247, 5, 164, 117, 40, 220, 52, 217, 92, 179]\nPrinted from wasi: This is from a main function\nThis is from a main function\nThe env vars are as follows.\nThe args are as follows.\n/wasi_example_main.wasm\n50000000\nFile content is This is in a file\npod "wasi-demo-2" deleted\n')),(0,a.kt)("h3",{id:"a-webassembly-based-http-service"},"A WebAssembly-based HTTP service"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/http_server_wasi_app.md"},"A separate article")," explains how to compile, package, and publish a simple WebAssembly HTTP service application as a container image to Docker hub. Run the WebAssembly-based image from Docker Hub in the Kubernetes cluster as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'sudo cluster/kubectl.sh run --restart=Never http-server --image=wasmedge/example-wasi-http:latest --annotations="module.wasm.image/variant=compat-smart" --overrides=\'{"kind":"Pod", "apiVersion":"v1", "spec": {"hostNetwork": true}}\'\n')),(0,a.kt)("p",null,"Since we are using ",(0,a.kt)("inlineCode",{parentName:"p"},"hostNetwork")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl run")," command, the HTTP server image is running on the local network with IP address ",(0,a.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),". Now, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"curl")," command to access the HTTP service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl -d "name=WasmEdge" -X POST http://127.0.0.1:1234\necho: name=WasmEdge\n')),(0,a.kt)("p",null,"That's it!"))}m.isMDXComponent=!0}}]);