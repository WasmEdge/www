"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[9947],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,g=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return a?n.createElement(g,l(l({ref:t},d),{},{components:a})):n.createElement(g,l({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},43934:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={sidebar_position:2},l="Upgrade to WasmEdge 0.14.0",o={unversionedId:"embed/c/reference/upgrade_to_0.14.0",id:"embed/c/reference/upgrade_to_0.14.0",title:"Upgrade to WasmEdge 0.14.0",description:"Due to the WasmEdge C API breaking changes, this document shows the guideline for programming with WasmEdge C API to upgrade from the 0.13.5 to the 0.14.0 version.",source:"@site/docs/embed/c/reference/upgrade_to_0.14.0.md",sourceDirName:"embed/c/reference",slug:"/embed/c/reference/upgrade_to_0.14.0",permalink:"/docs/embed/c/reference/upgrade_to_0.14.0",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/embed/c/reference/upgrade_to_0.14.0.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"embedSidebar",previous:{title:"C API 0.14.1 Documentation",permalink:"/docs/embed/c/reference/latest"},next:{title:"C API 0.13.5 Documentation",permalink:"/docs/embed/c/reference/0.13.x"}},s={},p=[{value:"Concepts",id:"concepts",level:2},{value:"Value type creation and checking",id:"value-type-creation-and-checking",level:2},{value:"Use packaged buffer for loading",id:"use-packaged-buffer-for-loading",level:2}],d={toc:p},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"upgrade-to-wasmedge-0140"},"Upgrade to WasmEdge 0.14.0"),(0,r.kt)("p",null,"Due to the WasmEdge C API breaking changes, this document shows the guideline for programming with WasmEdge C API to upgrade from the ",(0,r.kt)("inlineCode",{parentName:"p"},"0.13.5")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"0.14.0")," version."),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Introduced new APIs for ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_ValType")," struct and integrated with WASM values."),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_ValType")," becomes a struct for supporting the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WebAssembly/function-references"},"typed function reference proposal")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WebAssembly/gc"},"GC proposal"),"."),(0,r.kt)("p",{parentName:"li"},"The enumerations ",(0,r.kt)("inlineCode",{parentName:"p"},"enum WasmEdge_ValType")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"enum WasmEdge_RefType")," are renamed as ",(0,r.kt)("inlineCode",{parentName:"p"},"enum WasmEdge_ValTypeCode")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"enum WasmEdge_RefTypeCode"),". Developers should use the following APIs to generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_ValType")," structures:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeGenI32()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeGenI64()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeGenF32()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeGenF64()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeGenV128()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeGenFuncRef()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeGenExternRef()"))),(0,r.kt)("p",{parentName:"li"},"And there's new APIs for checking the value types from the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_ValType")," struct:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsEqual()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsI32()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsI64()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsF32()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsF64()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsV128()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsFuncRef()")," for checking whether a type is a nullable or non-nullable function reference."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsExternRef()")," for checking whether a type is a nullable or non-nullable external reference."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsRef()")," for checking whether a type is a nullable or non-nullable reference."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValTypeIsRefNull()")," for checking whether a type is a nullable reference.")),(0,r.kt)("p",{parentName:"li"},"The following APIs using value types as parameters and return values are affected:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_FunctionTypeCreate()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_FunctionTypeGetParameters()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_FunctionTypeGetReturns()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_TableTypeCreate()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_TableTypeGetRefType()"),": returns a ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValType"),", which is guaranteed as a reference type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_GlobalTypeCreate()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_GlobalTypeGetValType()"))),(0,r.kt)("p",{parentName:"li"},"The following API is deleted:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValueGenNullRef()"),": please use ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValueGenFuncRef()")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_ValueGenExternRef()")," instead."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Introduced ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_Bytes")," for loading and serialization."),(0,r.kt)("p",{parentName:"li"},"Rathar than the raw buffer, we recommand developers to use ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_Bytes")," and related APIs to manage the input and output buffer for loading and serializing a WASM binary."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_BytesCreate()"),": create a ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_Bytes")," and copy from buffer with size."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_BytesWrap()"),": wrap a ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_Bytes")," onto a buffer with size."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_BytesDelete()"),": delete a allocated ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_Bytes"),".")),(0,r.kt)("p",{parentName:"li"},"For the old APIs, we also introduced the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_Bytes")," version. The old APIs will be deprecated in the future."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_CompilerCompileFromBytes()"),": this API has the same behavior as ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_CompilerCompileFromBuffer()"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_LoaderParseFromBytes()"),": this API has the same behavior as ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_LoaderParseFromBuffer()"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_LoaderSerializeASTModule()"),": this API outputs a ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_Bytes"),", and the result should be deleted by the caller."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_VMRegisterModuleFromBytes()"),": this API has the same behavior as ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_VMRegisterModuleFromBuffer()"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_VMRunWasmFromBytes()"),": this API has the same behavior as ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_VMRunWasmFromBuffer()"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_VMAsyncRunWasmFromBytes()"),": this API has the same behavior as ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_VMAsyncRunWasmFromBuffer()"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_VMLoadWasmFromBytes()"),": this API has the same behavior as ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_VMLoadWasmFromBuffer()"),"."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"APIs of instances changed for the new proposal."),(0,r.kt)("p",{parentName:"li"},"For supporting the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WebAssembly/function-references"},"typed function reference proposal")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/WebAssembly/gc"},"GC proposal")," proposal, the new API of table instance is needed for the defaultable reference values."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_TableInstanceCreateWithInit()"),": developers can use this API to create a table instance with default value.")),(0,r.kt)("p",{parentName:"li"},"Furthermore, for type matching and mutation checking, the result error is needed."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_GlobalInstanceSetValue()"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"WasmEdge_Result")," for result, and error occurs when type not matched or mutation failed.")))),(0,r.kt)("h2",{id:"value-type-creation-and-checking"},"Value type creation and checking"),(0,r.kt)("p",null,"Before the version ",(0,r.kt)("inlineCode",{parentName:"p"},"0.13.5"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_ValType")," is an ",(0,r.kt)("inlineCode",{parentName:"p"},"enum"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"enum WasmEdge_ValType ParamList[2] = {WasmEdge_ValType_I32,\n                                      WasmEdge_ValType_I32};\nenum WasmEdge_ValType ReturnList[1] = {WasmEdge_ValType_I32};\n/* Create a function type: {i32, i32} -> {i32}. */\nWasmEdge_FunctionTypeContext *HostFType =\n    WasmEdge_FunctionTypeCreate(ParamList, 2, ReturnList, 1);\n\nWasmEdge_FunctionTypeDelete(HostType);\n")),(0,r.kt)("p",null,"After ",(0,r.kt)("inlineCode",{parentName:"p"},"0.14.0"),", developers should use the APIs to generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_ValType"),". This affects the APIs list above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"WasmEdge_ValType ParamList[2] = {WasmEdge_ValTypeGenI32(), WasmEdge_ValTypeGenI32()};\nWasmEdge_ValType ReturnList[1] = {WasmEdge_ValTypeGenI32()};\n/* Create a function type: {i32, i32} -> {i32}. */\nWasmEdge_FunctionTypeContext *HostFType =\n    WasmEdge_FunctionTypeCreate(ParamList, 2, ReturnList, 1);\n\nWasmEdge_FunctionTypeDelete(HostType);\n")),(0,r.kt)("h2",{id:"use-packaged-buffer-for-loading"},"Use packaged buffer for loading"),(0,r.kt)("p",null,"Before the version ",(0,r.kt)("inlineCode",{parentName:"p"},"0.13.5"),", developers can use the raw buffer to load WASM binary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'uint8_t WASM[] = {/* WASM header */\n                  0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00,\n                  /* Type section */\n                  0x01, 0x07, 0x01,\n                  /* function type {i32, i32} -> {i32} */\n                  0x60, 0x02, 0x7F, 0x7F, 0x01, 0x7F,\n                  /* Import section */\n                  0x02, 0x13, 0x01,\n                  /* module name: "extern" */\n                  0x06, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E,\n                  /* extern name: "func-add" */\n                  0x08, 0x66, 0x75, 0x6E, 0x63, 0x2D, 0x61, 0x64, 0x64,\n                  /* import desc: func 0 */\n                  0x00, 0x00,\n                  /* Function section */\n                  0x03, 0x02, 0x01, 0x00,\n                  /* Export section */\n                  0x07, 0x0A, 0x01,\n                  /* export name: "addTwo" */\n                  0x06, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6F,\n                  /* export desc: func 0 */\n                  0x00, 0x01,\n                  /* Code section */\n                  0x0A, 0x0A, 0x01,\n                  /* code body */\n                  0x08, 0x00, 0x20, 0x00, 0x20, 0x01, 0x10, 0x00, 0x0B};\n\nWasmEdge_LoaderContext *LoadCxt = WasmEdge_LoaderCreate(NULL);\nWasmEdge_ASTModuleContext *ASTCxt = NULL;\nWasmEdge_Result Res;\n\n/* Load WASM or compiled-WASM from the buffer. */\nRes = WasmEdge_LoaderParseFromBuffer(LoadCxt, &ASTCxt, WASM, sizeof(WASM));\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Loading phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n}\n/* The output AST module context should be destroyed. */\nWasmEdge_ASTModuleDelete(ASTCxt);\n\nWasmEdge_LoaderDelete(LoadCxt);\n')),(0,r.kt)("p",null,"After ",(0,r.kt)("inlineCode",{parentName:"p"},"0.14.0"),", we recommanded developers use the ",(0,r.kt)("inlineCode",{parentName:"p"},"WasmEdge_Bytes")," related APIs instead. The old APIs still work, but will be deprecated in the future."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'uint8_t WASM[] = {/* WASM header */\n                  0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00,\n                  /* Type section */\n                  0x01, 0x07, 0x01,\n                  /* function type {i32, i32} -> {i32} */\n                  0x60, 0x02, 0x7F, 0x7F, 0x01, 0x7F,\n                  /* Import section */\n                  0x02, 0x13, 0x01,\n                  /* module name: "extern" */\n                  0x06, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E,\n                  /* extern name: "func-add" */\n                  0x08, 0x66, 0x75, 0x6E, 0x63, 0x2D, 0x61, 0x64, 0x64,\n                  /* import desc: func 0 */\n                  0x00, 0x00,\n                  /* Function section */\n                  0x03, 0x02, 0x01, 0x00,\n                  /* Export section */\n                  0x07, 0x0A, 0x01,\n                  /* export name: "addTwo" */\n                  0x06, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6F,\n                  /* export desc: func 0 */\n                  0x00, 0x01,\n                  /* Code section */\n                  0x0A, 0x0A, 0x01,\n                  /* code body */\n                  0x08, 0x00, 0x20, 0x00, 0x20, 0x01, 0x10, 0x00, 0x0B};\n\nWasmEdge_LoaderContext *LoadCxt = WasmEdge_LoaderCreate(NULL);\nWasmEdge_ASTModuleContext *ASTCxt = NULL;\nWasmEdge_Result Res;\n/* Wrap onto the `WASM`. */\nWasmEdge_Bytes Bytes = WasmEdge_BytesWrap(WASM, sizeof(WASM));\n/*\n * If developers want to copy from buffer, use the `WasmEdge_BytesCreate()`\n * instead. The created `WasmEdge_Bytes` should be destroyed.\n */\n\n/* Load WASM or compiled-WASM from the buffer. */\nRes = WasmEdge_LoaderParseFromBytes(LoadCxt, &ASTCxt, Bytes);\nif (!WasmEdge_ResultOK(Res)) {\n  printf("Loading phase failed: %s\\n", WasmEdge_ResultGetMessage(Res));\n}\n/* The output AST module context should be destroyed. */\nWasmEdge_ASTModuleDelete(ASTCxt);\n\nWasmEdge_LoaderDelete(LoadCxt);\n')))}u.isMDXComponent=!0}}]);