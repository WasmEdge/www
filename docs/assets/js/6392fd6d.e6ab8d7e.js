"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[3883],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var i=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=i.createContext({}),u=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(o.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=l,c=d["".concat(o,".").concat(m)]||d[m]||g[m]||a;return n?i.createElement(c,r(r({ref:t},p),{},{components:n})):i.createElement(c,r({ref:t},p))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,r=new Array(a);r[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:l,r[1]=s;for(var u=2;u<a;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},90001:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var i=n(87462),l=(n(67294),n(3905));const a={sidebar_position:2},r=void 0,s={unversionedId:"embed/use-case/plugin/rust_sdk",id:"embed/use-case/plugin/rust_sdk",title:"rust_sdk",description:"Using Plug-ins to Extend the Runtime in Rust",source:"@site/docs/embed/use-case/plugin/rust_sdk.md",sourceDirName:"embed/use-case/plugin",slug:"/embed/use-case/plugin/rust_sdk",permalink:"/docs/embed/use-case/plugin/rust_sdk",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/embed/use-case/plugin/rust_sdk.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"embedSidebar",previous:{title:"c_sdk",permalink:"/docs/embed/use-case/plugin/c_sdk"},next:{title:"go_sdk",permalink:"/docs/embed/use-case/plugin/go_sdk"}},o={},u=[{value:"Using Plug-ins to Extend the Runtime in Rust",id:"using-plug-ins-to-extend-the-runtime-in-rust",level:2},{value:"Loading Plug-ins from Paths",id:"loading-plug-ins-from-paths",level:2},{value:"Listing Loaded Plug-ins",id:"listing-loaded-plug-ins",level:2},{value:"Getting Plug-in Context by Name",id:"getting-plug-in-context-by-name",level:2},{value:"Getting Module Instances from Plug-ins",id:"getting-module-instances-from-plug-ins",level:2},{value:"Plug-in Module Instance",id:"plug-in-module-instance",level:2}],p={toc:u},d="wrapper";function g(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"using-plug-ins-to-extend-the-runtime-in-rust"},"Using Plug-ins to Extend the Runtime in Rust"),(0,l.kt)("p",null,"The WasmEdge plug-ins are the shared libraries to provide the WasmEdge runtime to load and create host module instances. With the plug-ins, the WasmEdge runtime can be extended more easily."),(0,l.kt)("h2",{id:"loading-plug-ins-from-paths"},"Loading Plug-ins from Paths"),(0,l.kt)("p",null,"Developers can start using WasmEdge plug-ins by loading them from specific paths. To load plug-ins from the default paths, the following API can be used:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"impl PluginManager\npub fn load(path: Option<&Path>) -> WasmEdgeResult<()>\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The default plug-in paths will be used if the path is not given."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The path specified in the ",(0,l.kt)("inlineCode",{parentName:"li"},"WASMEDGE_PLUGIN_PATH")," environment variable."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"../plugin/")," directory relative to the WasmEdge installation path."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"./wasmedge/")," directory under the library path if WasmEdge is installed in the ",(0,l.kt)("inlineCode",{parentName:"li"},"/usr")," directory."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If the path is given, then"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If the path is pointing at a file, then it indicates that a single plug-in will be loaded from the file."),(0,l.kt)("li",{parentName:"ul"},"If the path is pointing at a directory, then the method will load plug-ins from the files.")))),(0,l.kt)("p",null,"To get the names of all loaded plug-ins as returns -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn names() -> Vec<String>\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"path")," - A path to a plug-in file or a directory holding plug-in files. If ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),", then the default plug-in path will be used.")),(0,l.kt)("h2",{id:"listing-loaded-plug-ins"},"Listing Loaded Plug-ins"),(0,l.kt)("p",null,"Once plug-ins are loaded, developers can list the loaded plug-in names using the following approach:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn names() -> Vec<String>\n")),(0,l.kt)("h2",{id:"getting-plug-in-context-by-name"},"Getting Plug-in Context by Name"),(0,l.kt)("p",null,"Developers can get the plug-in context by its name using the following method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn find(name: impl AsRef<str>) -> Option<Plugin>\n")),(0,l.kt)("p",null,"Here ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," is the name of the target plug-in."),(0,l.kt)("h2",{id:"getting-module-instances-from-plug-ins"},"Getting Module Instances from Plug-ins"),(0,l.kt)("p",null,"With the plug-in context, developers can get module instances by providing the module name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn mod_names(&self) -> Vec<String>\n")),(0,l.kt)("p",null,"There may be several plug-ins in the default plug-in paths if users ",(0,l.kt)("a",{parentName:"p",href:"/docs/contribute/installer#plugins"},"installed WasmEdge plug-ins by the installer"),"."),(0,l.kt)("p",null,"Before using the plug-ins, developers should ",(0,l.kt)("a",{parentName:"p",href:"#loading-plug-ins-from-paths"},"Loading Plug-ins from Paths"),"."),(0,l.kt)("h2",{id:"plug-in-module-instance"},"Plug-in Module Instance"),(0,l.kt)("p",null,"To initialize the ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedge_process")," plug-in module instance with the parameters -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn init_wasmedge_process(allowed_cmds: Option<Vec<&str>>, allowed: bool)\n")),(0,l.kt)("p",null,"Here, ",(0,l.kt)("inlineCode",{parentName:"p"},"allowed_cmds")," is A white list of commands and ",(0,l.kt)("inlineCode",{parentName:"p"},"allowed")," determines if wasmedge_process is allowed to execute all commands on the white list."))}g.isMDXComponent=!0}}]);