"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[964],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},s=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=d(a),u=r,g=m["".concat(o,".").concat(u)]||m[u]||c[u]||l;return a?n.createElement(g,p(p({ref:t},s),{},{components:a})):n.createElement(g,p({ref:t},s))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,p=new Array(l);p[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:r,p[1]=i;for(var d=2;d<l;d++)p[d]=a[d];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},78088:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_position:2},p="Upgrade to WasmEdge-Go v0.14.0",i={unversionedId:"embed/go/reference/upgrade_to_0.14.0",id:"embed/go/reference/upgrade_to_0.14.0",title:"Upgrade to WasmEdge-Go v0.14.0",description:"Due to the WasmEdge-Go API breaking changes, this document shows the guideline of programming with WasmEdge-Go API to upgrade from the v0.13.5 to the v0.14.0 version.",source:"@site/docs/embed/go/reference/upgrade_to_0.14.0.md",sourceDirName:"embed/go/reference",slug:"/embed/go/reference/upgrade_to_0.14.0",permalink:"/docs/embed/go/reference/upgrade_to_0.14.0",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/embed/go/reference/upgrade_to_0.14.0.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"embedSidebar",previous:{title:"Go API v0.14.0 Documentation",permalink:"/docs/embed/go/reference/latest"},next:{title:"Go API v0.13.5 Documentation",permalink:"/docs/embed/go/reference/0.13.x"}},o={},d=[{value:"Concepts",id:"concepts",level:2},{value:"New <code>wasmedge.ValType</code> struct appied for all related APIs",id:"new-wasmedgevaltype-struct-appied-for-all-related-apis",level:2}],s={toc:d},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"upgrade-to-wasmedge-go-v0140"},"Upgrade to WasmEdge-Go v0.14.0"),(0,r.kt)("p",null,"Due to the WasmEdge-Go API breaking changes, this document shows the guideline of programming with WasmEdge-Go API to upgrade from the ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.13.5")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.14.0")," version."),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge.ValType")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge.RefType")," const values are replaced by the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge.ValType")," struct."),(0,r.kt)("p",{parentName:"li"},"Removed ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge.ValType")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge.RefType")," const values, and introduced the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge.ValType")," struct."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Added the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewValTypeI32()")," API to replace the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.ValType_I32")," const value."),(0,r.kt)("li",{parentName:"ul"},"Added the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewValTypeI64()")," API to replace the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.ValType_I64")," const value."),(0,r.kt)("li",{parentName:"ul"},"Added the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewValTypeF32()")," API to replace the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.ValType_F32")," const value."),(0,r.kt)("li",{parentName:"ul"},"Added the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewValTypeF64()")," API to replace the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.ValType_F64")," const value."),(0,r.kt)("li",{parentName:"ul"},"Added the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewValTypeV128()")," API to replace the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.ValType_V128")," const value."),(0,r.kt)("li",{parentName:"ul"},"Added the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewValTypeFuncRef()")," API to replace the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.ValType_FuncRef")," const value."),(0,r.kt)("li",{parentName:"ul"},"Added the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewValTypeExternRef()")," API to replace the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.ValType_ExterunRef")," const value.")),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge.ValType")," struct provides the series member functions to check the value type."),(0,r.kt)("p",{parentName:"li"},"Besides, the APIs related to the value types are also updated:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewFunctionType()")," accepts the new ",(0,r.kt)("inlineCode",{parentName:"li"},"[]*wasmedge.ValType")," for parameters now."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(*wasmedge.FunctionType).GetParameters()")," returns the new ",(0,r.kt)("inlineCode",{parentName:"li"},"[]*wasmedge.ValType")," now."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(*wasmedge.FunctionType).GetReturns()")," returns the new ",(0,r.kt)("inlineCode",{parentName:"li"},"[]*wasmedge.ValType")," now."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewTableType()")," accepts the new ",(0,r.kt)("inlineCode",{parentName:"li"},"*wasmedge.ValType")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.RefType")," for parameters now."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(*wasmedge.TableType).GetRefType()")," returns the new ",(0,r.kt)("inlineCode",{parentName:"li"},"*wasmedge.ValType")," now."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge.NewGlobalType()")," accepts the new ",(0,r.kt)("inlineCode",{parentName:"li"},"*wasmedge.ValType")," for parameters now."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(*wasmedge.GlobalType).GetValType()")," returns the new ",(0,r.kt)("inlineCode",{parentName:"li"},"*wasmedge.ValType")," now.")),(0,r.kt)("p",{parentName:"li"},"For the examples of the new ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge.ValType")," struct and affacted APIs, please refer to ",(0,r.kt)("a",{parentName:"p",href:"#new-wasmedgevaltype-struct-appied-for-all-related-apis"},"the example below"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Developers should handle the error when calling ",(0,r.kt)("inlineCode",{parentName:"p"},"(*wasmedge.Global).SetValue()")," API."),(0,r.kt)("p",{parentName:"li"},"With the GC and typed-function references proposals, there are new reference types that accepts non-nullable values.\nTherefore, when setting value into a global instance, the error occurs if developers set a null value into a non-nullable value type global.\nDevelopers should detect and handle the error when setting value into a global instance now."))),(0,r.kt)("h2",{id:"new-wasmedgevaltype-struct-appied-for-all-related-apis"},"New ",(0,r.kt)("inlineCode",{parentName:"h2"},"wasmedge.ValType")," struct appied for all related APIs"),(0,r.kt)("p",null,"Before the version ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.13.5"),", developers can use the const value of value types with function type APIs, and reference types with table type APIs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// Create a function type: {i32, i64, funcref} -> {f32}\nfunctype := wasmedge.NewFunctionType(\n    []wasmedge.ValType{\n        wasmedge.ValType_I32,\n        wasmedge.ValType_I64,\n        wasmedge.ValType_FuncRef,\n    },\n    []wasmedge.ValType{\n        wasmedge.ValType_F32,\n    })\n\n// Get the parameter types\nvar ptypes []wasmedge.ValType = functype.GetParameters()\nif ptypes[0] == wasmedge.ValType_I32 {\n    // This will be true here.\n    // ...\n} \nfunctype.Release()\n\n// Create a table type: {min: 1}, externref\nlim := wasmedge.NewLimit(1)\ntabtype := wasmedge.NewTableType(wasmedge.RefType_ExternRef, lim)\n\n// Get the reference type\nif tabtype.GetRefType() == wasmedge.RefType_ExternRef {\n    // This will be true here.\n    // ...\n}\ntabtype.Release()\n")),(0,r.kt)("p",null,"After ",(0,r.kt)("inlineCode",{parentName:"p"},"v0.14.0"),", developers should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge.ValType")," related APIs to create the value types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// Create a function type: {i32, i64, funcref} -> {f32}\nfunctype := wasmedge.NewFunctionType(\n    []*wasmedge.ValType{\n        wasmedge.NewValTypeI32(),\n        wasmedge.NewValTypeI64(),\n        wasmedge.NewValTypeFuncRef(),\n    },\n    []*wasmedge.ValType{\n        wasmedge.NewValTypeF32,\n    })\n\n// Get the parameter types\nvar ptypes []*wasmedge.ValType = functype.GetParameters()\nif ptypes[0].IsI32() {\n    // This will be true here.\n    // ...\n} \nfunctype.Release()\n\n// Create a table type: {min: 1}, externref\nlim := wasmedge.NewLimit(1)\ntabtype := wasmedge.NewTableType(wasmedge.NewValTypeExternRef(), lim)\n\n// Get the reference type\nif tabtype.GetRefType().IsExternRef() {\n    // This will be true here.\n    // ...\n}\ntabtype.Release()\n")))}c.isMDXComponent=!0}}]);