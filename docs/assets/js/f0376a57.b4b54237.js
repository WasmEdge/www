"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[6238],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},73290:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:2},i="Deploy with crun",l={unversionedId:"develop/deploy/oci-runtime/crun",id:"develop/deploy/oci-runtime/crun",title:"Deploy with crun",description:"The crun project has WasmEdge support baked in. This chapter will walk you through deploying WASM images with crun.",source:"@site/docs/develop/deploy/oci-runtime/crun.md",sourceDirName:"develop/deploy/oci-runtime",slug:"/develop/deploy/oci-runtime/crun",permalink:"/docs/develop/deploy/oci-runtime/crun",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/develop/deploy/oci-runtime/crun.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"developSidebar",previous:{title:"Low level runtime support",permalink:"/docs/category/low-level-runtime-support"},next:{title:"Deploy with youki",permalink:"/docs/develop/deploy/oci-runtime/youki"}},s={},u=[{value:"Fedora Platform",id:"fedora-platform",level:2},{value:"Other Linux Platforms",id:"other-linux-platforms",level:2},{value:"Quick start",id:"quick-start",level:3},{value:"Prerequisites",id:"prerequisites",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deploy-with-crun"},"Deploy with crun"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/containers/crun"},"crun project")," has WasmEdge support baked in. This chapter will walk you through deploying WASM images with crun."),(0,a.kt)("h2",{id:"fedora-platform"},"Fedora Platform"),(0,a.kt)("p",null,"The crun fedora package has WasmEdge as the default WebAssembly Runtime. So the easiest way to deploy WasmEdge with crun is on the Fedora Linux distribution. Please refer to the ",(0,a.kt)("a",{parentName:"p",href:"#other-linux-platforms"},"next section")," for the other Linux distributions."),(0,a.kt)("p",null,"First, install crun and WasmEdge on your fedora machine."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dnf -y install wasmedge\nsudo dnf -y install crun\n")),(0,a.kt)("p",null,"Next, run ",(0,a.kt)("inlineCode",{parentName:"p"},"crun -v")," to check if you installed successfully."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"crun -v\n# Output\ncrun version 1.7.2\ncommit: 0356bf4aff9a133d655dc13b1d9ac9424706cac4\nrundir: /run/user/501/crun\nspec: 1.0.0\n+SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +CRIU +LIBKRUN +WASM:wasmedge +YAJL\n")),(0,a.kt)("p",null,"You can see that crun has WasmEdge package already."),(0,a.kt)("p",null,"Next, you can run WASM apps on your ",(0,a.kt)("a",{parentName:"p",href:"/docs/start/getting-started/quick_start_redhat"},"fedora machine"),"."),(0,a.kt)("h2",{id:"other-linux-platforms"},"Other Linux Platforms"),(0,a.kt)("h3",{id:"quick-start"},"Quick start"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/second-state/wasmedge-containers-examples/"},"GitHub repo")," contains scripts and GitHub Actions for running our example apps on CRI-O."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Simple WebAssembly example ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/crio/README.md"},"Quick start")," | ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/.github/workflows/crio.yml"},"Github Actions")),(0,a.kt)("li",{parentName:"ul"},"HTTP service example ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/crio/http_server/README.md"},"Quick start")," | ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/second-state/wasmedge-containers-examples/blob/main/.github/workflows/crio-server.yml"},"Github Actions"))),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Make sure you have installed ",(0,a.kt)("a",{parentName:"p",href:"/docs/start/install#install"},"WasmEdge"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Build and configure crun with WasmEdge support"))),(0,a.kt)("p",null,"For now, the easiest approach is just built it yourself from source. First, let's ensure that ",(0,a.kt)("inlineCode",{parentName:"p"},"crun")," dependencies are installed on your Ubuntu 20.04. For other Linux distributions, please ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/containers/crun#readme"},"see here"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\nsudo apt install -y make git gcc build-essential pkgconf libtool \\\n    libsystemd-dev libprotobuf-c-dev libcap-dev libseccomp-dev libyajl-dev \\\n    go-md2man libtool autoconf python3 automake\n")),(0,a.kt)("p",null,"Next, configure, build, and install a ",(0,a.kt)("inlineCode",{parentName:"p"},"crun")," binary with WasmEdge support."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/containers/crun\ncd crun\n./autogen.sh\n./configure --with-wasmedge\nmake\nsudo make install\n")))}d.isMDXComponent=!0}}]);