"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[8148],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),c=i,g=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:1},l="WasmEdge Plug-in System Introduction",o={unversionedId:"contribute/plugin/intro",id:"contribute/plugin/intro",title:"WasmEdge Plug-in System Introduction",description:"While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, developers should implement the host functions before compilation. However, for a more flexible and dynamic extension of the host functions, WasmEdge provides a plug-in architecture to load the plug-in shared library.",source:"@site/docs/contribute/plugin/intro.md",sourceDirName:"contribute/plugin",slug:"/contribute/plugin/intro",permalink:"/docs/contribute/plugin/intro",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/contribute/plugin/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"contributeSidebar",previous:{title:"WasmEdge Plugin System",permalink:"/docs/category/wasmedge-plugin-system"},next:{title:"Develop WasmEdge Plug-in in C API",permalink:"/docs/contribute/plugin/develop_plugin_c"}},s={},d=[{value:"Benefits of Using WasmEdge Plug-in",id:"benefits-of-using-wasmedge-plug-in",level:2},{value:"Loadable Plug-in",id:"loadable-plug-in",level:2},{value:"Creating Loadable Plug-in",id:"creating-loadable-plug-in",level:3},{value:"Loading plug-in from paths",id:"loading-plug-in-from-paths",level:3},{value:"WasmEdge Currently Released Plug-ins",id:"wasmedge-currently-released-plug-ins",level:2}],p={toc:d},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"wasmedge-plug-in-system-introduction"},"WasmEdge Plug-in System Introduction"),(0,i.kt)("p",null,"While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, developers should implement the host functions before compilation. However, for a more flexible and dynamic extension of the host functions, WasmEdge provides a plug-in architecture to load the plug-in shared library."),(0,i.kt)("p",null,"A WasmEdge plug-in is a software component that extends the functionality of the WasmEdge runtime. Currently, developers can follow the guides to implement the plug-ins in ",(0,i.kt)("a",{parentName:"p",href:"/docs/contribute/plugin/develop_plugin_c"},"C API")," (recommended), ",(0,i.kt)("a",{parentName:"p",href:"/docs/contribute/plugin/develop_plugin_cpp"},"C++")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/contribute/plugin/develop_plugin_rustsdk"},"Rust"),". With the help of the WasmEdge SDKs in the supported languages, developers can load and register the host functions from the plug-in shared libraries, allowing them to seamlessly integrate the plug-ins into the WasmEdge runtime as if they were part of the core runtime."),(0,i.kt)("mermaid",{value:"graph LR\n    A((Host Application)) -- Loads --\x3e B((Plug-in Shared Library))\n    B -- Registers --\x3e C((Wasmedge Runtime))"}),(0,i.kt)("h2",{id:"benefits-of-using-wasmedge-plug-in"},"Benefits of Using WasmEdge Plug-in"),(0,i.kt)("p",null,"WasmEdge plug-ins are designed to extend the functionality of the WasmEdge runtime and can be helpful for developers and end-users in several ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Customization:")," WasmEdge plug-ins can be customized to suit the specific needs of a project. Developers can create plug-ins that integrate with other systems or tools or provide unique functionality unavailable in the core WasmEdge runtime.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Performance:")," WasmEdge plug-ins are designed to work seamlessly with the core runtime, minimizing overhead and maximizing performance, which means they can provide additional functionality without sacrificing performance.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Ease of use:")," WasmEdge plug-ins are easy to use and integrate with the WasmEdge runtime. Developers can load the plug-in into the runtime and use its functions as part of the core runtime.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Scalability:")," Developers can compile their compute-intensive functions into host functions and package them into a plug-in to provide the better performance as running in native code."))),(0,i.kt)("p",null,"WasmEdge plug-ins can provide developers and users with a versatile, customizable, high-performance, and secure way to extend the functionality of the WasmEdge runtime. WasmEdge plug-ins can also improve scalability and ease of use, making it easier to build and deploy complex applications on edge devices."),(0,i.kt)("h2",{id:"loadable-plug-in"},"Loadable Plug-in"),(0,i.kt)("p",null,"Loadable plug-ins are standalone shared libraries (",(0,i.kt)("inlineCode",{parentName:"p"},".so"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".dylib"),"/",(0,i.kt)("inlineCode",{parentName:"p"},".dll")," files) that the WasmEdge runtime environment can load at runtime. These plug-ins can provide additional functionality to the WasmEdge runtime environment, such as new modules that can be imported by WebAssembly modules."),(0,i.kt)("h3",{id:"creating-loadable-plug-in"},"Creating Loadable Plug-in"),(0,i.kt)("p",null,"To create a loadable plug-in for WasmEdge, developers can use the WasmEdge Plug-in SDK, which provides a set of Rust, C, and C++ APIs for creating and registering plug-ins. The SDK also includes ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/tree/master/examples/plugin/get-string"},"example code")," that demonstrates creating a simple plug-in that returns a string. By following the provided examples and leveraging the SDK's APIs, developers can quickly build custom plug-ins tailored to their specific needs."),(0,i.kt)("h3",{id:"loading-plug-in-from-paths"},"Loading plug-in from paths"),(0,i.kt)("p",null,"To use the loadable plug-ins, developers need to load them from specific paths into the WasmEdge runtime environment. The loading process involves the following steps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Loadable plug-ins can be loaded from default paths by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"WasmEdge_PluginLoadWithDefaultPaths()")," API. The default paths include:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The path specified in the environment variable ",(0,i.kt)("inlineCode",{parentName:"li"},"WASMEDGE_PLUGIN_PATH"),"."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"./plugin/")," directory relative to the WasmEdge installation path."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"./wasmedge/")," directory is located under the library path if WasmEdge is installed in a system directory such as ",(0,i.kt)("inlineCode",{parentName:"li"},"/usr")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"/usr/local"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the plug-ins are located in a specific path or directory, developers can use the ",(0,i.kt)("inlineCode",{parentName:"p"},'WasmEdge_PluginLoadFromPath("PATH_TO_PLUGIN/plug-in.so")')," API to load the plug-ins from that particular location."))),(0,i.kt)("p",null,"The WasmEdge runtime environment will search for the loadable plug-ins in the specified paths and load them if found."),(0,i.kt)("p",null,"The following flowchart shows the process of loading loadable plug-ins into the WasmEdge runtime environment from specific paths:"),(0,i.kt)("mermaid",{value:"graph LR\n    A((Start)) --\x3e B(Loadable Plug-ins)\n    B --\x3e C{Load Plug-ins}\n    C --\x3e D[Load from Default Paths]\n    C --\x3e E[Load from Specific Path]\n    C --\x3e F[Load from Specific Directory]\n    D --\x3e G{Is Plug-in Found?}\n    E --\x3e G\n    F --\x3e G\n    G -- Yes --\x3e H(Load Plug-in)\n    H --\x3e I(End)\n    G -- No --\x3e I"}),(0,i.kt)("p",null,"The flowchart shows loading loadable plug-ins into the WasmEdge runtime environment. The process involves searching for plug-ins in default paths, a specific path, or a specific directory. If a plug-in is found in any of these locations, it is loaded into the runtime environment. The flowchart enables developers to quickly load plug-ins and extend the capabilities of the WasmEdge runtime."),(0,i.kt)("p",null,"By following this flowchart, developers can effectively load loadable plug-ins into the WasmEdge runtime environment from specific paths, expanding the runtime's functionality according to their requirements."),(0,i.kt)("h2",{id:"wasmedge-currently-released-plug-ins"},"WasmEdge Currently Released Plug-ins"),(0,i.kt)("p",null,"There are several plug-in releases with the WasmEdge official releases. Please check the following table to check the release status and how to build from the source with the plug-ins."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Plug-in"),(0,i.kt)("th",{parentName:"tr",align:null},"Rust Crate"),(0,i.kt)("th",{parentName:"tr",align:null},"Released Platforms"),(0,i.kt)("th",{parentName:"tr",align:null},"Build Steps"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WasmEdge-Process"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://crates.io/crates/wasmedge_process_interface"},"wasmedge_process_interface")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 aarch64"),", and ",(0,i.kt)("inlineCode",{parentName:"td"},"ubuntu 20.04 x86_64")," (since ",(0,i.kt)("inlineCode",{parentName:"td"},"0.10.0"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/contribute/source/plugin/process"},"Build Wtih WasmEdge-Process"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://crates.io/crates/wasi-crypto"},"WASI-Crypto")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://crates.io/crates/wasi-crypto"},"wasi-crypto")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 aarch64"),", and ",(0,i.kt)("inlineCode",{parentName:"td"},"ubuntu 20.04 x86_64")," (since ",(0,i.kt)("inlineCode",{parentName:"td"},"0.10.1"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/contribute/source/plugin/wasi_crypto"},"Build With WASI-Crypto"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/develop/rust/wasinn/openvino"},"WASI-NN with OpenVINO backend")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://crates.io/crates/wasi-nn"},"wasi-nn")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ubuntu 20.04 x86_64")," (since ",(0,i.kt)("inlineCode",{parentName:"td"},"0.10.1"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/contribute/source/plugin/wasi_nn#build-wasmedge-with-wasi-nn-openvino-backend"},"Build With WASI-NN"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/develop/rust/wasinn/pytorch"},"WASI-NN with PyTorch backend")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://crates.io/crates/wasi-nn"},"wasi-nn")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ubuntu 20.04 x86_64")," (since ",(0,i.kt)("inlineCode",{parentName:"td"},"0.11.1"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"../source/plugin/wasi_nn#build-wasmedge-with-wasi-nn-pytorch-backend"},"Build With WASI-NN"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/develop/rust/wasinn/tensorflow_lite"},"WASI-NN with TensorFlow-Lite backend")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://crates.io/crates/wasi-nn"},"wasi-nn")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 aarch64"),", and ",(0,i.kt)("inlineCode",{parentName:"td"},"ubuntu 20.04 x86_64")," (since ",(0,i.kt)("inlineCode",{parentName:"td"},"0.11.2"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"../source/plugin/wasi_nn#build-wasmedge-with-wasi-nn-tensorflow-lite-backend"},"Build With WASI-NN"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WasmEdge-Image"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://crates.io/crates/wasmedge_tensorflow_interface"},"wasmedge_tensorflow_interface")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 aarch64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"ubuntu 20.04 x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"darwin x86_64"),", and ",(0,i.kt)("inlineCode",{parentName:"td"},"darwin arm64")," (since ",(0,i.kt)("inlineCode",{parentName:"td"},"0.13.0"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/contribute/source/plugin/image"},"Build With WasmEdge-Image"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WasmEdge-Tensorflow"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://crates.io/crates/wasmedge_tensorflow_interface"},"wasmedge_tensorflow_interface")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 aarch64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"ubuntu 20.04 x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"darwin x86_64"),", and ",(0,i.kt)("inlineCode",{parentName:"td"},"darwin arm64")," (since ",(0,i.kt)("inlineCode",{parentName:"td"},"0.13.0"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/contribute/source/plugin/tensorflow"},"Build With WasmEdge-Tensorflow"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WasmEdge-TensorflowLite"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://crates.io/crates/wasmedge_tensorflow_interface"},"wasmedge_tensorflow_interface")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"manylinux2014 aarch64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"ubuntu 20.04 x86_64"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"darwin x86_64"),", and ",(0,i.kt)("inlineCode",{parentName:"td"},"darwin arm64")," (since ",(0,i.kt)("inlineCode",{parentName:"td"},"0.13.0"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/contribute/source/plugin/tensorflowlite"},"Build With WasmEdge-TensorflowLite"))))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Due to the ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenVINO")," dependency, we only release the WASI-NN plug-in for the ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenVINO")," backend on ",(0,i.kt)("inlineCode",{parentName:"p"},"Ubuntu 20.04 x86_64")," now. We'll work with ",(0,i.kt)("inlineCode",{parentName:"p"},"manylinux2014")," versions in the future.")))}m.isMDXComponent=!0}}]);