"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[2197],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"startSidebar":[{"type":"link","label":"Getting Started with WasmEdge","href":"/docs/start/overview","docId":"start/overview"},{"type":"link","label":"Install and uninstall WasmEdge","href":"/docs/start/install","docId":"start/install"},{"type":"category","label":"Getting Started with WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Quick start on Linux","href":"/docs/start/getting-started/quick_start","docId":"start/getting-started/quick_start"},{"type":"link","label":"Quick start with Docker","href":"/docs/start/getting-started/quick_start_docker","docId":"start/getting-started/quick_start_docker"},{"type":"link","label":"Quick start with Red Hat","href":"/docs/start/getting-started/quick_start_redhat","docId":"start/getting-started/quick_start_redhat"}],"href":"/docs/category/getting-started-with-wasmedge"},{"type":"category","label":"What is WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge Features","href":"/docs/start/wasmedge/features","docId":"start/wasmedge/features"},{"type":"link","label":"WasmEdge Integrations","href":"/docs/start/wasmedge/integrations","docId":"start/wasmedge/integrations"},{"type":"category","label":"WasmEdge Extensions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WebAssembly Proposals","href":"/docs/start/wasmedge/extensions/proposals","docId":"start/wasmedge/extensions/proposals"},{"type":"link","label":"WasmEdge Plug-ins","href":"/docs/start/wasmedge/extensions/plugins","docId":"start/wasmedge/extensions/plugins"},{"type":"link","label":"Other Extensions","href":"/docs/start/wasmedge/extensions/unique_extensions","docId":"start/wasmedge/extensions/unique_extensions"}],"href":"/docs/category/wasmedge-extensions"},{"type":"link","label":"Component Model","href":"/docs/start/wasmedge/component_model","docId":"start/wasmedge/component_model"},{"type":"link","label":"Comparison","href":"/docs/start/wasmedge/comparison","docId":"start/wasmedge/comparison"}],"href":"/docs/category/what-is-wasmedge"},{"type":"category","label":"Running with WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"The wasmedge CLI","href":"/docs/start/build-and-run/cli","docId":"start/build-and-run/cli"},{"type":"link","label":"wasmedge run CLI","href":"/docs/start/build-and-run/run","docId":"start/build-and-run/run"},{"type":"link","label":"The AoT Compiler","href":"/docs/start/build-and-run/aot","docId":"start/build-and-run/aot"},{"type":"link","label":"Docker + WASM","href":"/docs/start/build-and-run/docker_wasm","docId":"start/build-and-run/docker_wasm"}],"href":"/docs/category/running-with-wasmedge"},{"type":"category","label":"WasmEdge Use-cases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Use Cases","href":"/docs/start/usage/use-cases","docId":"start/usage/use-cases"},{"type":"link","label":"WasmEdge On Smart Devices","href":"/docs/start/usage/wasm-smart-devices","docId":"start/usage/wasm-smart-devices"},{"type":"category","label":"Serverless Platforms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WebAssembly Serverless Functions in AWS Lambda","href":"/docs/start/usage/serverless/aws","docId":"start/usage/serverless/aws"},{"type":"link","label":"WebAssembly Serverless Functions in Netlify","href":"/docs/start/usage/serverless/netlify","docId":"start/usage/serverless/netlify"},{"type":"link","label":"WebAssembly serverless functions on Tencent Cloud","href":"/docs/start/usage/serverless/tencent","docId":"start/usage/serverless/tencent"},{"type":"link","label":"Rust and WebAssembly Serverless functions in Vercel","href":"/docs/start/usage/serverless/vercel","docId":"start/usage/serverless/vercel"}],"href":"/docs/category/serverless-platforms"}],"href":"/docs/category/wasmedge-use-cases"}],"developSidebar":[{"type":"link","label":"Develop WASM Apps","href":"/docs/develop/overview","docId":"develop/overview"},{"type":"category","label":"Develop WASM Apps in Rust","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Set up Rust toolchain","href":"/docs/develop/rust/setup","docId":"develop/rust/setup"},{"type":"link","label":"Hello world","href":"/docs/develop/rust/hello_world","docId":"develop/rust/hello_world"},{"type":"link","label":"Access OS services","href":"/docs/develop/rust/os","docId":"develop/rust/os"},{"type":"category","label":"HTTP services","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"HTTP client","href":"/docs/develop/rust/http_service/client","docId":"develop/rust/http_service/client"},{"type":"link","label":"Server","href":"/docs/develop/rust/http_service/server","docId":"develop/rust/http_service/server"}],"href":"/docs/category/http-services"},{"type":"category","label":"Socket networking","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Socket client","href":"/docs/develop/rust/socket_networking/client","docId":"develop/rust/socket_networking/client"},{"type":"link","label":"Socket server","href":"/docs/develop/rust/socket_networking/server","docId":"develop/rust/socket_networking/server"}],"href":"/docs/category/socket-networking"},{"type":"category","label":"AI inference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Llama 2 inference","href":"/docs/develop/rust/wasinn/llm_inference","docId":"develop/rust/wasinn/llm_inference"},{"type":"link","label":"Mediapipe solutions","href":"/docs/develop/rust/wasinn/mediapipe","docId":"develop/rust/wasinn/mediapipe"},{"type":"link","label":"PyTorch Backend","href":"/docs/develop/rust/wasinn/pytorch","docId":"develop/rust/wasinn/pytorch"},{"type":"link","label":"TensorFlow Lite Backend","href":"/docs/develop/rust/wasinn/tensorflow_lite","docId":"develop/rust/wasinn/tensorflow_lite"},{"type":"link","label":"OpenVINO Backend","href":"/docs/develop/rust/wasinn/openvino","docId":"develop/rust/wasinn/openvino"},{"type":"link","label":"TensorFlow Plug-in For WasmEdge","href":"/docs/develop/rust/wasinn/tf_plugin","docId":"develop/rust/wasinn/tf_plugin"}],"href":"/docs/category/ai-inference"},{"type":"category","label":"Database drivers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"MySQL driver","href":"/docs/develop/rust/database/my_sql_driver","docId":"develop/rust/database/my_sql_driver"},{"type":"link","label":"PostgreSQL driver","href":"/docs/develop/rust/database/postgres_driver","docId":"develop/rust/database/postgres_driver"},{"type":"link","label":"Redis driver","href":"/docs/develop/rust/database/redis_driver","docId":"develop/rust/database/redis_driver"}],"href":"/docs/category/database-drivers"},{"type":"link","label":"Dapr services","href":"/docs/develop/rust/dapr","docId":"develop/rust/dapr"},{"type":"link","label":"Crypto for WASI","href":"/docs/develop/rust/wasicrypto","docId":"develop/rust/wasicrypto"},{"type":"link","label":"Bindgen of Rust Functions","href":"/docs/develop/rust/bindgen","docId":"develop/rust/bindgen"},{"type":"link","label":"Command interface","href":"/docs/develop/rust/command","docId":"develop/rust/command"},{"type":"link","label":"Server-side rendering","href":"/docs/develop/rust/ssr","docId":"develop/rust/ssr"}],"href":"/docs/category/develop-wasm-apps-in-rust"},{"type":"category","label":"Develop WASM Apps in JavaScript","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/develop/javascript/intro","docId":"develop/javascript/intro"},{"type":"link","label":"Quickstart for JavaScript","href":"/docs/develop/javascript/hello_world","docId":"develop/javascript/hello_world"},{"type":"link","label":"Networking","href":"/docs/develop/javascript/networking","docId":"develop/javascript/networking"},{"type":"link","label":"AI inference","href":"/docs/develop/javascript/tensorflow","docId":"develop/javascript/tensorflow"},{"type":"link","label":"Node.js support","href":"/docs/develop/javascript/nodejs","docId":"develop/javascript/nodejs"},{"type":"link","label":"ES6 Modules","href":"/docs/develop/javascript/es6","docId":"develop/javascript/es6"},{"type":"link","label":"Built-in modules","href":"/docs/develop/javascript/modules","docId":"develop/javascript/modules"},{"type":"link","label":"NodeJS and NPM modules","href":"/docs/develop/javascript/npm","docId":"develop/javascript/npm"},{"type":"link","label":"Native JS API in Rust","href":"/docs/develop/javascript/rust","docId":"develop/javascript/rust"},{"type":"link","label":"Example: SSR","href":"/docs/develop/javascript/ssr","docId":"develop/javascript/ssr"}],"href":"/docs/category/develop-wasm-apps-in-javascript"},{"type":"category","label":"Develop WASM Apps in C/C++","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Hello World","href":"/docs/develop/c/hello_world","docId":"develop/c/hello_world"},{"type":"link","label":"Networking Socket","href":"/docs/develop/c/networking","docId":"develop/c/networking"},{"type":"link","label":"Thread","href":"/docs/develop/c/threads","docId":"develop/c/threads"},{"type":"link","label":"WebAssembly SIMD Example in C","href":"/docs/develop/c/simd","docId":"develop/c/simd"},{"type":"link","label":"Bpf userspace program example with wasm_bpf plug-in","href":"/docs/develop/c/bpf","docId":"develop/c/bpf"}],"href":"/docs/category/develop-wasm-apps-in-cc"},{"type":"category","label":"Develop WASM Apps in Go","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"TinyGo","href":"/docs/develop/go/hello_world","docId":"develop/go/hello_world"}],"href":"/docs/category/develop-wasm-apps-in-go"},{"type":"category","label":"Deploy WasmEdge apps in Kubernetes","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/develop/deploy/intro","docId":"develop/deploy/intro"},{"type":"link","label":"Docker + Wasm","href":"/docs/develop/deploy/docker_wasm","docId":"develop/deploy/docker_wasm"},{"type":"link","label":"Podman","href":"/docs/develop/deploy/podman","docId":"develop/deploy/podman"},{"type":"category","label":"Low level runtime support","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Deploy with crun","href":"/docs/develop/deploy/oci-runtime/crun","docId":"develop/deploy/oci-runtime/crun"},{"type":"link","label":"Deploy with youki","href":"/docs/develop/deploy/oci-runtime/youki","docId":"develop/deploy/oci-runtime/youki"},{"type":"link","label":"Deploy with quark","href":"/docs/develop/deploy/oci-runtime/quark","docId":"develop/deploy/oci-runtime/quark"}],"href":"/docs/category/low-level-runtime-support"},{"type":"link","label":"Using WasmEdge in Docker","href":"/docs/develop/deploy/using-wasmedge-in-docker","docId":"develop/deploy/using-wasmedge-in-docker"},{"type":"category","label":"High level runtime support","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Deploy with containerd\'s runwasi","href":"/docs/develop/deploy/cri-runtime/containerd","docId":"develop/deploy/cri-runtime/containerd"},{"type":"link","label":"containerd + crun","href":"/docs/develop/deploy/cri-runtime/containerd-crun","docId":"develop/deploy/cri-runtime/containerd-crun"},{"type":"link","label":"CRI-O + crun","href":"/docs/develop/deploy/cri-runtime/crio-crun","docId":"develop/deploy/cri-runtime/crio-crun"}],"href":"/docs/category/high-level-runtime-support"},{"type":"category","label":"Kubernetes Use Cases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Kubernetes + containerd + crun","href":"/docs/develop/deploy/kubernetes/kubernetes-containerd-crun","docId":"develop/deploy/kubernetes/kubernetes-containerd-crun"},{"type":"link","label":"Kubernetes + CRI-O + crun","href":"/docs/develop/deploy/kubernetes/kubernetes-cri-o","docId":"develop/deploy/kubernetes/kubernetes-cri-o"},{"type":"link","label":"Kubernetes + Containerd + Runwasi","href":"/docs/develop/deploy/kubernetes/kubernetes-containerd-runwasi","docId":"develop/deploy/kubernetes/kubernetes-containerd-runwasi"},{"type":"link","label":"OpenYurt","href":"/docs/develop/deploy/kubernetes/openyurt","docId":"develop/deploy/kubernetes/openyurt"},{"type":"link","label":"SuperEdge","href":"/docs/develop/deploy/kubernetes/superedge","docId":"develop/deploy/kubernetes/superedge"},{"type":"link","label":"KubeEdge","href":"/docs/develop/deploy/kubernetes/kubedge","docId":"develop/deploy/kubernetes/kubedge"},{"type":"link","label":"Kind","href":"/docs/develop/deploy/kubernetes/kind","docId":"develop/deploy/kubernetes/kind"},{"type":"link","label":"Knative","href":"/docs/develop/deploy/kubernetes/knative","docId":"develop/deploy/kubernetes/knative"},{"type":"link","label":"OpenFunction","href":"/docs/develop/deploy/kubernetes/openfunction","docId":"develop/deploy/kubernetes/openfunction"},{"type":"link","label":"Kwasm","href":"/docs/develop/deploy/kubernetes/kwasm","docId":"develop/deploy/kubernetes/kwasm"},{"type":"link","label":"WasmEdge DockerSlim","href":"/docs/develop/deploy/kubernetes/docker-slim","docId":"develop/deploy/kubernetes/docker-slim"}],"href":"/docs/category/kubernetes-use-cases"}],"href":"/docs/category/deploy-wasmedge-apps-in-kubernetes"},{"type":"category","label":"Develop WASM Apps in Python","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Python","href":"/docs/develop/python/hello_world","docId":"develop/python/hello_world"}],"href":"/docs/category/develop-wasm-apps-in-python"},{"type":"category","label":"getting-started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Troubleshooting Guide","href":"/docs/develop/getting-started/troubleshooting_guide","docId":"develop/getting-started/troubleshooting_guide"}]}],"embedSidebar":[{"type":"link","label":"Embed WasmEdge in Your Apps","href":"/docs/embed/overview","docId":"embed/overview"},{"type":"category","label":"Quick Start","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Install Notes","href":"/docs/embed/quick-start/install","docId":"embed/quick-start/install"},{"type":"link","label":"Create a WASM app using Rust and wasmedge-bindgen","href":"/docs/embed/quick-start/wasm-app-in-rust","docId":"embed/quick-start/wasm-app-in-rust"},{"type":"link","label":"Embed the WASM app into your Go Host app","href":"/docs/embed/quick-start/embed-wasm-apps-go","docId":"embed/quick-start/embed-wasm-apps-go"}],"href":"/docs/category/quick-start"},{"type":"category","label":"Passing Complex Data","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge-Bindgen Introduction","href":"/docs/embed/data/intro","docId":"embed/data/intro"},{"type":"link","label":"Rust Host application with wasmedge-bindgen","href":"/docs/embed/data/rust","docId":"embed/data/rust"},{"type":"link","label":"Go Host application with wasmedge-bindgen","href":"/docs/embed/data/go","docId":"embed/data/go"}],"href":"/docs/category/passing-complex-data"},{"type":"link","label":"Developing components using witc","href":"/docs/embed/witc","docId":"embed/witc"},{"type":"category","label":"C SDK for Embedding WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge C SDK Introduction","href":"/docs/embed/c/intro","docId":"embed/c/intro"},{"type":"link","label":"Use WasmEdge Library","href":"/docs/embed/c/library","docId":"embed/c/library"},{"type":"link","label":"Host Functions","href":"/docs/embed/c/host_function","docId":"embed/c/host_function"},{"type":"link","label":"Customized External References","href":"/docs/embed/c/externref","docId":"embed/c/externref"},{"type":"link","label":"Multiple WASM Module Example","href":"/docs/embed/c/multiple_modules","docId":"embed/c/multiple_modules"},{"type":"category","label":"API Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"C API 0.13.4 Documentation","href":"/docs/embed/c/reference/latest","docId":"embed/c/reference/latest"},{"type":"link","label":"Upgrade to WasmEdge 0.13.0","href":"/docs/embed/c/reference/upgrade_to_0.13.0","docId":"embed/c/reference/upgrade_to_0.13.0"},{"type":"link","label":"C API 0.12.1 Documentation","href":"/docs/embed/c/reference/0.12.x","docId":"embed/c/reference/0.12.x"},{"type":"link","label":"Upgrade to WasmEdge 0.12.0","href":"/docs/embed/c/reference/upgrade_to_0.12.0","docId":"embed/c/reference/upgrade_to_0.12.0"},{"type":"link","label":"C API 0.11.2 Documentation","href":"/docs/embed/c/reference/0.11.x","docId":"embed/c/reference/0.11.x"},{"type":"link","label":"Upgrade to WasmEdge 0.11.0","href":"/docs/embed/c/reference/upgrade_to_0.11.0","docId":"embed/c/reference/upgrade_to_0.11.0"},{"type":"link","label":"C API 0.10.1 Documentation","href":"/docs/embed/c/reference/0.10.x","docId":"embed/c/reference/0.10.x"},{"type":"link","label":"Upgrade to WasmEdge 0.10.0","href":"/docs/embed/c/reference/upgrade_to_0.10.0","docId":"embed/c/reference/upgrade_to_0.10.0"},{"type":"link","label":"C API 0.9.1 Documentation","href":"/docs/embed/c/reference/0.9.x","docId":"embed/c/reference/0.9.x"}],"href":"/docs/category/api-reference"}],"href":"/docs/category/c-sdk-for-embedding-wasmedge"},{"type":"category","label":"Rust SDK for Embedding WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge Rust SDK","href":"/docs/embed/rust/intro","docId":"embed/rust/intro"},{"type":"link","label":"Embed WASM Apps","href":"/docs/embed/rust/app","docId":"embed/rust/app"},{"type":"link","label":"Embed WASM Functions and Async Functions","href":"/docs/embed/rust/function","docId":"embed/rust/function"},{"type":"link","label":"Pass Complex Data","href":"/docs/embed/rust/complex_data","docId":"embed/rust/complex_data"},{"type":"link","label":"AI Inference with Pytorch","href":"/docs/embed/rust/ai","docId":"embed/rust/ai"},{"type":"link","label":"Asyncfy","href":"/docs/embed/rust/asyncfy","docId":"embed/rust/asyncfy"},{"type":"link","label":"API Reference","href":"/docs/embed/rust/reference","docId":"embed/rust/reference"}],"href":"/docs/category/rust-sdk-for-embedding-wasmedge"},{"type":"category","label":"Go SDK for Embedding WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge Go SDK Introduction","href":"/docs/embed/go/intro","docId":"embed/go/intro"},{"type":"link","label":"Embed a standalone WASM app","href":"/docs/embed/go/app","docId":"embed/go/app"},{"type":"link","label":"Embed WASM Functions","href":"/docs/embed/go/function","docId":"embed/go/function"},{"type":"link","label":"Pass complex parameters to WASM functions","href":"/docs/embed/go/passing_data","docId":"embed/go/passing_data"},{"type":"link","label":"AI Inference with TensorFlow","href":"/docs/embed/go/ai","docId":"embed/go/ai"},{"type":"link","label":"Embed a bindgen function","href":"/docs/embed/go/bindgen","docId":"embed/go/bindgen"},{"type":"category","label":"API Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Go API v0.13.4 Documentation","href":"/docs/embed/go/reference/latest","docId":"embed/go/reference/latest"},{"type":"link","label":"Upgrade to WasmEdge-Go v0.13.0","href":"/docs/embed/go/reference/upgrade_to_0.13.0","docId":"embed/go/reference/upgrade_to_0.13.0"},{"type":"link","label":"Go API v0.12.1 Documentation","href":"/docs/embed/go/reference/0.12.x","docId":"embed/go/reference/0.12.x"},{"type":"link","label":"Upgrade to WasmEdge-Go v0.12.0","href":"/docs/embed/go/reference/upgrade_to_0.12.0","docId":"embed/go/reference/upgrade_to_0.12.0"},{"type":"link","label":"Go API v0.11.2 Documentation","href":"/docs/embed/go/reference/0.11.x","docId":"embed/go/reference/0.11.x"},{"type":"link","label":"Upgrade to WasmEdge-Go v0.11.0","href":"/docs/embed/go/reference/upgrade_to_0.11.0","docId":"embed/go/reference/upgrade_to_0.11.0"},{"type":"link","label":"Go API v0.10.1 Documentation","href":"/docs/embed/go/reference/0.10.x","docId":"embed/go/reference/0.10.x"},{"type":"link","label":"Upgrade to WasmEdge-Go v0.10.0","href":"/docs/embed/go/reference/upgrade_to_0.10.0","docId":"embed/go/reference/upgrade_to_0.10.0"},{"type":"link","label":"Go API v0.9.1 Documentation","href":"/docs/embed/go/reference/0.9.x","docId":"embed/go/reference/0.9.x"}],"href":"/docs/category/api-reference-1"}],"href":"/docs/category/go-sdk-for-embedding-wasmedge"},{"type":"category","label":"Java SDK for Embedding WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge Java SDK Introduction","href":"/docs/embed/java/intro","docId":"embed/java/intro"}],"href":"/docs/category/java-sdk-for-embedding-wasmedge"},{"type":"category","label":"C++ SDK for Embedding WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge C++ SDK Introduction","href":"/docs/embed/c++/intro","docId":"embed/c++/intro"}],"href":"/docs/category/c-sdk-for-embedding-wasmedge-1"},{"type":"category","label":"Python SDK for Embedding WasmEdge","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge Python SDK Introduction","href":"/docs/embed/python/intro","docId":"embed/python/intro"}],"href":"/docs/category/python-sdk-for-embedding-wasmedge"},{"type":"category","label":"Use Cases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"UDF in the libSQL database","href":"/docs/embed/use-case/libsql","docId":"embed/use-case/libsql"},{"type":"link","label":"YoMo Framework","href":"/docs/embed/use-case/yomo","docId":"embed/use-case/yomo"},{"type":"link","label":"wasm-nginx-module","href":"/docs/embed/use-case/wasm-nginx","docId":"embed/use-case/wasm-nginx"},{"type":"link","label":"Serverless Software-As-A-Service Functions","href":"/docs/embed/use-case/serverless-saas","docId":"embed/use-case/serverless-saas"},{"type":"link","label":"Server Side Rendering Modern Web UI","href":"/docs/embed/use-case/ssr-modern-ui","docId":"embed/use-case/ssr-modern-ui"},{"type":"category","label":"Plugin-User Guide","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"c_sdk","href":"/docs/embed/use-case/plugin/c_sdk","docId":"embed/use-case/plugin/c_sdk"},{"type":"link","label":"rust_sdk","href":"/docs/embed/use-case/plugin/rust_sdk","docId":"embed/use-case/plugin/rust_sdk"},{"type":"link","label":"go_sdk","href":"/docs/embed/use-case/plugin/go_sdk","docId":"embed/use-case/plugin/go_sdk"}],"href":"/docs/category/plugin-user-guide"}],"href":"/docs/category/use-cases"}],"contributeSidebar":[{"type":"link","label":"Contribute and Extend WasmEdge","href":"/docs/contribute/overview","docId":"contribute/overview"},{"type":"category","label":"Build WasmEdge from source","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Build Guide","href":"/docs/contribute/source/build_from_src","docId":"contribute/source/build_from_src"},{"type":"link","label":"Docker Images for Building WasmEdge","href":"/docs/contribute/source/docker","docId":"contribute/source/docker"},{"type":"category","label":"Supported Platforms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Build on Linux","href":"/docs/contribute/source/os/linux","docId":"contribute/source/os/linux"},{"type":"link","label":"Build on macOS","href":"/docs/contribute/source/os/macos","docId":"contribute/source/os/macos"},{"type":"link","label":"Build on Windows 10","href":"/docs/contribute/source/os/windows","docId":"contribute/source/os/windows"},{"type":"category","label":"Build and Run WasmEdge on Android","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Build WasmEdge for Android","href":"/docs/contribute/source/os/android/build","docId":"contribute/source/os/android/build"},{"type":"link","label":"CLI Tools","href":"/docs/contribute/source/os/android/cli","docId":"contribute/source/os/android/cli"},{"type":"link","label":"Call WasmEdge functions from an NDK native app","href":"/docs/contribute/source/os/android/ndk","docId":"contribute/source/os/android/ndk"},{"type":"link","label":"Call WasmEdge functions from an Android APK app","href":"/docs/contribute/source/os/android/apk","docId":"contribute/source/os/android/apk"}],"href":"/docs/category/build-and-run-wasmedge-on-android"},{"type":"link","label":"Build on OpenWRT","href":"/docs/contribute/source/os/openwrt","docId":"contribute/source/os/openwrt"},{"type":"link","label":"Build on RISC-V 64","href":"/docs/contribute/source/os/riscv64","docId":"contribute/source/os/riscv64"},{"type":"link","label":"Build on OpenHarmony","href":"/docs/contribute/source/os/openharmony","docId":"contribute/source/os/openharmony"},{"type":"link","label":"Build on seL4 RTOS","href":"/docs/contribute/source/os/sel4","docId":"contribute/source/os/sel4"},{"type":"link","label":"Build on Raspberry Pi","href":"/docs/contribute/source/os/raspberrypi","docId":"contribute/source/os/raspberrypi"}],"href":"/docs/category/supported-platforms"},{"type":"category","label":"Build Plug-ins","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Build with WASI-Crypto Plug-in","href":"/docs/contribute/source/plugin/wasi_crypto","docId":"contribute/source/plugin/wasi_crypto"},{"type":"link","label":"Build WasmEdge With WASI-Logging Plug-in","href":"/docs/contribute/source/plugin/wasi_logging","docId":"contribute/source/plugin/wasi_logging"},{"type":"link","label":"Build with WASI-nn Plug-in","href":"/docs/contribute/source/plugin/wasi_nn","docId":"contribute/source/plugin/wasi_nn"},{"type":"link","label":"Build WasmEdge With WasmEdge-Process Plug-in","href":"/docs/contribute/source/plugin/process","docId":"contribute/source/plugin/process"},{"type":"link","label":"Build WasmEdge With WasmEdge-Image Plug-in","href":"/docs/contribute/source/plugin/image","docId":"contribute/source/plugin/image"},{"type":"link","label":"Build WasmEdge With WasmEdge-Tensorflow Plug-in","href":"/docs/contribute/source/plugin/tensorflow","docId":"contribute/source/plugin/tensorflow"},{"type":"link","label":"Build WasmEdge With WasmEdge-TensorflowLite Plug-in","href":"/docs/contribute/source/plugin/tensorflowlite","docId":"contribute/source/plugin/tensorflowlite"},{"type":"link","label":"Build with eBPF Plug-in","href":"/docs/contribute/source/plugin/ebpf","docId":"contribute/source/plugin/ebpf"},{"type":"link","label":"Build with Rusttls Plug-in","href":"/docs/contribute/source/plugin/rusttls","docId":"contribute/source/plugin/rusttls"}],"href":"/docs/category/build-plug-ins"}],"href":"/docs/category/build-wasmedge-from-source"},{"type":"category","label":"WasmEdge Plugin System","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WasmEdge Plug-in System Introduction","href":"/docs/contribute/plugin/intro","docId":"contribute/plugin/intro"},{"type":"link","label":"Develop WasmEdge Plug-in in C API","href":"/docs/contribute/plugin/develop_plugin_c","docId":"contribute/plugin/develop_plugin_c"},{"type":"link","label":"Develop WasmEdge Plug-in in C++ API","href":"/docs/contribute/plugin/develop_plugin_cpp","docId":"contribute/plugin/develop_plugin_cpp"},{"type":"link","label":"Develop WasmEdge Plug-in in Rust SDK with witc","href":"/docs/contribute/plugin/develop_plugin_rustsdk","docId":"contribute/plugin/develop_plugin_rustsdk"}],"href":"/docs/category/wasmedge-plugin-system"},{"type":"link","label":"Testing","href":"/docs/contribute/test","docId":"contribute/test"},{"type":"link","label":"Fuzzing","href":"/docs/contribute/fuzzing","docId":"contribute/fuzzing"},{"type":"link","label":"WasmEdge Internal","href":"/docs/contribute/internal","docId":"contribute/internal"},{"type":"link","label":"Installer Guide","href":"/docs/contribute/installer","docId":"contribute/installer"},{"type":"link","label":"Contributing Steps","href":"/docs/contribute/","docId":"contribute/contribute"},{"type":"link","label":"Release Process","href":"/docs/contribute/release","docId":"contribute/release"},{"type":"link","label":"Join WasmEdge Community","href":"/docs/contribute/community","docId":"contribute/community"},{"type":"link","label":"WasmEdge Users and Collaborators","href":"/docs/contribute/users","docId":"contribute/users"}]},"docs":{"contribute/community":{"id":"contribute/community","title":"Join WasmEdge Community","description":"Everyone is welcome to join the WasmEdge community.","sidebar":"contributeSidebar"},"contribute/contribute":{"id":"contribute/contribute","title":"Contributing Steps","description":"Setup Development Environment","sidebar":"contributeSidebar"},"contribute/fuzzing":{"id":"contribute/fuzzing","title":"Fuzzing","description":"Work in Progress","sidebar":"contributeSidebar"},"contribute/installer":{"id":"contribute/installer","title":"Installer Guide","description":"Overview","sidebar":"contributeSidebar"},"contribute/internal":{"id":"contribute/internal","title":"WasmEdge Internal","description":"Overview of WasmEdge Execution Flow","sidebar":"contributeSidebar"},"contribute/overview":{"id":"contribute/overview","title":"Contribute and Extend WasmEdge","description":"Contribution is always welcome! The WebAssembly ecosystem is still in its early days. Hosted by CNCF, WasmEdge aims to become an open source \u201creference implementation\u201d of WebAssembly and its edge-related extensions. WasmEdge is developed in the open, and is constantly being improved by our users, contributors, and maintainers. It is because of you that we can bring great software to the community.We are looking forward to working together with you!","sidebar":"contributeSidebar"},"contribute/plugin/develop_plugin_c":{"id":"contribute/plugin/develop_plugin_c","title":"Develop WasmEdge Plug-in in C API","description":"By developing a plug-in, one can extend the functionality of WasmEdge and customize it to suit specific needs. WasmEdge provides a C based API for registering extension modules and host functions. While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, the plug-in API allows such extensions to be incorporated into WasmEdge\'s building and releasing process. Here is a flowchart showing all the steps needed for developing WasmEdge Plug-in -","sidebar":"contributeSidebar"},"contribute/plugin/develop_plugin_cpp":{"id":"contribute/plugin/develop_plugin_cpp","title":"Develop WasmEdge Plug-in in C++ API","description":"By developing a plug-in, one can extend the functionality of WasmEdge and customize it to suit specific needs. WasmEdge provides a C based API for registering extension modules and host functions. While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, the plug-in API allows such extensions to be incorporated into WasmEdge\'s building and releasing process.","sidebar":"contributeSidebar"},"contribute/plugin/develop_plugin_rustsdk":{"id":"contribute/plugin/develop_plugin_rustsdk","title":"Develop WasmEdge Plug-in in Rust SDK with witc","description":"By developing a plug-in, one can extend the functionality of WasmEdge and customize it to suit specific needs. WasmEdge provides a Rust-based API for registering extension modules and host functions.","sidebar":"contributeSidebar"},"contribute/plugin/intro":{"id":"contribute/plugin/intro","title":"WasmEdge Plug-in System Introduction","description":"While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, developers should implement the host functions before compilation. However, for a more flexible and dynamic extension of the host functions, WasmEdge provides a plug-in architecture to load the plug-in shared library.","sidebar":"contributeSidebar"},"contribute/release":{"id":"contribute/release","title":"Release Process","description":"Create the releasing process issue of the new version","sidebar":"contributeSidebar"},"contribute/source/build_from_src":{"id":"contribute/source/build_from_src","title":"Build Guide","description":"Please follow this guide to build and test WasmEdge from the source code.","sidebar":"contributeSidebar"},"contribute/source/docker":{"id":"contribute/source/docker","title":"Docker Images for Building WasmEdge","description":"WasmEdge supports a wide range of Linux distributions dated back to 2014. The official release contains statically linked binaries and libraries for older Linux systems.","sidebar":"contributeSidebar"},"contribute/source/os/android/apk":{"id":"contribute/source/os/android/apk","title":"Call WasmEdge functions from an Android APK app","description":"In this section, we will show you how to build a \\"regular\\" Android app (i.e., an APK file that can be installed on an Android device). The APK app embeds a WasmEdge Runtime. It can call WebAssembly functions through the embedded WasmEdge. The benefit is that developers can safely embed high-performance functions written in several different languages (e.g., Rust, JS, Grain, TinyGo etc) into a Kotlin application.","sidebar":"contributeSidebar"},"contribute/source/os/android/build":{"id":"contribute/source/os/android/build","title":"Build WasmEdge for Android","description":"The WasmEdge Runtime releases come with pre-built binaries for the Android OS. Why WasmEdge on Android?","sidebar":"contributeSidebar"},"contribute/source/os/android/cli":{"id":"contribute/source/os/android/cli","title":"CLI Tools","description":"In this section, we will show you how to use WasmEdge CLI tools on Android devices. We will showcase a full WasmEdge demo to perform image classification (Tensorflow-based AI inference) on an Android device.","sidebar":"contributeSidebar"},"contribute/source/os/android/ndk":{"id":"contribute/source/os/android/ndk","title":"Call WasmEdge functions from an NDK native app","description":"In this section, we will demonstrate how to build an Android native application using C and the Android SDK. The native application uses the WasmEdge C SDK to embed the WasmEdge Runtime, and call WASM functions through WasmEdge.","sidebar":"contributeSidebar"},"contribute/source/os/linux":{"id":"contribute/source/os/linux","title":"Build on Linux","description":"Get the Source Code","sidebar":"contributeSidebar"},"contribute/source/os/macos":{"id":"contribute/source/os/macos","title":"Build on macOS","description":"Currently, WasmEdge project on MacOS supports both Intel and M1 models. However, we only test and develop on Catalina, Big Sur, and Monterey.","sidebar":"contributeSidebar"},"contribute/source/os/openharmony":{"id":"contribute/source/os/openharmony","title":"Build on OpenHarmony","description":"Work in Progress","sidebar":"contributeSidebar"},"contribute/source/os/openwrt":{"id":"contribute/source/os/openwrt","title":"Build on OpenWRT","description":"Please follow this tutorial to build and test WasmEdge in OpenWrt(x86_64) from source code.","sidebar":"contributeSidebar"},"contribute/source/os/raspberrypi":{"id":"contribute/source/os/raspberrypi","title":"Build on Raspberry Pi","description":"Raspberry Pi uses 64-bit processors starting from the 3 Model B. So WasmEdge can be executed on Raspberry Pi as well. For ARM, you can choose any 64-bit Linux distribution, such as Raspbian, Ubuntu, or Manjaro. This document has been tested on the Manjaro for ARM distribution, and the hardware is the Raspberry Pi 3 Model B.","sidebar":"contributeSidebar"},"contribute/source/os/riscv64":{"id":"contribute/source/os/riscv64","title":"Build on RISC-V 64","description":"Prepare the Environment","sidebar":"contributeSidebar"},"contribute/source/os/sel4":{"id":"contribute/source/os/sel4","title":"Build on seL4 RTOS","description":"Video demo | Build logs | Build artifact","sidebar":"contributeSidebar"},"contribute/source/os/windows":{"id":"contribute/source/os/windows","title":"Build on Windows 10","description":"You can also find the details here.","sidebar":"contributeSidebar"},"contribute/source/plugin/ebpf":{"id":"contribute/source/plugin/ebpf","title":"Build with eBPF Plug-in","description":"The eBPF (extended Berkeley Packet Filter) plug-in provides an interface to execute eBPF programs in WasmEdge. It allows WasmEdge to execute eBPF code that is compiled into WebAssembly format. This guide will walk you through the steps to build WasmEdge with the eBPF plug-in.","sidebar":"contributeSidebar"},"contribute/source/plugin/image":{"id":"contribute/source/plugin/image","title":"Build WasmEdge With WasmEdge-Image Plug-in","description":"The WasmEdge Image plug-in is a software component that extends the functionality of the WasmEdge runtime, enabling it to load and decode JPEG and PNG images and convert them into tensors. This plug-in is useful for developers who need to process image data within their WebAssembly applications.","sidebar":"contributeSidebar"},"contribute/source/plugin/process":{"id":"contribute/source/plugin/process","title":"Build WasmEdge With WasmEdge-Process Plug-in","description":"The WasmEdge Process plug-in provides a sandboxed environment to execute system processes in a secured manner. This guide will walk you through the steps to build the WasmEdge Process plug-in.","sidebar":"contributeSidebar"},"contribute/source/plugin/rusttls":{"id":"contribute/source/plugin/rusttls","title":"Build with Rusttls Plug-in","description":"The WasmEdge Rustls plug-in is a replacement for the OpenSSL plug-in in WasmEdge. It provides a Rust-friendly interface to the Rustls library, which is a modern, fast, and more secure alternative to OpenSSL.","sidebar":"contributeSidebar"},"contribute/source/plugin/tensorflow":{"id":"contribute/source/plugin/tensorflow","title":"Build WasmEdge With WasmEdge-Tensorflow Plug-in","description":"The WasmEdge-TensorFlow plug-in is a software component that extends the functionality of the WasmEdge runtime. It allows developers to perform TensorFlow model inference with similar APIs to Python. The plug-in is designed for Rust to WebAssembly applications and depends on the TensorFlow C library for its operations.","sidebar":"contributeSidebar"},"contribute/source/plugin/tensorflowlite":{"id":"contribute/source/plugin/tensorflowlite","title":"Build WasmEdge With WasmEdge-TensorflowLite Plug-in","description":"The WasmEdge-TensorflowLite plug-in is a software component that extends the functionality of the WasmEdge runtime to perform TensorFlow-Lite model inference. It allows WebAssembly applications to access TensorFlow-Lite functionality when executed on the WasmEdge runtime. The plugin provides a bridge between the WasmEdge runtime and the TensorFlow-Lite backend, allowing developers to execute machine learning models within WebAssembly applications.","sidebar":"contributeSidebar"},"contribute/source/plugin/wasi_crypto":{"id":"contribute/source/plugin/wasi_crypto","title":"Build with WASI-Crypto Plug-in","description":"WebAssembly System Interface (WASI) Crypto is a proposal for a set of APIs that provide cryptographic operations for WebAssembly modules. It aims to provide a consistent, portable, and secure interface for cryptographic operations across different platforms. The WasmEdge WASI-Crypto plug-in is an implementation of this proposal, providing cryptographic functionalities to WebAssembly applications running on the WasmEdge runtime.","sidebar":"contributeSidebar"},"contribute/source/plugin/wasi_logging":{"id":"contribute/source/plugin/wasi_logging","title":"Build WasmEdge With WASI-Logging Plug-in","description":"WASI-Logging allows WebAssembly applications to log messages in a standardized way. This becomes particularly helpful when debugging applications or understanding the flow of execution within them. The WASI-Logging plug-in is designed to be straightforward to use, enabling developers to focus more on their application logic and less on logging mechanics.","sidebar":"contributeSidebar"},"contribute/source/plugin/wasi_nn":{"id":"contribute/source/plugin/wasi_nn","title":"Build with WASI-nn Plug-in","description":"The WASI-NN plug-in is a proposed WebAssembly System Interface (WASI) API for machine learning. It allows WebAssembly programs to access host-provided machine learning functions.","sidebar":"contributeSidebar"},"contribute/test":{"id":"contribute/test","title":"Testing","description":"Work in Progress","sidebar":"contributeSidebar"},"contribute/users":{"id":"contribute/users","title":"WasmEdge Users and Collaborators","description":"This list is constantly being updated. Please submit a PR to add your own item if we missed your use case. We appreciate our community members\' contributions. Thank you!","sidebar":"contributeSidebar"},"develop/c/bpf":{"id":"develop/c/bpf","title":"Bpf userspace program example with wasm_bpf plug-in","description":"There is a WasmEdge plug-in called wasm_bpf, which provided APIs to perform operations on eBPF program, such as loading, attaching and polling.","sidebar":"developSidebar"},"develop/c/hello_world":{"id":"develop/c/hello_world","title":"Hello World","description":"This chapter will take Hello World as an example to show how to compile a C program to WASM bytecode and run it in WasmEdge.","sidebar":"developSidebar"},"develop/c/networking":{"id":"develop/c/networking","title":"Networking Socket","description":"Work in Progress","sidebar":"developSidebar"},"develop/c/simd":{"id":"develop/c/simd","title":"WebAssembly SIMD Example in C","description":"128-bit packed Single Instruction Multiple Data (SIMD) instructions provide simultaneous computations over packed data in just one instruction. It\'s commonly used to improve performance for multimedia applications. With the SIMD proposal, the modules can benefit from using these commonly used instructions in modern hardware to gain more speedup.","sidebar":"developSidebar"},"develop/c/threads":{"id":"develop/c/threads","title":"Thread","description":"Work in Progress","sidebar":"developSidebar"},"develop/deploy/cri-runtime/containerd":{"id":"develop/deploy/cri-runtime/containerd","title":"Deploy with containerd\'s runwasi","description":"Work in Progress","sidebar":"developSidebar"},"develop/deploy/cri-runtime/containerd-crun":{"id":"develop/deploy/cri-runtime/containerd-crun","title":"containerd + crun","description":"Quick start","sidebar":"developSidebar"},"develop/deploy/cri-runtime/crio-crun":{"id":"develop/deploy/cri-runtime/crio-crun","title":"CRI-O + crun","description":"Quick start","sidebar":"developSidebar"},"develop/deploy/docker_wasm":{"id":"develop/deploy/docker_wasm","title":"Docker + Wasm","description":"Docker announced its support for WebAssembly in partnership with WasmEdge. Now we can use one single command line docker compose up to run WASM Apps.","sidebar":"developSidebar"},"develop/deploy/intro":{"id":"develop/deploy/intro","title":"Introduction","description":"WasmEdge could be integrated with the existing cloud-native infra seamlessly. So developers can leverage container tools such as Kubernetes, Docker, and CRI-O to deploy, manage, and run lightweight WebAssembly applications. This chapter will demonstrate how Kubernetes ecosystem tools work with WasmEdge WebAssembly applications.","sidebar":"developSidebar"},"develop/deploy/kubernetes/docker-slim":{"id":"develop/deploy/kubernetes/docker-slim","title":"WasmEdge DockerSlim","description":"The wasmedge/slim: Docker images provide slim WasmEdge images built with DockerSlim every release.","sidebar":"developSidebar"},"develop/deploy/kubernetes/kind":{"id":"develop/deploy/kubernetes/kind","title":"Kind","description":"KinD is a Kubernetes distribution that runs inside Docker and is well-suited for local development or integration testing. It runs containerd as CRI and crun as OCI Runtime.","sidebar":"developSidebar"},"develop/deploy/kubernetes/knative":{"id":"develop/deploy/kubernetes/knative","title":"Knative","description":"Knative is a platform-agnostic solution for running serverless deployments.","sidebar":"developSidebar"},"develop/deploy/kubernetes/kubedge":{"id":"develop/deploy/kubernetes/kubedge","title":"KubeEdge","description":"KubeEdge is an open-source system for extending native containerized application orchestration capabilities to hosts at Edge.","sidebar":"developSidebar"},"develop/deploy/kubernetes/kubernetes-containerd-crun":{"id":"develop/deploy/kubernetes/kubernetes-containerd-crun","title":"Kubernetes + containerd + crun","description":"Quick start","sidebar":"developSidebar"},"develop/deploy/kubernetes/kubernetes-containerd-runwasi":{"id":"develop/deploy/kubernetes/kubernetes-containerd-runwasi","title":"Kubernetes + Containerd + Runwasi","description":"Work in Progress","sidebar":"developSidebar"},"develop/deploy/kubernetes/kubernetes-cri-o":{"id":"develop/deploy/kubernetes/kubernetes-cri-o","title":"Kubernetes + CRI-O + crun","description":"Quick start","sidebar":"developSidebar"},"develop/deploy/kubernetes/kwasm":{"id":"develop/deploy/kubernetes/kwasm","title":"Kwasm","description":"Kwasm is a Kubernetes Operator that adds WebAssembly support to your Kubernetes nodes.","sidebar":"developSidebar"},"develop/deploy/kubernetes/openfunction":{"id":"develop/deploy/kubernetes/openfunction","title":"OpenFunction","description":"Work in Progress","sidebar":"developSidebar"},"develop/deploy/kubernetes/openyurt":{"id":"develop/deploy/kubernetes/openyurt","title":"OpenYurt","description":"OpenYurt is an intelligent edge computing platform that aims to extend the Cloud Native ecosystem to edge computing and IoT scenarios.","sidebar":"developSidebar"},"develop/deploy/kubernetes/superedge":{"id":"develop/deploy/kubernetes/superedge","title":"SuperEdge","description":"SuperEdge is an open-source container management system for edge computing. It extends native Kubernetes to the edge in a non-intrusive way.","sidebar":"developSidebar"},"develop/deploy/oci-runtime/crun":{"id":"develop/deploy/oci-runtime/crun","title":"Deploy with crun","description":"The crun project has WasmEdge support baked in. This chapter will walk you through deploying WASM images with crun.","sidebar":"developSidebar"},"develop/deploy/oci-runtime/quark":{"id":"develop/deploy/oci-runtime/quark","title":"Deploy with quark","description":"Work in Progress","sidebar":"developSidebar"},"develop/deploy/oci-runtime/youki":{"id":"develop/deploy/oci-runtime/youki","title":"Deploy with youki","description":"youki is an OCI container runtime written in Rust. youki has WasmEdge baked in. This chapter will walk you through deploying WASM images with youki.","sidebar":"developSidebar"},"develop/deploy/podman":{"id":"develop/deploy/podman","title":"Podman","description":"Fedora Platform","sidebar":"developSidebar"},"develop/deploy/using-wasmedge-in-docker":{"id":"develop/deploy/using-wasmedge-in-docker","title":"Using WasmEdge in Docker","description":"What is the WasmEdge DockerSlim","sidebar":"developSidebar"},"develop/getting-started/troubleshooting_guide":{"id":"develop/getting-started/troubleshooting_guide","title":"Troubleshooting Guide","description":"This guide aims to provide solutions to common problems you may encounter when using WasmEdge, helping you to troubleshoot effectively and get back to your development work as quickly as possible.","sidebar":"developSidebar"},"develop/go/hello_world":{"id":"develop/go/hello_world","title":"TinyGo","description":"The best way to run Go programs in WasmEdge is to compile Go source code to WebAssembly using TinyGo. In this article, we will show you how.","sidebar":"developSidebar"},"develop/javascript/es6":{"id":"develop/javascript/es6","title":"ES6 Modules","description":"The WasmEdge QuickJS runtime supports ES6 modules. The roll-up commands we used in the React SSR examples convert and bundle CommonJS and NPM modules into ES6 modules to execute in WasmEdge QuickJS. This article will show you how to use the ES6 module in WasmEdge.","sidebar":"developSidebar"},"develop/javascript/hello_world":{"id":"develop/javascript/hello_world","title":"Quickstart for JavaScript","description":"Prerequisites","sidebar":"developSidebar"},"develop/javascript/intro":{"id":"develop/javascript/intro","title":"Introduction","description":"WebAssembly started as a \\"JavaScript alternative for browsers\\". The idea is to safely run high-performance applications compiled from languages like C/C++ or Rust in browsers. In the browser, WebAssembly runs side by side with JavaScript.","sidebar":"developSidebar"},"develop/javascript/modules":{"id":"develop/javascript/modules","title":"Built-in modules","description":"The WasmEdge QuickJS runtime supports ES6 and NPM modules for application developers. However, those approaches could be more convenient for system developers. They need an easier way to add multiple JavaScript modules and APIs into the runtime without using build tools like rollup.js. The WasmEdge QuickJS modules system allows developers to drop JavaScript files into a modules folder and have the JavaScript functions defined in the files immediately available to all JavaScript programs in the runtime. A good use case for this module\'s system is to support Node.js APIs in WasmEdge.","sidebar":"developSidebar"},"develop/javascript/networking":{"id":"develop/javascript/networking","title":"Networking","description":"The QuickJS WasmEdge Runtime supports Node.js\'s http and fetch APIs via the WasmEdge networking socket extension. That enables WasmEdge developers to create HTTP server and client, as well as TCP/IP server and client, applications in JavaScript.","sidebar":"developSidebar"},"develop/javascript/nodejs":{"id":"develop/javascript/nodejs","title":"Node.js support","description":"Many existing JavaScript apps use Node.js built-in APIs. To support and reuse these JavaScript apps, we are implementing many Node.JS APIs for WasmEdge QuickJS. The goal is to have unmodified Node.js programs running in WasmEdge QuickJS.","sidebar":"developSidebar"},"develop/javascript/npm":{"id":"develop/javascript/npm","title":"NodeJS and NPM modules","description":"With rollup.js, we can run CommonJS (CJS) and NodeJS (NPM) modules in WasmEdge too.","sidebar":"developSidebar"},"develop/javascript/rust":{"id":"develop/javascript/rust","title":"Native JS API in Rust","description":"For JavaScript developers, incorporating Rust functions into JavaScript APIs is useful. That enables developers to write programs in \\"pure JavaScript\\" yet still use the high-performance Rust functions. You can do precisely that with the WasmEdge Runtime.","sidebar":"developSidebar"},"develop/javascript/ssr":{"id":"develop/javascript/ssr","title":"Example: SSR","description":"React is a very popular JavaScript web UI framework. A React application is \\"compiled\\" into an HTML and JavaScript static website. The web UI is rendered through the generated JavaScript code. However, executing the complex generated JavaScript entirely in the browser is often too slow and resource consuming to build the interactive HTML DOM objects. React Server Side Rendering (SSR) delegates the JavaScript UI rendering to a server and has the server stream rendered HTML DOM objects to the browser. The WasmEdge JavaScript runtime provides a lightweight and high-performance container to run React SSR functions on edge servers.","sidebar":"developSidebar"},"develop/javascript/tensorflow":{"id":"develop/javascript/tensorflow","title":"AI inference","description":"The WasmEdge-QuickJs supports the WasmEdge WASI-NN plug-ins so your JavaScript can run inference on AI models.","sidebar":"developSidebar"},"develop/overview":{"id":"develop/overview","title":"Develop WASM Apps","description":"A fundamental value proposition of WebAssembly is that it supports multiple programming languages. WebAssembly is a \\"managed runtime\\" for many programming languages including C/C++, Rust, Go, and even JavaScript and Python.","sidebar":"developSidebar"},"develop/python/hello_world":{"id":"develop/python/hello_world","title":"Python","description":"Several different language implementations of the Python runtime exist, and some of them support WebAssembly. This document will describe how to run RustPython on WasmEdge to execute Python programs.","sidebar":"developSidebar"},"develop/rust/bindgen":{"id":"develop/rust/bindgen","title":"Bindgen of Rust Functions","description":"If your Rust program has a main() function, you could compile it into WebAssembly, and run it using the wasmedge CLI tool as a standalone application. However, a far more common use case is to compile a Rust function into WebAssembly, and then call it from a host application. That is known as an embedded WASM function. The host application uses WasmEdge language SDKs (e.g., Go, Rust, C, Python (WIP) and Java (WIP)) to call those WASM functions compiled from Rust source code. In this chapter, we will cover a little about WasmEdge-bindgen, and you can find more information here","sidebar":"developSidebar"},"develop/rust/command":{"id":"develop/rust/command","title":"Command interface","description":"WASI enables WebAssembly programs to call standard library functions in the host operating system. It does so through a fine-grained security model known as \u201ccapability-based security\u201d. The WebAssembly VM owner can grant access to host system resources when the VM starts. The program cannot access resources (e.g., file folders) that are not explicitly allowed.","sidebar":"developSidebar"},"develop/rust/dapr":{"id":"develop/rust/dapr","title":"Dapr services","description":"Second State launched a new WebAssembly-based SDK for the Dapr API, which provides an easy way for Rust-based microservices in WasmEdge to interact with Dapr APIs and sidecar services.","sidebar":"developSidebar"},"develop/rust/database/my_sql_driver":{"id":"develop/rust/database/my_sql_driver","title":"MySQL driver","description":"The database connection is necessary for today\'s enterprise development. WasmEdge provides a MySQL driver for Rust developers, enabling developers to build database applications in Rust and then running in WasmEdge.","sidebar":"developSidebar"},"develop/rust/database/postgres_driver":{"id":"develop/rust/database/postgres_driver","title":"PostgreSQL driver","description":"A database connection is necessary for today\'s enterprise development. WasmEdge provides a PostgreSQL driver for Rust developers, enabling developers to build database applications in Rust and then running in WasmEdge.","sidebar":"developSidebar"},"develop/rust/database/redis_driver":{"id":"develop/rust/database/redis_driver","title":"Redis driver","description":"WasmEdge provides a Redis driver for Rust developers, enabling developers to build database applications in Rust and then running in WasmEdge.","sidebar":"developSidebar"},"develop/rust/hello_world":{"id":"develop/rust/hello_world","title":"Hello world","description":"Before we start, ensure you have Rust and WasmEdge installed.","sidebar":"developSidebar"},"develop/rust/http_service/client":{"id":"develop/rust/http_service/client","title":"HTTP client","description":"WasmEdge allows Rust developers to use APIs they are already familiar with to access the Internet via the HTTP or HTTPS protocols. This chapter will cover HTTP client APIs and libraries to access external web services from your WasmEdge app. For HTTP servers in WasmEdge, please see the next chapter.","sidebar":"developSidebar"},"develop/rust/http_service/server":{"id":"develop/rust/http_service/server","title":"Server","description":"For WasmEdge to become a cloud-native runtime for microservices, it needs to support HTTP servers. By its very nature, the HTTP server is always asynchronous (non-blocking -- so that it can handle concurrent requests). This chapter will cover HTTP servers using popular Rust APIs.","sidebar":"developSidebar"},"develop/rust/os":{"id":"develop/rust/os","title":"Access OS services","description":"The WASI (WebAssembly Systems Interface) standard is designed to allow WebAssembly applications to access operating system services. The wasm32-wasi target in the Rust compiler supports WASI. This section will use an example project to show how to use Rust standard APIs to access operating system services.","sidebar":"developSidebar"},"develop/rust/setup":{"id":"develop/rust/setup","title":"Set up Rust toolchain","description":"In the following chapters, we will show how to build and compile Rust programs into WASM bytecode and then run them in WasmEdge.","sidebar":"developSidebar"},"develop/rust/socket_networking/client":{"id":"develop/rust/socket_networking/client","title":"Socket client","description":"It is possible for WasmEdge applications to open TCP/IP or UDP network sockets in the host system to communicate directly with external applications. One of the key features of WasmEdge is that it supports non-blocking sockets. That allows even a single-threaded WASM application to handle concurrent network requests. For example, while the program is waiting for data to stream in from one connection, it can start or handle another connection. The wasmedgewasisocket crate enables Rust developers to work on the network socket level.","sidebar":"developSidebar"},"develop/rust/socket_networking/server":{"id":"develop/rust/socket_networking/server","title":"Socket server","description":"As we described in the client chapter, with the WasmEdge socket API, it is possible for Rust developers to work directly on the TCP and UDP socket level. In this chapter, we will show how to create HTTP servers with the TCP socket API. We chose HTTP here for demonstration purposes due to the simplicity of the HTTP protocol. If you need a production-ready HTTP server, check out the HTTP server chapter.","sidebar":"developSidebar"},"develop/rust/ssr":{"id":"develop/rust/ssr","title":"Server-side rendering","description":"Frontend web frameworks allow developers to create web apps in a high-level language and component model. The web app is built into a static website to be rendered in the browser. While many frontend web frameworks are based on JavaScript, such as React and Vue, Rust-based frameworks are also emerging as the Rust language gains traction among developers. Those web frameworks render the HTML DOM UI using the WebAssembly, compiled from Rust source code. They use wasm-bindgen to tie the Rust to the HTML DOM. While these frameworks send .wasm files to the browser to render the UI on the client side, some provide the additional choice for Server-side rendering. That is to run the WebAssembly code, build the HTML DOM UI on the server, and stream the HTML content to the browser for faster performance and startup time on slow devices and networks.","sidebar":"developSidebar"},"develop/rust/wasicrypto":{"id":"develop/rust/wasicrypto","title":"Crypto for WASI","description":"While optimizing compilers could allow efficient implementation of cryptographic features in WebAssembly, there are several occasions where a host implementation is more desirable. WASI-crypto aims to fill those gaps by defining a standard interface as a set of APIs. Currently not support Android.","sidebar":"developSidebar"},"develop/rust/wasinn/llm_inference":{"id":"develop/rust/wasinn/llm_inference","title":"Llama 2 inference","description":"WasmEdge now supports running llama2 series of models in Rust. We will use this example project to show how to make AI inferences with the llama2 model in WasmEdge and Rust.","sidebar":"developSidebar"},"develop/rust/wasinn/mediapipe":{"id":"develop/rust/wasinn/mediapipe","title":"Mediapipe solutions","description":"Mediapipe is a collection of highly popular AI models developed by Google. They focus on intelligent processing of media files and streams. The mediapipe-rs crate is a Rust library for data processing using the Mediapipe suite of models. The crate provides Rust APIs to pre-process the data in media files or streams, run AI model inference to analyze the data, and then post-process or manipulate the media data based on the AI output.","sidebar":"developSidebar"},"develop/rust/wasinn/openvino":{"id":"develop/rust/wasinn/openvino","title":"OpenVINO Backend","description":"We will use this example project to show how to make AI inference with an OpenVINO model in WasmEdge and Rust.","sidebar":"developSidebar"},"develop/rust/wasinn/pytorch":{"id":"develop/rust/wasinn/pytorch","title":"PyTorch Backend","description":"We will use this example project to show how to make AI inference with a PyTorch model in WasmEdge and Rust.","sidebar":"developSidebar"},"develop/rust/wasinn/tensorflow_lite":{"id":"develop/rust/wasinn/tensorflow_lite","title":"TensorFlow Lite Backend","description":"We will use this example project to show how to make AI inference with a TensorFlow Lite model in WasmEdge and Rust.","sidebar":"developSidebar"},"develop/rust/wasinn/tf_plugin":{"id":"develop/rust/wasinn/tf_plugin","title":"TensorFlow Plug-in For WasmEdge","description":"Developers can use WASI-NN to inference the models. However, for the TensorFlow and TensorFlow-Lite users, the WASI-NN APIs could be more friendly to retrieve the input and output tensors. Therefore WasmEdge provides the TensorFlow-related plug-in and rust SDK for inferencing models in WASM.","sidebar":"developSidebar"},"embed/c/externref":{"id":"embed/c/externref","title":"Customized External References","description":"External References denotes an opaque and unforgettable reference to a host object. A new externref type can be passed into a WASM module or returned. The WASM module cannot reveal an externref value\'s bit pattern nor create a fake host reference by an integer value.","sidebar":"embedSidebar"},"embed/c/host_function":{"id":"embed/c/host_function","title":"Host Functions","description":"Host functions are the functions outside WebAssembly and are passed to WASM modules as imports. The following steps give an example of implementing host functions and registering a host module into the WasmEdge runtime.","sidebar":"embedSidebar"},"embed/c/intro":{"id":"embed/c/intro","title":"WasmEdge C SDK Introduction","description":"The WasmEdge C API denotes an interface to embed the WasmEdge runtime into a C program. The following is the quick start guide for working with the C APIs of WasmEdge. For the details of the WasmEdge C API, please refer to the complete documentation. Before programming with the WasmEdge C API, please install WasmEdge first.","sidebar":"embedSidebar"},"embed/c/library":{"id":"embed/c/library","title":"Use WasmEdge Library","description":"When programming with WasmEdge C API, developers should include the required headers and link with the WasmEdge Library. Besides install WasmEdge with the WasmEdge shared library, developers can also build WasmEdge to generate the WasmEdge static library.","sidebar":"embedSidebar"},"embed/c/multiple_modules":{"id":"embed/c/multiple_modules","title":"Multiple WASM Module Example","description":"For those WASM modules that export their functions, the other WASM modules can import them as a library.","sidebar":"embedSidebar"},"embed/c/reference/0.10.x":{"id":"embed/c/reference/0.10.x","title":"C API 0.10.1 Documentation","description":"WasmEdge C API denotes an interface to access the WasmEdge runtime at version 0.10.1. The following are the guides to working with the C APIs of WasmEdge.","sidebar":"embedSidebar"},"embed/c/reference/0.11.x":{"id":"embed/c/reference/0.11.x","title":"C API 0.11.2 Documentation","description":"WasmEdge C API denotes an interface to access the WasmEdge runtime at version 0.11.2. The following are the guides to working with the C APIs of WasmEdge.","sidebar":"embedSidebar"},"embed/c/reference/0.12.x":{"id":"embed/c/reference/0.12.x","title":"C API 0.12.1 Documentation","description":"WasmEdge C API denotes an interface to access the WasmEdge runtime at version 0.12.1. The following are the guides to working with the C APIs of WasmEdge.","sidebar":"embedSidebar"},"embed/c/reference/0.9.x":{"id":"embed/c/reference/0.9.x","title":"C API 0.9.1 Documentation","description":"WasmEdge C API denotes an interface to access the WasmEdge runtime at version 0.9.1. The following are the guides to working with the C APIs of WasmEdge.","sidebar":"embedSidebar"},"embed/c/reference/latest":{"id":"embed/c/reference/latest","title":"C API 0.13.4 Documentation","description":"WasmEdge C API denotes an interface to access the WasmEdge runtime at version {{ wasmedge_version }}. The following are the guides to working with the C APIs of WasmEdge.","sidebar":"embedSidebar"},"embed/c/reference/upgrade_to_0.10.0":{"id":"embed/c/reference/upgrade_to_0.10.0","title":"Upgrade to WasmEdge 0.10.0","description":"Due to the WasmEdge C API breaking changes, this document shows the guideline of programming with WasmEdge C API to upgrade from the 0.9.1 to the 0.10.0 version.","sidebar":"embedSidebar"},"embed/c/reference/upgrade_to_0.11.0":{"id":"embed/c/reference/upgrade_to_0.11.0","title":"Upgrade to WasmEdge 0.11.0","description":"Due to the WasmEdge C API breaking changes, this document shows the guideline for programming with WasmEdge C API to upgrade from the 0.10.1 to the 0.11.0 version.","sidebar":"embedSidebar"},"embed/c/reference/upgrade_to_0.12.0":{"id":"embed/c/reference/upgrade_to_0.12.0","title":"Upgrade to WasmEdge 0.12.0","description":"Due to the WasmEdge C API breaking changes, this document shows the guideline for programming with WasmEdge C API to upgrade from the 0.11.2 to the 0.12.0 version.","sidebar":"embedSidebar"},"embed/c/reference/upgrade_to_0.13.0":{"id":"embed/c/reference/upgrade_to_0.13.0","title":"Upgrade to WasmEdge 0.13.0","description":"Due to the WasmEdge C API breaking changes, this document shows the guideline for programming with WasmEdge C API to upgrade from the 0.12.1 to the 0.13.0 version.","sidebar":"embedSidebar"},"embed/c++/intro":{"id":"embed/c++/intro","title":"WasmEdge C++ SDK Introduction","description":"The WasmEdge C++ SDK is a collection of headers and libraries that allow you to build and deploy WebAssembly (Wasm) modules for execution on WasmEdge devices. It includes a CMake project and a set of command-line tools that you can use to build and deploy your Wasm modules.","sidebar":"embedSidebar"},"embed/data/go":{"id":"embed/data/go","title":"Go Host application with wasmedge-bindgen","description":"Work in Progress","sidebar":"embedSidebar"},"embed/data/intro":{"id":"embed/data/intro","title":"WasmEdge-Bindgen Introduction","description":"Passing complex data like a string is difficult for WebAssembly since WASM does not have a string data type. That\'s why we have the WasmEdge-Bindgen project. The Wasmedge-Bindgen project provides Rust macros for functions to accept and return complex data types and then for functions in the host to call such Rust functions running in WasmEdge.","sidebar":"embedSidebar"},"embed/data/rust":{"id":"embed/data/rust","title":"Rust Host application with wasmedge-bindgen","description":"Work in Progress","sidebar":"embedSidebar"},"embed/go/ai":{"id":"embed/go/ai","title":"AI Inference with TensorFlow","description":"The WasmEdge extensions have been deprecated after the v0.12.1 version. We\'ll update to use the WasmEdge plug-in in the future.","sidebar":"embedSidebar"},"embed/go/app":{"id":"embed/go/app","title":"Embed a standalone WASM app","description":"The WasmEdge Go SDK can embed standalone WebAssembly applications \u2014 ie a Rust application with a main() function compiled into WebAssembly.","sidebar":"embedSidebar"},"embed/go/bindgen":{"id":"embed/go/bindgen","title":"Embed a bindgen function","description":"In this example, we will demonstrate how to call a few simple WebAssembly functions from a Go app. The functions are written in Rust, and require complex call parameters and return values. The #[wasmedge_bindgen] macro is needed for the compiler tools to auto-generate the correct code to pass call parameters from Go to WebAssembly.","sidebar":"embedSidebar"},"embed/go/function":{"id":"embed/go/function","title":"Embed WASM Functions","description":"In this example, we will demonstrate how to call a few simple WebAssembly functions from a Go app. The functions are written in Rust, and require complex call parameters and return values. The #[wasmedge_bindgen] macro is needed for the compiler tools to auto-generate the correct code to pass call parameters from Go to WebAssembly.","sidebar":"embedSidebar"},"embed/go/intro":{"id":"embed/go/intro","title":"WasmEdge Go SDK Introduction","description":"The following is the guide to working with the WasmEdge Go API. You can embed the WasmEdge into your go application through the WasmEdge Go API.","sidebar":"embedSidebar"},"embed/go/passing_data":{"id":"embed/go/passing_data","title":"Pass complex parameters to WASM functions","description":"An issue with the WebAssembly spec is that it only supports a very limited number of data types. If you want to embed a WebAssembly function with complex call parameters or return values, you must manage memory pointers on Go SDK and WebAssembly function sides.","sidebar":"embedSidebar"},"embed/go/reference/0.10.x":{"id":"embed/go/reference/0.10.x","title":"Go API v0.10.1 Documentation","description":"The following are the guides to develop with the WasmEdge-Go SDK.","sidebar":"embedSidebar"},"embed/go/reference/0.11.x":{"id":"embed/go/reference/0.11.x","title":"Go API v0.11.2 Documentation","description":"The following are the guides to develop with the WasmEdge-Go SDK.","sidebar":"embedSidebar"},"embed/go/reference/0.12.x":{"id":"embed/go/reference/0.12.x","title":"Go API v0.12.1 Documentation","description":"The following are the guides to working with the WasmEdge-Go SDK.","sidebar":"embedSidebar"},"embed/go/reference/0.9.x":{"id":"embed/go/reference/0.9.x","title":"Go API v0.9.1 Documentation","description":"The following are the guides to develop with the WasmEdge-Go SDK at WasmEdge version 0.9.1 and WasmEdge-Go version v0.9.2.","sidebar":"embedSidebar"},"embed/go/reference/latest":{"id":"embed/go/reference/latest","title":"Go API v0.13.4 Documentation","description":"The following are the guides to working with the WasmEdge-Go SDK.","sidebar":"embedSidebar"},"embed/go/reference/upgrade_to_0.10.0":{"id":"embed/go/reference/upgrade_to_0.10.0","title":"Upgrade to WasmEdge-Go v0.10.0","description":"Due to the WasmEdge-Go API breaking changes, this document shows the guideline of programming with WasmEdge-Go API to upgrade from the v0.9.2 to the v0.10.0 version.","sidebar":"embedSidebar"},"embed/go/reference/upgrade_to_0.11.0":{"id":"embed/go/reference/upgrade_to_0.11.0","title":"Upgrade to WasmEdge-Go v0.11.0","description":"Due to the WasmEdge C API breaking changes, this document shows the guideline for programming with WasmEdge C API to upgrade from the v0.10.1 to the v0.11.0 version.","sidebar":"embedSidebar"},"embed/go/reference/upgrade_to_0.12.0":{"id":"embed/go/reference/upgrade_to_0.12.0","title":"Upgrade to WasmEdge-Go v0.12.0","description":"Due to the WasmEdge-Go API breaking changes, this document shows the guideline of programming with WasmEdge-Go API to upgrade from the v0.11.2 to the v0.12.0 version.","sidebar":"embedSidebar"},"embed/go/reference/upgrade_to_0.13.0":{"id":"embed/go/reference/upgrade_to_0.13.0","title":"Upgrade to WasmEdge-Go v0.13.0","description":"Due to the WasmEdge-Go API breaking changes, this document shows the guideline of programming with WasmEdge-Go API to upgrade from the v0.12.1 to the v0.13.0 version.","sidebar":"embedSidebar"},"embed/java/intro":{"id":"embed/java/intro","title":"WasmEdge Java SDK Introduction","description":"Work in Progress","sidebar":"embedSidebar"},"embed/overview":{"id":"embed/overview","title":"Embed WasmEdge in Your Apps","description":"As we mentioned before, the most important use case for WasmEdge is to safely execute user-defined or community-contributed code as plug-ins in a software product. It enables third-party developers, vendors, suppliers, and community members to extend and customize the software product.","sidebar":"embedSidebar"},"embed/python/intro":{"id":"embed/python/intro","title":"WasmEdge Python SDK Introduction","description":"Work in Progress","sidebar":"embedSidebar"},"embed/quick-start/embed-wasm-apps-go":{"id":"embed/quick-start/embed-wasm-apps-go","title":"Embed the WASM app into your Go Host app","description":"In the previous chapter, we learned how to create a WASM app using Rust and wasmedge-bindgen tool. In this chapter, I will walk you through how to embed the compiled WASM app into your Go Host app.","sidebar":"embedSidebar"},"embed/quick-start/install":{"id":"embed/quick-start/install","title":"Install Notes","description":"To use a kind of WasmEdge language SDK, you must install WasmEdge itself first. Please be noted, he version of WasmEdge\'s language SDKs should be the same as the version of WasmEdge. For example, If you want to use WasmEdge Go SDK v{{ wasmedgeversion }}, then your WasmEdge version must be {{ wasmedgeversion }} as well.","sidebar":"embedSidebar"},"embed/quick-start/wasm-app-in-rust":{"id":"embed/quick-start/wasm-app-in-rust","title":"Create a WASM app using Rust and wasmedge-bindgen","description":"In the previous chapter, we learned how to install WasmEdge and WasmEdge Go SDK. This chapter will teach us how to create a WASM app using Rust and wasmedge-bindgen tool.","sidebar":"embedSidebar"},"embed/rust/ai":{"id":"embed/rust/ai","title":"AI Inference with Pytorch","description":"","sidebar":"embedSidebar"},"embed/rust/app":{"id":"embed/rust/app","title":"Embed WASM Apps","description":"","sidebar":"embedSidebar"},"embed/rust/asyncfy":{"id":"embed/rust/asyncfy","title":"Asyncfy","description":"Work in Progress","sidebar":"embedSidebar"},"embed/rust/complex_data":{"id":"embed/rust/complex_data","title":"Pass Complex Data","description":"Work in Progress","sidebar":"embedSidebar"},"embed/rust/function":{"id":"embed/rust/function","title":"Embed WASM Functions and Async Functions","description":"","sidebar":"embedSidebar"},"embed/rust/intro":{"id":"embed/rust/intro","title":"WasmEdge Rust SDK","description":"Overview","sidebar":"embedSidebar"},"embed/rust/reference":{"id":"embed/rust/reference","title":"API Reference","description":"Check out the wasmedge-sdk crate for more information.","sidebar":"embedSidebar"},"embed/use-case/libsql":{"id":"embed/use-case/libsql","title":"UDF in the libSQL database","description":"libSQL is a fork of the popular SQLite database. One of the key enhancements libSQL brings is UDF (User Defined Functions) support. Through Wasm-based UDFs, users can add their own processing logic to the database, and then process the data in and out of the database on the fly. libSQL uses WasmEdge to run these UDFs. In this article, I will show you how.","sidebar":"embedSidebar"},"embed/use-case/plugin/c_sdk":{"id":"embed/use-case/plugin/c_sdk","title":"c_sdk","description":"Using Plug-ins to Extend the Runtime in C","sidebar":"embedSidebar"},"embed/use-case/plugin/go_sdk":{"id":"embed/use-case/plugin/go_sdk","title":"go_sdk","description":"Using Plug-ins to Extend the Runtime in Go","sidebar":"embedSidebar"},"embed/use-case/plugin/rust_sdk":{"id":"embed/use-case/plugin/rust_sdk","title":"rust_sdk","description":"Using Plug-ins to Extend the Runtime in Rust","sidebar":"embedSidebar"},"embed/use-case/serverless-saas":{"id":"embed/use-case/serverless-saas","title":"Serverless Software-As-A-Service Functions","description":"WasmEdge can support customized SaaS extensions or applications using serverless functions instead of traditional network APIs. That dramatically improves SaaS users\' and developers\' productivity.","sidebar":"embedSidebar"},"embed/use-case/ssr-modern-ui":{"id":"embed/use-case/ssr-modern-ui","title":"Server Side Rendering Modern Web UI","description":"Traditional web applications follow the client-server model. In the past era of application servers, the entire UI is dynamically generated from the server. The browser is a thin client that displays the rendered web pages in real-time. However, as the browser becomes more capable and sophisticated, the client can take on more workload to improve application UX, performance, and security.","sidebar":"embedSidebar"},"embed/use-case/wasm-nginx":{"id":"embed/use-case/wasm-nginx","title":"wasm-nginx-module","description":"The wasm-nginx-module is an Nginx module built upon OpenResty. By implementing the Proxy-WASM ABI, any WASM program written with Proxy WASM SDK can be run inside it. Hence, you can write Go or Rust code, compile them into Wasm, then load & execute it in Nginx.","sidebar":"embedSidebar"},"embed/use-case/yomo":{"id":"embed/use-case/yomo","title":"YoMo Framework","description":"YoMo is a programming framework enabling developers to build a distributed cloud system (Geo-Distributed Cloud System). YoMo\'s communication layer is made on top of the QUIC protocol, which brings high-speed data transmission. In addition, it has a built-in Streaming Serverless \\"streaming function\\", which significantly improves the development experience of distributed cloud systems. The distributed cloud system built by YoMo provides an ultra-high-speed communication mechanism between near-field computing power and terminals. It has many use cases in Metaverse, VR/AR, IoT, etc.","sidebar":"embedSidebar"},"embed/witc":{"id":"embed/witc","title":"Developing components using witc","description":"Work in progress. Please refer to .","sidebar":"embedSidebar"},"start/build-and-run/aot":{"id":"start/build-and-run/aot","title":"The AoT Compiler","description":"After installation, users can execute the wasmedge compile command.","sidebar":"startSidebar"},"start/build-and-run/cli":{"id":"start/build-and-run/cli","title":"The wasmedge CLI","description":"After installing WasmEdge, you can use the wasmedge CLI to execute WASM files. We will cover how to run WASM files with WasmEdge on your machine and Docker images.","sidebar":"startSidebar"},"start/build-and-run/docker_wasm":{"id":"start/build-and-run/docker_wasm","title":"Docker + WASM","description":"The Docker Desktop distributes with the WasmEdge Runtime embedded. That allows developers to build, share and run very lightweight containers (i.e., a scratch empty container with only the .wasm file without any Linux OS libraries or files) through Docker tools. Those \\"WASM containers\\" are fully OCI-compliant and hence can be managed by Docker Hub. They are cross-platform and can run on any OS / CPU Docker supports (the OS and CPU platform is wasi/wasm). But most importantly, they are 1/10 of the size of a comparable Linux container and start up in 1/10 of the time, as the WASM containers do not need to bundle and start Linux libraries and services.","sidebar":"startSidebar"},"start/build-and-run/run":{"id":"start/build-and-run/run","title":"wasmedge run CLI","description":"After installation, users can execute the wasmedge run command.","sidebar":"startSidebar"},"start/getting-started/quick_start":{"id":"start/getting-started/quick_start","title":"Quick start on Linux","description":"In this guide, we will walk you through how to quickly install and run the WasmEdge Runtime on a generic Linux distribution (such as Ubuntu, Debian, Raspberry OS or WSL on Windows). Comprehensive and OS-specific installation instructions can be found here.","sidebar":"startSidebar"},"start/getting-started/quick_start_docker":{"id":"start/getting-started/quick_start_docker","title":"Quick start with Docker","description":"In this guide, we will walk you through how to quickly run WasmEdge apps in Docker Desktop. There is no additional dependencies as the entire development and runtime environments are managed by Docker Desktop.","sidebar":"startSidebar"},"start/getting-started/quick_start_redhat":{"id":"start/getting-started/quick_start_redhat","title":"Quick start with Red Hat","description":"In this guide, we will walk you through how to quickly run WasmEdge apps in Fedora / CentOS / Red Hat Linux / OpenShift systems. There is no additional dependencies as the entire development and runtime environments are managed by OpenSift / Podman.","sidebar":"startSidebar"},"start/install":{"id":"start/install","title":"Install and uninstall WasmEdge","description":"This chapter will discuss ways to install and uninstall the WasmEdge Runtime on various OSes and platforms. We will cover how to install plug-ins to WasmEdge.","sidebar":"startSidebar"},"start/overview":{"id":"start/overview","title":"Getting Started with WasmEdge","description":"WasmEdge is a lightweight, high-performance, and extensible WebAssembly runtime for cloud-native, edge, and decentralized applications. It powers serverless apps, embedded functions, microservices, udf, smart contracts, and IoT devices. WasmEdge is currently a CNCF (Cloud Native Computing Foundation) Sandbox project.","sidebar":"startSidebar"},"start/usage/serverless/aws":{"id":"start/usage/serverless/aws","title":"WebAssembly Serverless Functions in AWS Lambda","description":"In this article, we will show you two serverless functions in Rust and WasmEdge deployed on AWS Lambda. One is the image processing function, the other one is the TensorFlow inference function.","sidebar":"startSidebar"},"start/usage/serverless/netlify":{"id":"start/usage/serverless/netlify","title":"WebAssembly Serverless Functions in Netlify","description":"In this article we will show you two serverless functions in Rust and WasmEdge deployed on Netlify. One is the image processing function, the other one is the TensorFlow inference function.","sidebar":"startSidebar"},"start/usage/serverless/tencent":{"id":"start/usage/serverless/tencent","title":"WebAssembly serverless functions on Tencent Cloud","description":"As the main users of Tencent Cloud are from China, so the tutorial is written in Chinese.","sidebar":"startSidebar"},"start/usage/serverless/vercel":{"id":"start/usage/serverless/vercel","title":"Rust and WebAssembly Serverless functions in Vercel","description":"In this article, we will show you two serverless functions in Rust and WasmEdge deployed on Vercel. One is the image processing function, the other one is the TensorFlow inference function.","sidebar":"startSidebar"},"start/usage/use-cases":{"id":"start/usage/use-cases","title":"Use Cases","description":"Featuring AOT compiler optimization, WasmEdge is one of the fastest WebAssembly runtimes on the market today. Therefore WasmEdge is widely used in edge computing, automotive, Jamstack, serverless, SaaS, service mesh, and even blockchain applications.","sidebar":"startSidebar"},"start/usage/wasm-smart-devices":{"id":"start/usage/wasm-smart-devices","title":"WasmEdge On Smart Devices","description":"Smart device apps could embed WasmEdge as a middleware runtime to render interactive content on the UI, connect to native device drivers, and access specialized hardware features (i.e., the GPU for AI inference). The benefits of the WasmEdge runtime over native-compiled machine code include security, safety, portability, manageability, OTA upgradability, and developer productivity. WasmEdge runs on the following device OSes.","sidebar":"startSidebar"},"start/wasmedge/comparison":{"id":"start/wasmedge/comparison","title":"Comparison","description":"What\'s the relationship between WebAssembly and Docker?","sidebar":"startSidebar"},"start/wasmedge/component_model":{"id":"start/wasmedge/component_model","title":"Component Model","description":"The component model for WASM would dramatically improve WASM module\u2019s reusability and composability. It will allow better access from one WASM module to other modules and systems, including the operating system APIs (e.g., networking).","sidebar":"startSidebar"},"start/wasmedge/extensions/plugins":{"id":"start/wasmedge/extensions/plugins","title":"WasmEdge Plug-ins","description":"For those workloads which are too heavy to compile into WebAssembly, it would be more appropriate to build them into native host functions. To satisfy the portability of WebAssembly runtime, WasmEdge introduced the plug-in mechanism to make the host functions loadable and portable.","sidebar":"startSidebar"},"start/wasmedge/extensions/proposals":{"id":"start/wasmedge/extensions/proposals","title":"WebAssembly Proposals","description":"Standard WebAssembly Features","sidebar":"startSidebar"},"start/wasmedge/extensions/unique_extensions":{"id":"start/wasmedge/extensions/unique_extensions","title":"Other Extensions","description":"A challenge for running WASM apps on the server side is the lack of support for Linux APIs and common application libraries. WasmEdge fixes this by adding support for many platform APIs for WASM apps. Developers can often simply compile their Linux apps to WASM and expect it run in WasmEdge. WasmEdge provides an easy extension mechanism for the community to add these APIs. For example,","sidebar":"startSidebar"},"start/wasmedge/features":{"id":"start/wasmedge/features","title":"WasmEdge Features","description":"WasmEdge (a sandbox project under CNCF) is a safe, fast, lightweight, portable, and extensible WebAssembly runtime.","sidebar":"startSidebar"},"start/wasmedge/integrations":{"id":"start/wasmedge/integrations","title":"WasmEdge Integrations","description":"WasmEdge is a \\"serverless\\" runtime for cloud-native and edge computing applications. It allows developers safely embed third-party or \\"native\\" functions into a host application or a distributed computing framework.","sidebar":"startSidebar"}}}')}}]);