"use strict";(self.webpackChunkbook=self.webpackChunkbook||[]).push([[7967],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=r.createContext({}),o=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=o(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,u=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),c=o(n),g=l,m=c["".concat(u,".").concat(g)]||c[g]||d[g]||i;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,s=new Array(i);s[0]=g;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a[c]="string"==typeof e?e:l,s[1]=a;for(var o=2;o<i;o++)s[o]=n[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},13673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var r=n(87462),l=(n(67294),n(3905));const i={sidebar_position:8},s="Build with Rustls Plug-in",a={unversionedId:"contribute/source/plugin/rusttls",id:"contribute/source/plugin/rusttls",title:"Build with Rustls Plug-in",description:"The WasmEdge Rustls plug-in is a replacement for the OpenSSL plug-in in WasmEdge. It provides a Rust-friendly interface to the Rustls library, which is a modern, fast, and more secure alternative to OpenSSL.",source:"@site/docs/contribute/source/plugin/rusttls.md",sourceDirName:"contribute/source/plugin",slug:"/contribute/source/plugin/rusttls",permalink:"/docs/contribute/source/plugin/rusttls",draft:!1,editUrl:"https://github.com/wasmedge/docs/blob/main/docs/contribute/source/plugin/rusttls.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"contributeSidebar",previous:{title:"Build with eBPF Plug-in",permalink:"/docs/contribute/source/plugin/ebpf"},next:{title:"WasmEdge Plugin System",permalink:"/docs/category/wasmedge-plugin-system"}},u={},o=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Clone the WasmEdge Repository",id:"clone-the-wasmedge-repository",level:2},{value:"Navigate to the Rustls Plug-in Directory",id:"navigate-to-the-rustls-plug-in-directory",level:2},{value:"Build the Plug-in",id:"build-the-plug-in",level:2},{value:"Install the Plug-in",id:"install-the-plug-in",level:2},{value:"Usage",id:"usage",level:2}],p={toc:o},c="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"build-with-rustls-plug-in"},"Build with Rustls Plug-in"),(0,l.kt)("p",null,"The WasmEdge Rustls plug-in is a replacement for the OpenSSL plug-in in WasmEdge. It provides a Rust-friendly interface to the Rustls library, which is a modern, fast, and more secure alternative to OpenSSL."),(0,l.kt)("p",null,"Here's a step-by-step guide on how to build the WasmEdge Rustls plug-in:"),(0,l.kt)("h1",{id:"building-the-wasmedge-rustls-plug-in"},"Building the WasmEdge Rustls Plug-in"),(0,l.kt)("p",null,"The WasmEdge Rustls plug-in is a replacement for the OpenSSL plug-in in WasmEdge. It provides a Rust-friendly interface to the Rustls library, which is a modern, fast, and more secure alternative to OpenSSL."),(0,l.kt)("p",null,"Here's a step-by-step guide on how to build the WasmEdge Rustls plug-in:"),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"Ensure the following dependencies are installed on your system:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Rust: You can install it from the ",(0,l.kt)("a",{parentName:"li",href:"https://www.rust-lang.org/tools/install"},"official website"),"."),(0,l.kt)("li",{parentName:"ul"},"CMake: Minimum version 3.12. Install it from the ",(0,l.kt)("a",{parentName:"li",href:"https://cmake.org/download/"},"official website"),".")),(0,l.kt)("h2",{id:"clone-the-wasmedge-repository"},"Clone the WasmEdge Repository"),(0,l.kt)("p",null,"First, clone the WasmEdge repository from GitHub:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/WasmEdge/WasmEdge.git\n")),(0,l.kt)("h2",{id:"navigate-to-the-rustls-plug-in-directory"},"Navigate to the Rustls Plug-in Directory"),(0,l.kt)("p",null,"Navigate to the ",(0,l.kt)("inlineCode",{parentName:"p"},"wasmedge_rustls")," directory within the cloned repository:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd WasmEdge/plugins/wasmedge_rustls\n")),(0,l.kt)("h2",{id:"build-the-plug-in"},"Build the Plug-in"),(0,l.kt)("p",null,"Now you can build the Rustls plug-in. Run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build --release\n")),(0,l.kt)("p",null,"This command builds the plug-in in release mode. The compiled binary will be located in the ",(0,l.kt)("inlineCode",{parentName:"p"},"target/release")," directory."),(0,l.kt)("h2",{id:"install-the-plug-in"},"Install the Plug-in"),(0,l.kt)("p",null,"To install the plug-in, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"cargo install")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cargo install --path .\n")),(0,l.kt)("p",null,"This command will install the built plug-in into your Rust binary directory."),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"To use the plug-in with WasmEdge, you need to specify it when starting the WasmEdge runtime:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"wasmedge --dir .:. --reactor --rustls_plugin target/release/libwasmedge_rustls.so your_wasm_file.wasm\n")),(0,l.kt)("p",null,"Replace ",(0,l.kt)("inlineCode",{parentName:"p"},"your_wasm_file.wasm")," with the path to your WebAssembly file. The ",(0,l.kt)("inlineCode",{parentName:"p"},"--rustls_plugin")," flag specifies the path to the Rustls plug-in."),(0,l.kt)("p",null,"That's it! You have successfully built and installed the WasmEdge Rustls plug-in. Please ensure to replace the OpenSSL plug-in with the Rustls plug-in in your WasmEdge runtime configuration if you were previously using OpenSSL. "),(0,l.kt)("p",null,"For more information, you can refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/WasmEdge/WasmEdge/tree/master/plugins/wasmedge_rustls"},"GitHub repository"),"."))}d.isMDXComponent=!0}}]);